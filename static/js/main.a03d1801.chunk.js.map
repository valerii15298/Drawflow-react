{"version":3,"sources":["types.ts","components/drawflowHandler.ts","styles.ts","redux/Node.ts","redux/Flow.ts","redux/drawflowSlice.ts","redux/hooks.ts","components/Connection/index.ts","components/Connection/Circle.tsx","components/Connection/Path.tsx","components/NodeComponents.tsx","components/DrawflowNodeBlock.tsx","Mock/fields.mock.ts","Mock/index.ts","redux/store.ts","components/ButtonArea/DrawflowAdditionalArea.tsx","components/ButtonArea/DrawflowZoomArea.tsx","components/DrawflowHook.tsx","components/FilterList.tsx","App.tsx","index.tsx"],"names":["NODE_TYPE","Slices","getCanvasInfo","canvas","document","querySelector","canvasRect","getBoundingClientRect","x","y","width","clientWidth","height","clientHeight","handler","createCurvature","start","end","halfHeiht","dx","getPos","clientX","clientY","zoom","findIndexByElement","elmt","parentElement","arr","Array","from","childNodes","i","length","getPortPosWithZoom","size","pos","coef","MODAL_TYPE","portType","subnodeStyle","Node","id","flow","state","nodeState","spacingX","spacingY","this","drawflow","head","lane","port","Object","entries","ports","find","key","filter","startsWith","parentId","keys","connections","split","toString","getNode","Number","map","parent","Math","max","subnodesWidth","leftWidth","rightWidth","out1","totalWidth","forEach","node","update","isSub","out","xPos","console","log","setPos","alignChildren","subnodes","subNode","childrenTotalWidth","selfLeftWidth","leftChildWidth","childrenRightWidth","selfRightWidth","rightChildWidth","portId","conn","children","firstSubnode","flowLine","flowLineNodes","reduce","acc","complexParentNode","hasSubnodes","push","newPos","moveNode","nodeId","dy","data","newData","lodash","merge","assign","Flow","nodes","distanceToConnect","distanceToDisconnect","el","setLaneNumbers","heads","startId","startPort","endId","endPort","connectionAllowed","currentNode","currentNodeHead","parentConnection","alignAll","nodeInPortPos","portInPos","portDistances","outPorts","distance","hypot","sort","a","b","nearestPort","portToConnect","undefined","laneNodes","nextLaneNodes","nextNodes","nextNode","error","laneNumber","values","positionNumber","initialState","canvasDrag","config","drag","connectionsLabelEnable","canvasTranslate","value","min","tick","connectionsLabel","select","selectId","selectPath","showButton","newPathDirection","modalType","editLock","mouseBlockDragPos","addNode","payload","type","slice","createSlice","name","Drawflow","reducers","setEditLock","align","action","dragNode","setMouseBlockDragPos","unSelect","moveCanvas","movementX","movementY","canvasMouseMove","prevX","prevY","canvasMouseUp","v","addConnection","deleteNode","_","val","parseInt","deletePath","load","clear","pushPorts","newValue","nodeSize","actions","drawflowSlice","reducer","selectActiveDrawflow","flows","version","useAppDispatch","useDispatch","useAppSelector","useSelector","Connection","Circle","props","property","svgKey","xmlns","className","r","onMouseDown","e","Path","d","dispatch","stopPropagation","Round","JSON","stringify","DrawflowNodeBlock","ref","useRef","portComponent","portKey","onMouseUp","useEffect","current","offsetHeight","offsetWidth","getPortPos","getComputedStyle","left","top","inputs","outputs","newPorts","in","style","cursor","onContextMenu","onDoubleClick","makeRandomNames","searchWord","result","j","word","floor","random","charAt","getGroups","number","rnd","rez","testNode","MIDDLE","mock","getDummy","getFilters","changeVersion","createAction","addNewNode","dragTemplate","drawflowInitialState","templates","fetchNodeTemplates","createAsyncThunk","fetchFlowVersion","createReducer","builder","addCase","appState","fulfilled","addMatcher","store","configureStore","DrawflowAdditionalArea","s","onClick","DrawflowZoomArea","NewPath","startKey","ConnectionList","conns","endKey","selectDrawflow","createDraftSafeSelector","NodeList","handleKeyDown","addEventListener","removeEventListener","currentTarget","classList","contains","onMouseMove","onMouseEnter","transform","FilterList","list","searchArr","toLowerCase","item","idx","label","includes","onMouseDownCapture","App","useState","setSearchWord","placeholder","onChange","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a03d1801.chunk.js","sourcesContent":["export enum NODE_TYPE {\n    START = 'START',\n    MIDDLE = 'MIDDLE',\n    END = 'END',\n}\n\nexport enum Slices {\n    Drawflow = 'drawflow'\n}\n\nexport const CURV = 0.3;\n\nexport enum MODAL_TYPE {\n    NODE_SETTINGS = \"NODE_SETTINGS\",\n    GROUP_SETTINGS = \"GROUP_SETTINGS\",\n}\n\nexport enum portType {\n    in='in',\n    out='out'\n}\n\nexport type pos = {\n    x: number,\n    y: number,\n}\n\nexport type clientPos = {\n    clientX: number,\n    clientY: number,\n}\n\nexport type port = {\n    in: number,\n    out: number,\n}\n\n\n\nexport type ports = {\n    [propName: string]: pos\n}\n\n\n\nexport type block = {\n    name: string,\n    type: string,\n    value: string,\n    create?: boolean\n}\n\n\n\nexport type dataNode = {\n    type: string\n    data: block\n    port: port\n    pos: pos\n    isSub: boolean\n}\n\nexport interface node extends dataNode {\n    id: number\n    height: number\n    width: number\n    lane?: number\n    position?: number\n    head?: number\n    positionNumber?: number\n}\n\ntype RecursivePartial<T> = {\n    [P in keyof T]?:\n    T[P] extends (infer U)[] ? RecursivePartial<U>[] :\n    T[P] extends object ? RecursivePartial<T[P]> :\n    T[P];\n}\n\nexport type updateNode = RecursivePartial<node>\n\nexport type drawflow = {\n    [id: number]: node\n}\n\nexport type connections = {\n    [propName: string]: pos[]\n}\n\nexport type data = {\n    nodes: drawflow,\n    connections: connections,\n    connectionsLabel?: {\n        [propName: string]: string\n    },\n}\n\nexport interface stateData {\n    nodeId: number,\n    canvasDrag: boolean,\n    config: {\n        drag: boolean,\n        connectionsLabelEnable: boolean,\n        canvasTranslate: pos,\n        zoom: {\n            value: number,\n            max: number,\n            min: number,\n            tick: number,\n        },\n    },\n    drawflow: drawflow,\n    modalType: string | null,\n    newPathDirection: clientPos | null,\n    ports: ports,\n    connections: connections,\n    connectionsLabel: {\n        [propName: string]: string\n    },\n    selectId: string | number | null,\n    select: { type: string, portId?: number, selectId?: string | number } | null,\n    selectPath: string | null,\n    showButton: number | null,\n    editLock: boolean,\n    mouseBlockDragPos: { clientX?: number, clientY?: number },\n    portToConnect?: string | undefined\n}\n\nexport interface flowType {\n    version: number\n    flows: stateData[]\n    dragTemplate?: number | undefined\n    templates: block[]\n}\n\nexport type addConnectionType = { startId: number, startPort: number, endId: number, endPort: number }\nexport type loadType = { drawflow: drawflow, connections: connections }\nexport type moveNodeType = { dx: number, dy: number, nodeId: number }","import { CURV, stateData } from \"../types\";\n\nimport { pos } from \"../types\";\n\nexport const getPortListByNodeId = (nodeId: number, state: stateData) => {\n  const { ports } = state;\n  return Object.keys(ports).filter(key => key.split(/_/g)[0] === \"\" + nodeId);\n}\n\nconst createCurvature = (start: pos, end: pos) => {\n  const halfHeiht = (start.y - end.y) / 2\n  const dx = start.x - end.x\n  return `M ${start.x} ${start.y} v ${-halfHeiht} h ${-dx} v ${-halfHeiht} `\n}\n\nconst getCanvasInfo = () => {\n  // TODO : replace querySelector to someting\n  const canvas = (document.querySelector(\"#drawflow\") as HTMLElement).querySelector(\".drawflow\") as HTMLElement;\n  const canvasRect = canvas.getBoundingClientRect();\n  return {\n    x: canvasRect.x,\n    y: canvasRect.y,\n    width: canvas.clientWidth,\n    height: canvas.clientHeight,\n  };\n}\n\nconst getPos = (clientX: number, clientY: number, zoom: number) => {\n  const { x, y, width, height } = getCanvasInfo();\n  return {\n    x: clientX * (width / (width * zoom)) - (x * (width / (width * zoom))),\n    y: clientY * (height / (height * zoom)) - (y * (height / (height * zoom))),\n  }\n}\n\nconst findIndexByElement = (elmt: HTMLElement) => {\n  const parentElement = elmt.parentElement as HTMLElement;\n  const arr = Array.from(parentElement.childNodes);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === elmt) return i;\n  }\n  return -1;\n}\n\nconst getPortPosWithZoom = (size: { width: number, height: number }, pos: pos, zoom: number) => {\n  const canvas = handler.getCanvasInfo();\n  const coef = 1 / zoom\n\n  const x = size.width / 2 + (pos.x - canvas.x) * coef;\n  const y = size.height / 2 + (pos.y - canvas.y) * coef;\n\n  return { x, y };\n}\n\nconst handler = {\n  createCurvature,\n  getCanvasInfo,\n  getPos,\n  findIndexByElement,\n  getPortPosWithZoom,\n}\n\nexport default handler\n","export const subnodeStyle = {\n    // width: 100,\n    // height: 60,\n}\n\n","import lodash from \"lodash\"\nimport { subnodeStyle } from \"../styles\"\nimport { node, port, pos, stateData, updateNode } from \"../types\"\nimport { Flow } from \"./Flow\"\n\nexport default class Node {\n    public readonly id: number\n    private readonly state: stateData\n    public readonly flow: Flow\n    public readonly nodeState: node\n    public readonly spacingX = 40\n    public readonly spacingY = 60\n\n    constructor(id: number, flow: Flow) {\n        this.id = id\n        this.flow = flow\n        this.state = flow.state\n        this.nodeState = this.state.drawflow[this.id]\n    }\n\n    get head() {\n        return this.nodeState.head\n    }\n\n    get lane() {\n        return this.nodeState.lane\n    }\n\n    get port(): port {\n        return this.nodeState.port\n    }\n\n    get portInPos(): pos | undefined {\n        return Object.entries(this.state.ports).find(([key, value]) => key === `${this.id}_in_1`)?.[1]\n    }\n\n    get outPorts() {\n        return Object.entries(this.state.ports).filter(([key, pos]) => key.startsWith(`${this.id}_out`))\n    }\n\n    get parent(): Node | null {\n        const parentId = Object.keys(this.state.connections).find(key => key.split('_')[2] === this.id.toString())?.split('_')[0]\n        return parentId ? this.flow.getNode(Number(parentId)) : null\n    }\n\n    get parentConnection() {\n        return Object.keys(this.state.connections).find((key) => {\n            const arr = key.split('_').map(Number)\n            return arr[0] === this.parent?.id && arr[2] === this.id && arr[3] === 1\n        })\n    }\n\n    get totalWidth() {\n        const totalWidth = Math.max(this.width + this.subnodesWidth, this.leftWidth + this.rightWidth)\n        return totalWidth\n    }\n\n    get childrenTotalWidth() {\n        const { out1 } = this\n        if (!out1.length) return 0\n\n        let totalWidth = 0\n        out1.forEach(node => {\n            totalWidth += node.totalWidth\n        })\n        return totalWidth + this.spacingX * (out1.length - 1)\n    }\n\n    alignChildren() {\n        const { out1 } = this\n        this.update({ isSub: false, port: { out: 2 } })\n\n\n        let xPos = this.pos.x - (this.leftWidth - this.width / 2)\n\n        if (this.id === 4) console.log(this.leftWidth, this.width)\n        for (const node of out1) {\n            const x = xPos + (node.leftWidth - node.width / 2)\n            node.setPos({ x, y: this.pos.y + this.height + this.spacingY })\n            xPos += node.totalWidth + this.spacingX\n            node.alignChildren()\n        }\n\n        const { subnodes } = this\n        if (subnodes.length) {\n\n            xPos = this.pos.x + this.width + this.spacingX\n            subnodes.forEach(subNode => {\n                subNode.update({ isSub: true, port: { out: 1 }, ...subnodeStyle })\n                subNode.setPos({ x: xPos, y: this.pos.y + (this.height / 2 - subNode.height / 2) })\n                delete this.state.ports[`${subNode.id}_out_2`]\n                xPos += subNode.width + this.spacingX\n            })\n        }\n    }\n\n    get leftWidth(): number {\n        const { out1, childrenTotalWidth } = this\n        const selfLeftWidth = this.width / 2\n        if (!out1.length) {\n            return selfLeftWidth\n        }\n\n        const leftChildWidth = out1[0].leftWidth\n        const rightChildWidth = out1[out1.length - 1].rightWidth\n\n        let childrenRightWidth = leftChildWidth + (childrenTotalWidth - leftChildWidth - rightChildWidth) / 2\n        return Math.max(childrenRightWidth, selfLeftWidth)\n    }\n\n    get rightWidth(): number {\n        const { out1, childrenTotalWidth } = this\n        const selfRightWidth = this.width / 2 + this.subnodesWidth\n        if (!out1.length) {\n            return selfRightWidth\n        }\n\n        const leftChildWidth = out1[0].leftWidth\n        const rightChildWidth = out1[out1.length - 1].rightWidth\n\n        let childrenRightWidth = rightChildWidth + (childrenTotalWidth - leftChildWidth - rightChildWidth) / 2\n        return Math.max(childrenRightWidth, selfRightWidth)\n    }\n\n    children(portId: number) {\n        return Object.keys(this.state.connections)\n            .filter(key => key.split('_')[0] === this.id.toString() && key.split('_')[1] === portId.toString())\n            .map(conn => this.flow.getNode(Number((conn.split('_')[2]))))\n    }\n\n    get out1() {\n        return this.children(1)\n    }\n\n    get firstSubnode(): Node | undefined {\n        return this.children(2)[0]\n    }\n\n    get subnodes(): Node[] {\n        return this.firstSubnode?.flowLine?.flowLineNodes || []\n    }\n\n    get subnodesWidth(): number {\n        return this.subnodes.reduce((acc, subNode) => {\n            return acc + subNode.width + this.spacingX\n        }, 0)\n    }\n\n    get isSub(): boolean {\n        return this.complexParentNode !== null\n    }\n\n    get complexParentNode(): Node | null {\n        // if is sub eturn complexNode to which belongs this subnode\n        let parent = this.parent\n        if (parent) {\n            if (parent.firstSubnode === this) return parent\n            return parent.complexParentNode\n        }\n        return null\n    }\n\n    /**\n     * If not flow line, - returns null\n     */\n    get flowLine(): null | { flowLineNodes: Node[], hasSubnodes: Node | undefined } {\n        const flowLineNodes: Node[] = [this];\n        let node: Node = this;\n        let hasSubnodes = node.firstSubnode;\n\n        while (node.out1.length === 1) {\n            hasSubnodes = hasSubnodes || node.firstSubnode;\n            node = node.out1[0]\n            flowLineNodes.push(node);\n        }\n\n        return (node.out1.length > 1) ? null : { flowLineNodes, hasSubnodes };\n    }\n\n    get height() {\n        return this.state.drawflow[this.id].height\n    }\n    get width() {\n        return this.state.drawflow[this.id].width\n    }\n\n    get pos() {\n        return this.state.drawflow[this.id].pos\n    }\n\n    setPos(newPos: pos) {\n        const { pos } = this;\n        const { x, y } = newPos;\n        this.flow.moveNode({ nodeId: this.id, dx: x - pos.x, dy: y - pos.y })\n    }\n\n    update(data: updateNode) {\n        const newData = lodash.merge(this.nodeState, data)\n        Object.assign(this.nodeState, newData)\n    }\n}","import { addConnectionType, moveNodeType, stateData } from \"../types\";\nimport Node from './Node'\n\n\nexport class Flow {\n    // readonly because we are using only immer.js with redux-toolkit\n    public readonly state: stateData\n    public readonly nodes: { [id: number]: Node } = {}\n    public readonly distanceToConnect = 100\n    public readonly distanceToDisconnect = 0\n\n    constructor(state: stateData) {\n        this.state = state\n        const { drawflow } = this.state\n        Object.keys(drawflow).map((id) => this.nodes[Number(id)] = new Node(Number(id), this))\n    }\n\n    get heads() {\n        return Object.entries(this.nodes).filter(([id, node]) => !node.parent).map(el => el[1])\n    }\n\n    getNode(id: number) {\n        return this.nodes[id]\n    }\n\n    alignAll() {\n        this.setLaneNumbers()\n        this.heads.forEach(node => {\n            // node.calculateFullWidth()\n            node.alignChildren()\n        })\n    }\n\n    addConnection(conn: addConnectionType) {\n        const { startId, startPort, endId, endPort } = conn\n        if (!this.connectionAllowed(conn)) return\n        const key = `${startId}_${startPort}_${endId}_${endPort}`;\n        this.state.connections[key] = []\n    }\n\n    connectionAllowed({ startId, startPort, endId, endPort }: addConnectionType): boolean {\n        if ((startPort === 2 && this.getNode(startId).children(startPort).length)\n            || this.getNode(endId).parent)\n            return false\n        const nodeIn = this.getNode(endId)\n        // const nodeOut = this.getNode(startId)\n\n        const flowLine = nodeIn.flowLine\n\n        const connectAsSub = startPort === 2\n\n        if (connectAsSub) {\n            if (!flowLine || flowLine.hasSubnodes) { return false }\n        }\n        if (this.getNode(startId).out1.length && this.getNode(startId).isSub) {\n            return false\n        }\n\n        return true\n    }\n\n    moveNode({ dx, dy, nodeId }: moveNodeType) {\n        this.state.drawflow[nodeId].pos.x += dx\n        this.state.drawflow[nodeId].pos.y += dy\n    }\n\n    dragNode({ dx, dy, nodeId }: moveNodeType) {\n        this.moveNode({ dx, dy, nodeId })\n\n        /**\n         * Attachment\n         * \n         * traverse all other nodes except this one,\n         * check if their ports are free for new conn, check distance\n         */\n\n        const currentNode = this.getNode(nodeId)\n        const currentNodeHead = currentNode.head\n        if (currentNode.parentConnection) {\n            // remove connection\n            delete this.state.connections[currentNode.parentConnection]\n            this.alignAll()\n        }\n        const nodeInPortPos = currentNode.portInPos\n        if (!nodeInPortPos) return\n        const portDistances: Array<{ key: string, distance: number }> = []\n        Object.entries(this.nodes)\n            .filter(([_, node]) => node.head !== currentNodeHead)\n            .forEach(([id, node]) => {\n                if (Number(id) === nodeId) return\n                node.outPorts.forEach(([key, pos]) => {\n                    const distance = Math.hypot(nodeInPortPos.x - pos.x, nodeInPortPos.y - pos.y)\n                    portDistances.push({ key, distance })\n                })\n            });\n        portDistances.sort((a, b) => (a.distance - b.distance))\n\n        if (portDistances.length) {\n            const nearestPort = portDistances[0]\n            if (nearestPort.distance < this.distanceToConnect) {\n                this.state.portToConnect = nearestPort.key\n            } else {\n                this.state.portToConnect = undefined\n            }\n        }\n    }\n\n    setLaneNumbers() {\n        let laneNodes = this.heads\n        laneNodes.forEach(node => node.update({ head: node.id, lane: 0 }))\n\n        while (laneNodes.length) {\n            const nextLaneNodes: Array<Node> = [];\n            laneNodes.forEach(node => {\n                let lane = node.lane as number + 1\n                const { subnodes, head } = node\n                if (head === undefined) { console.error('head is undefined in setLaneNumbers'); return }\n                if (subnodes.length) {\n                    for (const sub of subnodes) {\n                        sub.update({ lane: lane++, head })\n                    }\n                }\n                const nextNodes = node.children(1)\n                nextNodes.forEach(nextNode => nextNode.update({ head, lane }))\n                nextLaneNodes.push(...nextNodes)\n            })\n            laneNodes = nextLaneNodes;\n        }\n\n        this.heads.forEach(node => {\n            const { head } = node\n            for (let laneNumber = 0, positionNumber = 0, nextLaneNodes: Array<Node> = [node]; nextLaneNodes.length; ++laneNumber) {\n\n                nextLaneNodes = Object.values(this.nodes).filter(nextNode => nextNode.lane === laneNumber && nextNode.head === head)\n\n                nextLaneNodes.forEach(nextNode => {\n                    nextNode.update({ positionNumber: positionNumber++ })\n                })\n            }\n        })\n\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { dataNode, ports, Slices, stateData, clientPos, addConnectionType, loadType, moveNodeType } from '../types'\nimport { Flow } from './Flow'\nimport type { RootState } from './store'\n\nexport const initialState: stateData = {\n  nodeId: 1,\n  canvasDrag: false,\n  config: {\n    drag: false,\n    connectionsLabelEnable: false,\n    canvasTranslate: {\n      x: 0,\n      y: 0,\n    },\n    zoom: {\n      value: 1,\n      max: 2,\n      min: 0.5,\n      tick: 0.1,\n    },\n  },\n  drawflow: {},\n  connections: {},\n  connectionsLabel: {},\n  ports: {},\n  select: null,\n  selectId: null,\n  selectPath: null,\n  showButton: null,\n  newPathDirection: null,\n  modalType: null,\n  editLock: false,\n  mouseBlockDragPos: { clientX: undefined, clientY: undefined },\n}\n\nexport const addNode = (state: stateData, payload: dataNode) => {\n  state.drawflow[state.nodeId] = { ...payload, id: state.nodeId, height: 0, width: 0 }\n  state.selectId = state.nodeId++\n  state.select = { type: 'node', selectId: state.selectId }\n  state.config.drag = true\n}\n\n// load version from server\n\nconst load = (state: stateData, { payload }: PayloadAction<loadType>) => {\n  Object.assign(state, initialState)\n  state.drawflow = payload.drawflow\n  state.nodeId = Object.keys(payload.drawflow).length + 1\n  state.connections = payload.connections\n  return state\n}\n\nconst align = (state: stateData) => {\n  const flow = new Flow(state)\n  // const { isSub, id } = flow.getNode(1)\n  // console.log(flow.getNode(1).calculateFullWidth())\n  // flow.setLaneNumbers()\n  flow.alignAll()\n}\n\n\nconst slice = createSlice({\n  name: Slices.Drawflow,\n  initialState,\n  reducers: {\n    setEditLock: (state, { payload }: PayloadAction<boolean>) => {\n      state.editLock = payload\n    },\n    align,\n    addNode: (state: stateData, { payload }: PayloadAction<dataNode>) => addNode(state, payload),\n    moveNode: (state, action: PayloadAction<moveNodeType>) => (new Flow(state)).dragNode(action.payload),\n    setMouseBlockDragPos: (state: stateData, { payload }: PayloadAction<clientPos>) => {\n      state.mouseBlockDragPos = payload\n    },\n    unSelect: (state) => {\n      state.config.drag = false\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    select: (state, { payload }: PayloadAction<{ type: 'node' | 'path' | 'input' | 'output', portId?: number, selectId?: string | number }>) => {\n      const { type, selectId } = payload;\n      state.config.drag = type === 'node'\n      state.select = payload\n      state.selectId = selectId ?? null;\n    },\n    moveCanvas: (state, { payload: { movementX, movementY } }: PayloadAction<{ movementX: number, movementY: number }>) => {\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n      }\n    },\n    canvasDrag: (state, { payload }: PayloadAction<boolean>) => {\n      state.canvasDrag = payload\n    },\n    canvasMouseMove: (state, { payload: { movementX, movementY, clientX, clientY } }: PayloadAction<{ clientX: number, clientY: number, movementX: number, movementY: number }>) => {\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n        // console.log('Drag canvas')\n      } else if (state.select?.type === 'output') {\n        state.newPathDirection = { clientX, clientY }\n        // console.log('New path')\n      } else if (state.config.drag && typeof state.selectId === 'number') {\n        // move node\n        // console.log('Move node')\n        const nodeId = state.selectId\n        const { clientX: prevX, clientY: prevY } = state.mouseBlockDragPos as clientPos\n        state.mouseBlockDragPos = { clientX, clientY }\n        const coef = (state.config.zoom.value)\n        const dx = (clientX - prevX) / coef\n        const dy = (clientY - prevY) / coef;\n        (new Flow(state)).dragNode({ nodeId, dy, dx })\n      }\n    },\n    canvasMouseUp: (state) => {\n      const flow = new Flow(state)\n      if (state.portToConnect) {\n        const [startId, , startPort] = state.portToConnect.split('_').map(v => Number(v))\n        // console.log([startId, startPort])\n        const endId = Number(state.selectId)\n        const endPort = 1\n        flow.addConnection({ startId, startPort, endId, endPort })\n      }\n      state.portToConnect = undefined\n      state.newPathDirection = null\n      state.canvasDrag = false\n      state.config.drag = false\n      if (state.select?.type === 'output') {\n        state.select = null\n      }\n      flow.alignAll()\n    },\n    deleteNode: (state) => {\n      const { connections, drawflow, ports, selectId } = state;\n      if (!selectId || (typeof selectId !== 'number')) return;\n\n      // 1. find in connections\n      Object.keys(connections).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId || arr[2] * 1 === selectId) {\n          delete connections[val];\n        }\n        return null;\n      }, null);\n      // 2. find in ports\n      Object.keys(ports).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId) {\n          delete ports[val];\n        }\n        return null;\n      }, null);\n      // 3. find in drawflow\n      delete drawflow[selectId];\n\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    deletePath: (state) => {\n      const { selectId, connections } = state\n      if (typeof selectId === 'string')\n        delete connections[selectId];\n    },\n    load,\n    addConnection: (state, action: PayloadAction<addConnectionType>) => {\n      const flow = new Flow(state)\n      flow.addConnection(action.payload)\n    },\n    clear: () => initialState,\n    pushPorts: (state: stateData, { payload }: PayloadAction<ports>) => {\n      state.ports = { ...state.ports, ...payload }\n    },\n    zoom: (state, { payload }: PayloadAction<boolean | null>) => {\n      const { zoom } = state.config;\n      const { value, max, min, tick } = zoom\n      const newValue = value + (payload ? tick : -tick)\n      if (newValue <= max && newValue >= min) {\n        zoom.value = newValue\n      }\n      if (payload === null) {\n        state.config.canvasTranslate = { x: 0, y: 0 }\n        zoom.value = 1\n      }\n    },\n    nodeSize: (state, { payload: { height, width, id } }: PayloadAction<{ id: number, height: number, width: number }>) => {\n      state.drawflow[id].height = height\n      state.drawflow[id].width = width\n      // align(state)\n    }\n  },\n})\n\nexport const actions = slice.actions\nexport const drawflowSlice = slice.reducer\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectActiveDrawflow = (state: RootState) => state.flows[state.version]\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import Circle from \"./Circle\"\nimport Path from \"./Path\"\n\nconst Connection = {\n    Circle,\n    Path\n}\n\nexport default Connection\n","import { MouseEvent } from \"react\";\n\nconst CircleComponent = (props: any) => {\n    const { property, svgKey, i, editLock } = props;\n\n    const onMouseDown = (e: MouseEvent) => {\n        if (editLock) return;\n        props.select(e, {\n            svgKey,\n            i,\n        });\n    }\n\n    return (\n        <circle\n            {...property}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"point\"\n            r={6}\n            onMouseDown={onMouseDown}\n        />\n    );\n}\n\nexport default CircleComponent;\n","import { actions, selectActiveDrawflow } from '../../redux/drawflowSlice'\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks'\n\ntype Props = {\n    svgKey?: string,\n    d: string,\n}\n\nconst Path = (props: Props) => {\n    const { svgKey, d } = props;\n    const state = useAppSelector(selectActiveDrawflow)\n    const { selectId } = state;\n    const dispatch = useAppDispatch()\n\n\n    const className = \"main-path \" + ((selectId === svgKey && svgKey) ? 'select' : '')\n\n    return <path\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className={className}\n        d={d}\n        onMouseDown={(e) => {\n            e.stopPropagation()\n            // if (editLock) return;\n            dispatch(actions.select({ type: 'path', selectId: svgKey }))\n        }}\n    ></path>\n\n}\n\nexport default Path;\n","// import { useState } from \"react\";\n// import { Grabme, More } from \"../svg\"\n\nexport const Round = (props: any) => {\n    // const [a] = useState(props)\n    return (\n        <div className=\"node-block\" >\n            {JSON.stringify(props, null, 2)}\n        </div>\n    )\n\n    // const { imgSrc, name, description } = props;\n    // return (\n    //     <div className=\"blockelem create-flowy\">\n    //         <div className=\"grabme\">\n    //             <Grabme />\n    //         </div>\n    //         <div className=\"blockin\">\n    //             <div className=\"blockico\">\n    //                 <span></span>\n    //                 <img src={imgSrc} alt={name + '\\n' + description} />\n    //             </div>\n    //             <div className=\"blocktext\">\n    //                 <p className=\"blocktitle\">{name}</p>\n    //                 <div className=\"side-elem-more\">\n    //                     <More />\n    //                 </div>\n    //                 <p className=\"blockdesc\">{description}</p>\n    //             </div>\n    //         </div>\n    //     </div>)\n}","import { useEffect, useRef, } from \"react\";\nimport { portType } from \"../types\";\n\nimport { actions, selectActiveDrawflow } from '../redux/drawflowSlice'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport { Round } from \"./NodeComponents\";\nimport { subnodeStyle } from \"../styles\";\n\n\nconst DrawflowNodeBlock = ({ id }: { id: number }) => {\n    // console.log(`Render node id: ${id}`)\n    const { portToConnect, nodeId, selectId, select, config: { drag }, drawflow: { [id]: node } } =\n        useAppSelector(selectActiveDrawflow)\n    const dispatch = useAppDispatch()\n    const { port, pos } = node;\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    const portComponent = (type: portType) => {\n        let arr = [];\n\n        for (let i = 1; i <= port[type]; i++) {\n            const key = `${type}put-${i}`;\n            const portKey = `${id}_${type}_${i}`\n            const port =\n                <div\n                    onMouseDown={(e) => {\n                        e.stopPropagation()\n                        dispatch(actions.select({\n                            type: (type + 'put') as ('input' | 'output'),\n                            portId: i,\n                            selectId: id\n                        }))\n                    }}\n                    key={key}\n                    className={`${type}put ${key} ${portKey}`}\n                    onMouseUp={e => {\n                        if (type !== \"in\" || typeof selectId !== \"number\" || !select?.portId) return\n                        const endId = id\n                        const endPort = i\n                        const startId = selectId\n                        const startPort = select.portId\n                        // if connect to same node\n                        if (startId === endId) return\n                        dispatch(actions.addConnection({ startId, startPort, endId, endPort }))\n                    }}\n                >\n                    <div className={`indicator ${(portToConnect === portKey && ' ') || 'invisible'}`}></div>\n                </div>\n            arr.push(port);\n        }\n\n        return (\n            <div className={`${type}puts`}>\n                {arr}\n            </div>\n        );\n    }\n\n    \n\n    useEffect(() => {\n        if (ref.current) {\n            const { offsetHeight, offsetWidth } = ref.current\n            dispatch(actions.nodeSize({ height: offsetHeight, width: offsetWidth, id }))\n        }\n    })\n\n    useEffect(() => {\n        const getPortPos = (type: portType, i: number, elmt: Element) => {\n            const key = `${id}_${type}_${i}`;\n            const x = parseInt(getComputedStyle(elmt).left) + node.pos.x\n            const y = parseInt(getComputedStyle(elmt).top) + node.pos.y\n\n            return {\n                [key]: { x, y }\n            }\n        }\n\n        if (ref.current) {\n            const inputs = Array.from((ref.current.querySelector(\".inputs\") as HTMLDivElement).children);\n            const outputs = Array.from((ref.current.querySelector(\".outputs\") as HTMLDivElement).children);\n            let newPorts = {};\n            newPorts = Object.assign(newPorts, inputs.reduce((acc, elmt, i) => {\n                return Object.assign(acc, getPortPos(portType.in, i + 1, elmt));\n            }, {}));\n            newPorts = Object.assign(newPorts, outputs.reduce((acc, elmt, i) => {\n                return Object.assign(acc, getPortPos(portType.out, i + 1, elmt));\n            }, {}));\n            dispatch(actions.pushPorts(newPorts))\n        }\n\n\n    }, [dispatch, id, node.pos.x, node.pos.y]);\n\n    useEffect(() => {\n        // when add new node shift it to left and up\n        if (ref.current && nodeId - 1 === id && drag) {\n            const { offsetHeight, offsetWidth } = ref.current\n            dispatch(actions.moveNode({ nodeId: id, dx: -offsetWidth * 0.2, dy: -offsetHeight * 0.2 }))\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    let style = {\n        top: pos.y + \"px\",\n        left: pos.x + \"px\",\n        cursor: \"move\",\n    }\n    if (node.isSub) {\n        style = { ...style, ...subnodeStyle }\n    }\n\n    return (\n        <div\n            ref={ref}\n            className={`node-${id} drawflow-node-block-default`\n                + (selectId === id ? ' select' : '')\n                + (node.isSub ? ' subnode' : '')}\n            style={style}\n            onMouseDown={e => {\n                e.stopPropagation()\n                const { clientX, clientY } = e\n                dispatch(actions.select({ type: 'node', selectId: id }))\n                dispatch(actions.setMouseBlockDragPos({ clientX, clientY }))\n            }}\n            onContextMenu={e => {\n                // TODO show delete button\n            }}\n            onDoubleClick={() => {\n                // show node settings\n            }}\n        >\n            {portComponent(portType.in)}\n            <div\n                className=\"drawflow-node-content\"\n            >\n                <Round {...node} />\n            </div>\n            {portComponent(portType.out)}\n            {/* <button\n            style={{\n                display: showButton === id ? \"block\" : \"none\"\n            }}\n            className=\"drawflow-delete\"\n            onMouseDown={(e) => { e.stopPropagation(); event.deleteNode() }}\n        >X</button> */}\n        </div>)\n\n\n}\n\nexport default DrawflowNodeBlock;\n","const makeRandomNames = (length: number, searchWord: string, max = 15, min = 5) => {\n    const result = [];\n    const map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let j = 0; j < length; j++) {\n        let word = \"\";\n        for (let i = 0; i < Math.floor(Math.random() * (max - min) + min); i++) {\n            word += map.charAt(Math.floor(Math.random() * map.length));\n        }\n        if (searchWord.length > 1) {\n            word += searchWord;\n        }\n        result.push(word);\n    }\n    return result;\n}\n\nconst getGroups = async (number: number) => {\n    const rnd = () => ({\n        type: 'Asd',\n        name: 'assa',\n        value: makeRandomNames(1, \"\", 10, 5)[0],\n    })\n    const rez = []\n    for (let i = 0; i < number; ++i) {\n        rez.push(rnd())\n    }\n    return rez;\n}\n\nexport default getGroups","import { node, NODE_TYPE } from \"../types\";\nimport getFilters from \"./fields.mock\";\nimport { data } from \"../types\"\n\nexport const testNode = (): node => {\n    return {\n        id: 0,\n        \"type\": NODE_TYPE.MIDDLE,\n        \"data\": {\n            \"type\": \"String\",\n            \"name\": \"1qdlCNXqYBsE\",\n            \"value\": \"qqweee\"\n        },\n        \"port\": {\n            \"in\": 1,\n            \"out\": 2\n        },\n        \"pos\": {\n            \"x\": -20,\n            \"y\": 100\n        },\n        \"isSub\": false,\n        height: 0,\n        width: 0\n    }\n}\n\nconst getDummy = async (): Promise<data> => {\n  const data: any = {\n    \"nodes\": {\n    },\n    \"connections\": {\n      \"1_1_3_1\": [],\n      \"4_1_2_1\": []\n    },\n  }\n\n  for (let i = 1; i < 5; ++i) {\n    const node = testNode()\n    node.id = i\n    node.data.name = `Node ${i}`\n    node.pos.x = 100 * i\n    node.pos.y = 50 * i\n    data.nodes[i] = node\n  }\n\n\n  return data\n}\n\n\nconst mock = {\n    getDummy,\n    getFilters,\n}\n\nexport default mock\n","import { configureStore, createAction, createAsyncThunk, createReducer, PayloadAction } from '@reduxjs/toolkit'\nimport { clientPos, flowType, Slices } from '../types'\nimport { addNode, drawflowSlice } from './drawflowSlice'\nimport mock, { testNode } from '../Mock'\nimport { initialState as drawflowInitialState } from './drawflowSlice'\nimport handler from '../components/drawflowHandler'\n\nexport const changeVersion = createAction<number>('versions/changed')\nexport const addNewNode = createAction<clientPos>('addNewNode')\nexport const dragTemplate = createAction<number>('dragTemplate')\n\nconst initialState: flowType = {\n  version: 0,\n  flows: [drawflowInitialState, drawflowInitialState, drawflowInitialState],\n  templates: [],\n  dragTemplate: 0\n}\n\nexport const fetchNodeTemplates = createAsyncThunk('fetchPosts', async () => {\n  return await mock.getFilters(5)\n})\n\nexport const fetchFlowVersion = createAsyncThunk('fetchFlowVersion', async () => {\n  return await mock.getDummy()\n})\n\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(changeVersion, (state, { payload }) => {\n      state.version = payload\n    })\n    .addCase(addNewNode, (appState: flowType, { payload: { clientX, clientY } }: PayloadAction<clientPos>) => {\n      if (!appState.dragTemplate) return;\n\n      const state = appState.flows[appState.version]\n      const node = testNode()\n      node.pos = handler.getPos(clientX, clientY, state.config.zoom.value)\n      state.mouseBlockDragPos = { clientX, clientY };\n      addNode(state, node)\n      appState.dragTemplate = undefined\n    })\n    .addCase(dragTemplate, (appState, {payload}) => {\n      appState.dragTemplate = payload\n    })\n    .addCase(fetchNodeTemplates.fulfilled, (state, action) => {\n      state.templates = action.payload\n    })\n    .addCase(fetchFlowVersion.fulfilled, (state, action) => {\n      const { nodes: drawflow, connections } = action.payload;\n      state.flows[state.version] = drawflowSlice(\n        state.flows[state.version],\n        {\n          type: Slices.Drawflow + '/load',\n          payload: { drawflow, connections }\n        })\n    })\n\n    // reducer for drawflow\n    .addMatcher(\n      (action) => action.type.startsWith(Slices.Drawflow),\n      (state, action) => {\n        state.flows[state.version] = drawflowSlice(state.flows[state.version], action)\n      }\n    )\n\n\n})\n\nexport const store = configureStore({\n  reducer\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\n// store.subscribe(() => console.log(store.getState()))","import { actions, selectActiveDrawflow } from \"../../redux/drawflowSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\n\nconst DrawflowAdditionalArea = () => {\n    const editLock = useAppSelector(s => selectActiveDrawflow(s).editLock)\n    const dispatch = useAppDispatch()\n\n    return (\n        <div className=\"drawflow-additional\">\n            {!editLock &&\n                <>\n                    <button className=\"drawflow-additional-button\" onClick={() => console.log('clear')}>Clear</button>\n                </>\n            }\n            <button className=\"drawflow-additional-button\" onClick={() => dispatch(actions.setEditLock(!editLock))}>{editLock ? \"UnLock\" : \"Lock\"}</button>\n        </div>\n    );\n}\n\nexport default DrawflowAdditionalArea;\n","import { actions } from \"../../redux/drawflowSlice\";\nimport { useAppDispatch } from \"../../redux/hooks\";\n\nconst DrawflowZoomArea = () => {\n    const dispatch = useAppDispatch()\n\n    return (\n        <div className=\"drawflow-zoom\">\n            <button className=\"drawflow-zoom-button\" onClick={() => dispatch(actions.zoom(true))}>+</button>\n            <button className=\"drawflow-zoom-button\" onClick={() => dispatch(actions.zoom(false))}>-</button>\n            <button className=\"drawflow-zoom-button\" onClick={() => dispatch(actions.zoom(null))}>reset</button>\n        </div>\n    )\n}\n\nexport default DrawflowZoomArea;\n","import handler from \"./drawflowHandler\"\nimport { actions, selectActiveDrawflow } from '../redux/drawflowSlice'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport Connection from \"./Connection\";\nimport DrawflowNodeBlock from \"./DrawflowNodeBlock\";\nimport { useEffect } from \"react\";\nimport { addNewNode, fetchFlowVersion } from \"../redux/store\";\nimport DrawflowAdditionalArea from \"./ButtonArea/DrawflowAdditionalArea\";\nimport DrawflowZoomArea from \"./ButtonArea/DrawflowZoomArea\";\nimport { createSelector, createDraftSafeSelector } from \"@reduxjs/toolkit\";\n\nexport const NewPath = () => {\n    const state = useAppSelector(selectActiveDrawflow)\n\n    const { select, config, ports, selectId, newPathDirection } = state;\n    if (!select?.portId) { console.error(`Select port id not set!`); return null }\n    const startKey = `${selectId}_out_${select.portId}`;\n\n    if (!ports[startKey]) { console.error(`Start port key not exist`); return null }\n    if (!newPathDirection) { console.error(`Path direction null`); return null }\n\n    const start = {\n        x: ports[startKey].x,\n        y: ports[startKey].y,\n    }\n    const zoom = config.zoom.value;\n    const { clientX, clientY } = newPathDirection;\n    const end = handler.getPos(clientX, clientY, zoom);\n    const d = handler.createCurvature(start, end);\n\n    return <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"drawflow-connection\"\n    >\n        <Connection.Path\n            d={d}\n        />\n    </svg>\n\n}\n\nexport const ConnectionList = () => {\n    const { connections, ports } = useAppSelector(selectActiveDrawflow)\n\n    const conns = Object.entries(connections).map(([key]) => {\n        // key: fromId_portNum_toId_portNum\n        const arr = key.split(\"_\");\n        const startKey = `${arr[0]}_out_${arr[1]}`;\n        const endKey = `${arr[2]}_in_${arr[3]}`;\n\n        if (!ports[startKey] || !ports[endKey]) {\n            // console.error(`No such connection`, key);\n            return null\n        };\n\n        const start = {\n            x: ports[startKey].x,\n            y: ports[startKey].y,\n        }\n        const end = {\n            x: ports[endKey].x,\n            y: ports[endKey].y,\n        }\n        const d = handler.createCurvature(start, end)\n        return (\n            <div key={key}>\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"drawflow-connection\"\n                >\n                    <Connection.Path\n                        svgKey={key}\n                        d={d}\n                    />\n                </svg>\n            </div>\n        )\n\n    })\n    return <>{conns}</>\n}\n\nconst selectDrawflow = createDraftSafeSelector(selectActiveDrawflow, (s) => s.drawflow)\n\nexport const NodeList = () => {\n    const drawflow = useAppSelector(selectDrawflow)\n    // console.log(`Render NodeList`)\n\n    return <>{Object.values(drawflow).map((node) => {\n        return <DrawflowNodeBlock\n            key={node.id}\n            id={node.id}\n        />\n    }\n    )}</>\n}\n\n\nexport const Drawflow = () => {\n    const { select, config: { canvasTranslate: { x, y }, zoom }, newPathDirection }\n        = useAppSelector(selectActiveDrawflow)\n    // console.log(`Render Drawflow`)\n\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        dispatch(fetchFlowVersion())\n    }, [dispatch])\n\n    useEffect(() => {\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === \"Delete\") {\n                if (select?.type === \"path\") {\n                    dispatch(actions.deletePath())\n                }\n                else {\n                    dispatch(actions.deleteNode())\n                }\n            }\n        }\n        document.addEventListener(\"keydown\", handleKeyDown);\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyDown);\n        }\n    }, [dispatch, select?.type])\n\n\n    return (\n        <div\n            id=\"drawflow\"\n            className=\"parent-drawflow\"\n            onMouseDown={(e) => {\n                if (!e.currentTarget.classList.contains(\"parent-drawflow\")) return;\n                dispatch(actions.canvasDrag(true))\n                dispatch(actions.unSelect())\n            }}\n            onMouseUp={() => dispatch(actions.canvasMouseUp())}\n            onMouseMove={(e) => {\n                const { clientX, clientY, movementX, movementY } = e\n                dispatch(actions.canvasMouseMove({ clientX, clientY, movementX, movementY }))\n            }}\n            onMouseEnter={(e) => {\n                const { clientX, clientY } = e\n                dispatch(addNewNode({ clientX, clientY }))\n            }}\n        >\n            <DrawflowAdditionalArea />\n            <DrawflowZoomArea />\n            <div\n                className=\"drawflow\"\n                style={{\n                    transform: `translate(${x}px, ${y}px) scale(${zoom.value})`\n                }}\n            >\n                <NodeList />\n                <ConnectionList />\n                {newPathDirection && <NewPath />}\n            </div>\n        </div>\n    )\n}","import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../redux/hooks';\nimport { dragTemplate, fetchNodeTemplates } from '../redux/store';\n\ntype Props = {\n    searchWord: string\n}\n\nconst FilterList = (props: Props) => {\n    const { searchWord } = props;\n    const list = useAppSelector(s => s.templates)\n    const dispatch = useAppDispatch()\n    const searchArr = searchWord.toLowerCase().split(\" \").filter(item => item.length > 0);\n\n\n    useEffect(() => {\n        dispatch(fetchNodeTemplates())\n    }, [dispatch])\n\n    return (\n        <div\n            className=\"drawflow-node-list-wrap\"\n        >\n            {list.map((item, idx) => {\n                const { name, type, value } = item\n                const label = JSON.stringify(item, null, 2)\n\n                return (\n                    (searchArr.find(word => label.toLowerCase().includes(word)) || !searchArr.length) &&\n                    <div\n                        key={\"drawflow-sidemenu-block-\" + idx}\n                        className=\"drawflow-node-block\"\n                        onMouseDownCapture={(e) => {\n                            dispatch(dragTemplate(1))\n                        }}\n                    >\n                        <pre>{`Type: ${type}\\nValue: ${value + name}`}</pre>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default FilterList;\n","import { useEffect, useState } from 'react';\nimport { Drawflow } from './components/DrawflowHook';\nimport FilterList from \"./components/FilterList\";\nimport { useAppDispatch } from './redux/hooks';\nimport { changeVersion, fetchFlowVersion } from './redux/store';\n\nimport './drawflow.scss'\nimport { actions } from './redux/drawflowSlice';\n\nfunction App() {\n\n  const [searchWord, setSearchWord] = useState(\"\");\n  const dispatch = useAppDispatch()\n  // console.log('Render App')\n  useEffect(() => {\n    dispatch(actions.align())\n  }, [dispatch])\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"drawflow-node-list\">\n        <div className=\"drawflow-node-list-search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search templates\"\n            onChange={e => { setSearchWord(e.target.value) }}\n          />\n        </div>\n        <div className=\"drawflow-node-list-flex\">\n          <FilterList\n            searchWord={searchWord}\n          />\n        </div>\n      </div>\n      <div className=\"flow\">\n        <div>\n          <button onClick={() => dispatch(fetchFlowVersion())}>Fetch flow version</button>\n\n          <button onClick={() => dispatch(changeVersion(0))}>Version 1</button>\n          <button onClick={() => dispatch(changeVersion(1))}>Version 2</button>\n          <button onClick={() => dispatch(changeVersion(2))}>Version 3</button>\n          <button onClick={() => dispatch(actions.align())}>Align</button>\n        </div>\n        <Drawflow />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}