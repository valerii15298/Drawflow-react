{"version":3,"sources":["types.ts","components/drawflowHandler.ts","redux/Node.ts","redux/drawflowSlice.ts","redux/hooks.ts","components/Connection/index.ts","components/Connection/Circle.tsx","components/Connection/Path.tsx","svg.tsx","components/NodeComponents/index.tsx","components/DrawflowNodeBlock.tsx","Mock/fields.mock.ts","Mock/index.ts","Mock/dummy.mock.ts","redux/store.ts","components/ButtonArea/DrawflowAdditionalArea.tsx","components/ButtonArea/DrawflowZoomArea.tsx","components/DrawflowHook.tsx","components/FilterList.tsx","App.tsx","index.tsx"],"names":["NODE_TYPE","Slices","MODAL_TYPE","CURV","getCanvasInfo","canvas","document","querySelector","canvasRect","getBoundingClientRect","x","y","width","clientWidth","height","clientHeight","handler","createCurvature","start","end","type","hx1","hx2","Math","abs","curv","getPos","clientX","clientY","zoom","findIndexByElement","elmt","parentElement","arr","Array","from","childNodes","i","length","getPortPosWithZoom","size","pos","widthZoom","heightZoom","Flow","state","nodes","distanceToConnect","distanceToDisconnect","this","drawflow","Object","keys","map","id","Number","Node","console","log","current","startId","startPort","endId","endPort","getNode","clildren","parent","key","connections","undefined","dx","dy","nodeId","portKeys","ports","filter","split","getPortListByNodeId","reduce","acc","portKey","currentNode","parentConnection","nodeInPortPos","portInPos","portDistances","entries","forEach","node","outPorts","distance","hypot","push","sort","a","b","nearestPort","portToConnect","flow","nodeState","port","find","startsWith","parentId","toString","portId","conn","flowLine","flowLineNodes","firstSubnode","isSub","hasSubnodes","out1","newPos","moveNode","initialState","canvasDrag","config","drag","connectionsLabelEnable","canvasTranslate","value","max","min","tick","connectionsLabel","select","selectId","selectPath","showButton","newPathDirection","modalType","editLock","mouseBlockDragPos","addNode","payload","slice","createSlice","name","Drawflow","reducers","setEditLock","align","action","setMouseBlockDragPos","unSelect","moveCanvas","movementX","movementY","canvasMouseMove","prevX","prevY","coef","canvasMouseUp","v","addConnection","deleteNode","_","val","parseInt","deletePath","load","assign","clear","pushPorts","newValue","nodeSize","actions","drawflowSlice","reducer","selectActiveDrawflow","flows","version","useAppDispatch","useDispatch","useAppSelector","useSelector","Connection","Circle","props","property","svgKey","xmlns","className","r","onMouseDown","e","Path","d","dispatch","stopPropagation","Grabme","viewBox","fill","cx","cy","More","NodeComponent","Common","useState","s","JSON","stringify","Round","imgSrc","description","src","alt","DrawflowNodeBlock","inputs","outputs","refs","setRefs","ref","useRef","portComponent","onMouseUp","useEffect","children","offsetHeight","offsetWidth","getPortPos","rect","in","out","newPorts","style","top","left","cursor","onContextMenu","onDoubleClick","makeRandomNames","searchWord","result","j","word","floor","random","charAt","mock","getDummy","MIDDLE","getFilters","number","rnd","rez","changeVersion","createAction","addNewNode","dragTemplate","drawflowInitialState","templates","fetchNodeTemplates","createAsyncThunk","fetchFlowVersion","createReducer","builder","addCase","appState","fulfilled","addMatcher","store","configureStore","DrawflowAdditionalArea","onClick","DrawflowZoomArea","NewPath","error","startKey","ConnectionList","conns","endKey","NodeList","values","handleKeyDown","addEventListener","removeEventListener","currentTarget","classList","contains","onMouseMove","onMouseEnter","transform","FilterList","list","searchArr","toLowerCase","item","idx","label","includes","onMouseDownCapture","App","setSearchWord","placeholder","onChange","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"uIAAYA,EAMAC,E,iDANAD,K,cAAAA,E,gBAAAA,E,WAAAA,M,cAMAC,K,qBAAAA,M,KAIL,IAEKC,EAFCC,EAAO,I,SAERD,K,8BAAAA,E,iCAAAA,M,KCRL,IAiDDE,EAAgB,WAEpB,IAAMC,EAAUC,SAASC,cAAc,aAA6BA,cAAc,aAC5EC,EAAaH,EAAOI,wBAC1B,MAAO,CACLC,EAAGF,EAAWE,EACdC,EAAGH,EAAWG,EACdC,MAAOP,EAAOQ,YACdC,OAAQT,EAAOU,eAkCbC,EAAU,CACdC,gBAvFsB,SAACC,EAAYC,EAAUC,GAC7C,IAAIC,EAAM,KACNC,EAAM,KAGV,OAAQF,GACN,IAAK,OAQH,OAPIF,EAAMR,GAAKS,EAAIT,GACjBW,EAAMH,EAAMR,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,EAC5CH,EAAMH,EAAIT,IAAI,GAAAa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,KAErCW,EAAMH,EAAMR,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,EAC5CH,EAAMH,EAAIT,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,GAErC,MAAQP,EAAMR,EAAI,IAAMQ,EAAMP,EAAI,MAAQU,EAAM,IAAMH,EAAMP,EAAI,IAAMW,EAAM,IAAMH,EAAIR,EAAI,IAAMQ,EAAIT,EAAI,KAAOS,EAAIR,EAE5H,IAAK,QAQH,OAPIO,EAAMR,GAAKS,EAAIT,GACjBW,EAAMH,EAAMR,GAAI,GAAAa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GACvCY,EAAMH,EAAIT,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,IAE1CJ,EAAMH,EAAMR,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,EAC5CH,EAAMH,EAAIT,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,GAErC,MAAQP,EAAMR,EAAI,IAAMQ,EAAMP,EAAI,MAAQU,EAAM,IAAMH,EAAMP,EAAI,IAAMW,EAAM,IAAMH,EAAIR,EAAI,IAAMQ,EAAIT,EAAI,KAAOS,EAAIR,EAE5H,IAAK,QAQH,OAPIO,EAAMR,GAAKS,EAAIT,GACjBW,EAAMH,EAAMR,GAAI,GAAAa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GACvCY,EAAMH,EAAIT,IAAI,GAAAa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,KAErCW,EAAMH,EAAMR,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,EAC5CH,EAAMH,EAAIT,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,GAErC,MAAQP,EAAMR,EAAI,IAAMQ,EAAMP,EAAI,MAAQU,EAAM,IAAMH,EAAMP,EAAI,IAAMW,EAAM,IAAMH,EAAIR,EAAI,IAAMQ,EAAIT,EAAI,KAAOS,EAAIR,EAE5H,QAIE,OAHAU,EAAMH,EAAMR,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,EAC5CH,EAAMH,EAAIT,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKe,EAEnC,MAAQP,EAAMR,EAAI,IAAMQ,EAAMP,EAAI,MAAQU,EAAM,IAAMH,EAAMP,EAAI,IAAMW,EAAM,IAAMH,EAAIR,EAAI,IAAMQ,EAAIT,EAAI,KAAOS,EAAIR,IAgD9HP,gBACAsB,OAjCa,SAACC,EAAiBC,EAAiBC,GAChD,MAAgCzB,IAAxBM,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGC,EAAd,EAAcA,MAAOE,EAArB,EAAqBA,OACrB,MAAO,CACLJ,EAAGiB,GAAWf,GAASA,EAAQiB,IAAUnB,GAAKE,GAASA,EAAQiB,IAC/DlB,EAAGiB,GAAWd,GAAUA,EAASe,IAAUlB,GAAKG,GAAUA,EAASe,MA8BrEC,mBA1ByB,SAACC,GAI1B,IAHA,IAAMC,EAAgBD,EAAKC,cACrBC,EAAMC,MAAMC,KAAKH,EAAcI,YAE5BC,EAAI,EAAGA,EAAIJ,EAAIK,OAAQD,IAC9B,GAAIJ,EAAII,KAAON,EAAM,OAAOM,EAE9B,OAAQ,GAoBRE,mBAfyB,SAACC,EAAsCC,EAAUZ,GAC1E,IAAMxB,EAASW,EAAQZ,gBACjBsC,EAAarC,EAAOO,OAASP,EAAOO,MAAQiB,IAAU,EACtDc,EAActC,EAAOS,QAAUT,EAAOS,OAASe,IAAU,EAI/D,MAAO,CAAEnB,EAHC8B,EAAK5B,MAAQ,GAAK6B,EAAI/B,EAAIL,EAAOK,GAAKgC,EAGpC/B,EAFF6B,EAAK1B,OAAS,GAAK2B,EAAI9B,EAAIN,EAAOM,GAAKgC,KAapC3B,I,qCCnGF4B,EAAb,WAOI,WAAYC,GAAmB,IAAD,gCALdA,WAKc,OAJdC,MAAgC,GAIlB,KAHdC,kBAAoB,IAGN,KAFdC,qBAAuB,EAGnCC,KAAKJ,MAAQA,EACb,IAAQK,EAAaD,KAAKJ,MAAlBK,SACRC,OAAOC,KAAKF,GAAUG,KAAI,SAACC,GAAD,OAAQ,EAAKR,MAAMS,OAAOD,IAAO,IAAIE,EAAKD,OAAOD,GAAK,MAVxF,uCAaI,WACI,MAAO,KAdf,qBAiBI,SAAQA,GACJ,OAAOL,KAAKH,MAAMQ,KAlB1B,sBAqBI,WACIG,QAAQC,IAAIC,YAAQV,KAAKJ,QACzBI,KAAKJ,MAAMK,SAAS,GAAGT,IAAI/B,EAAI,IAvBvC,2BA0BI,YAA0E,IAA1DkD,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,QAEvC,IAAId,KAAKe,QAAQJ,GAASK,SAASJ,GAAWvB,SAAUW,KAAKe,QAAQF,GAAOI,OAA5E,CAGA,IAAMC,EAAG,UAAMP,EAAN,YAAiBC,EAAjB,YAA8BC,EAA9B,YAAuCC,GACxCK,EAAgBnB,KAAKJ,MAArBuB,iBAGiBC,IAArBD,EAAYD,KAGhBC,EAAYD,GAAO,OAtC3B,sBAyCI,YAA4C,IAAjCG,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,GAAIC,EAAwB,EAAxBA,OAEP3B,EAAUI,KAAVJ,MACF4B,ED5CqB,SAACD,EAAgB3B,GAClD,IAAQ6B,EAAU7B,EAAV6B,MACR,OAAOvB,OAAOC,KAAKsB,GAAOC,QAAO,SAAAR,GAAG,OAAIA,EAAIS,MAAM,MAAM,KAAO,GAAKJ,KC0C7CK,CAAoBL,EAAQ3B,GAC7CA,EAAM6B,MAAQD,EAASK,QAAO,SAACC,EAAKC,GAKhC,OAJAD,EAAIC,GAAW,CACXtE,EAAGqE,EAAIC,GAAStE,EAAI4D,EACpB3D,EAAGoE,EAAIC,GAASrE,EAAI4D,GAEjBQ,IALG,eAMNlC,EAAM6B,QAGd7B,EAAMK,SAASsB,GAAQ/B,IAAI/B,GAAK4D,EAChCzB,EAAMK,SAASsB,GAAQ/B,IAAI9B,GAAK4D,EAShC,IAAMU,EAAchC,KAAKe,QAAQQ,GAC7BS,EAAYC,yBAELjC,KAAKJ,MAAMuB,YAAYa,EAAYC,kBAE9C,IAAMC,EAAgBF,EAAYG,UAClC,GAAKD,EAAL,CACA,IAAME,EAA0D,GAUhE,GATAlC,OAAOmC,QAAQrC,KAAKH,OAAOyC,SAAQ,YAAiB,IAAD,mBAAdjC,EAAc,KAAVkC,EAAU,KAC3CjC,OAAOD,KAAQkB,GAEnBgB,EAAKC,SAASF,SAAQ,YAAiB,IAAD,mBAAdpB,EAAc,KAAT1B,EAAS,KAC5BiD,EAAWnE,KAAKoE,MAAMR,EAAczE,EAAI+B,EAAI/B,EAAGyE,EAAcxE,EAAI8B,EAAI9B,GAC3E0E,EAAcO,KAAK,CAAEzB,MAAKuB,mBAGlCL,EAAcQ,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEJ,SAAWK,EAAEL,YACzCL,EAAc/C,OAAQ,CACtB,IAAM0D,EAAcX,EAAc,GAC9BW,EAAYN,SAAWzC,KAAKF,kBAE5BE,KAAKJ,MAAMoD,cAAgBD,EAAY7B,IAEvClB,KAAKJ,MAAMoD,mBAAgB5B,MAvF3C,4BA4FI,gBA5FJ,KAiGMb,E,WAMF,WAAYF,EAAY4C,GAAa,yBALrB5C,QAKoB,OAJnBT,WAImB,OAHpBqD,UAGoB,OAFpBC,eAEoB,EAChClD,KAAKK,GAAKA,EACVL,KAAKiD,KAAOA,EACZjD,KAAKJ,MAAQqD,EAAKrD,MAClBI,KAAKkD,UAAYlD,KAAKJ,MAAMK,SAASD,KAAKK,I,sCAG9C,WACI,OAAOL,KAAKkD,UAAUC,O,qBAG1B,WAAkC,IAAD,SAC7B,iBAAOjD,OAAOmC,QAAQrC,KAAKJ,MAAM6B,OAAO2B,MAAK,mCAAElC,EAAF,iBAAkBA,IAAG,UAAQ,EAAKb,GAAb,mBAAlE,aAAO,EAAqF,K,oBAGhG,WAAgB,IAAD,OACX,OAAOH,OAAOmC,QAAQrC,KAAKJ,MAAM6B,OAAOC,QAAO,mCAAER,EAAF,iBAAgBA,EAAImC,WAAJ,UAAkB,EAAKhD,GAAvB,c,kBAGnE,WAA2B,IAAD,SAChBiD,EAAQ,UAAGpD,OAAOC,KAAKH,KAAKJ,MAAMuB,aAAaiC,MAAK,SAAAlC,GAAG,OAAIA,EAAIS,MAAM,KAAK,KAAO,EAAKtB,GAAGkD,qBAAjF,aAAG,EAA2F5B,MAAM,KAAK,GACvH,OAAO2B,EAAWtD,KAAKiD,KAAKlC,QAAQT,OAAOgD,IAAa,O,4BAG5D,WAAwB,IAAD,OACnB,OAAOpD,OAAOC,KAAKH,KAAKJ,MAAMuB,aAAaiC,MAAK,SAAClC,GAAS,IAAD,EAC/ClC,EAAMkC,EAAIS,MAAM,KAAKvB,IAAIE,QAC/B,OAAOtB,EAAI,MAAJ,UAAW,EAAKiC,cAAhB,aAAW,EAAaZ,KAAMrB,EAAI,KAAO,EAAKqB,IAAiB,IAAXrB,EAAI,Q,sBAIvE,SAASwE,GAAiB,IAAD,OACrB,OAAOtD,OAAOC,KAAKH,KAAKJ,MAAMuB,aACzBO,QAAO,SAAAR,GAAG,OAAIA,EAAIS,MAAM,KAAK,KAAO,EAAKtB,GAAGkD,YAAcrC,EAAIS,MAAM,KAAK,KAAO6B,EAAOD,cACvFnD,KAAI,SAAAqD,GAAI,OAAI,EAAKR,KAAKlC,QAAQT,OAAQmD,EAAK9B,MAAM,KAAK,U,gBAG/D,WACI,OAAO3B,KAAKgB,SAAS,K,wBAGzB,WACI,OAAOhB,KAAKgB,SAAS,GAAG,K,oBAG5B,WACI,IAAQ0C,EAAa1D,KAAb0D,SACR,OAAOA,EAAWA,EAASC,cAAgB,K,iBAG/C,WACI,IAAI1C,EAASjB,KAAKiB,OAClB,QAAIA,IACIA,EAAO2C,eAAiB5D,MACrBiB,EAAO4C,S,6BAKtB,WAEI,OAAO,O,oBAMX,WAKI,IAJA,IAAMF,EAAgB,GAClBpB,EAAavC,KACb8D,EAAcvB,EAAKqB,aAEK,IAArBrB,EAAKwB,KAAK1E,QACbsE,EAAchB,KAAKJ,GACnBuB,EAAcA,GAAevB,EAAKqB,aAClCrB,EAAOA,EAAKwB,KAAK,GAGrB,OAAQxB,EAAKwB,KAAK1E,OAAS,EAAK,KAAO,CAAEsE,gBAAeG,iB,kBAG5D,WACI,OAAO9D,KAAKJ,MAAMK,SAASD,KAAKK,IAAIxC,S,iBAExC,WACI,OAAOmC,KAAKJ,MAAMK,SAASD,KAAKK,IAAI1C,Q,gBAGxC,WACI,MAAO,K,eAGX,WACI,OAAOqC,KAAKJ,MAAMK,SAASD,KAAKK,IAAIb,M,oBAGxC,SAAOwE,GACH,IAAQxE,EAAQQ,KAARR,IACA/B,EAASuG,EAATvG,EAAGC,EAAMsG,EAANtG,EACXsC,KAAKiD,KAAKgB,SAAS,CAAE1C,OAAQvB,KAAKK,GAAIgB,GAAI5D,EAAI+B,EAAI/B,EAAG6D,GAAI5D,EAAI8B,EAAI9B,Q,KCvM5DwG,EAA0B,CACrC3C,OAAQ,EACR4C,YAAY,EACZC,OAAQ,CACNC,MAAM,EACNC,wBAAwB,EACxBC,gBAAiB,CACf9G,EAAG,EACHC,EAAG,GAELkB,KAAM,CACJ4F,MAAO,EACPC,IAAK,EACLC,IAAK,GACLC,KAAM,KAGV1E,SAAU,GACVkB,YAAa,GACbyD,iBAAkB,GAClBnD,MAAO,GACPoD,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,iBAAkB,KAClBC,UAAW,KACXC,UAAU,EACVC,kBAAmB,CAAE1G,aAAS0C,EAAWzC,aAASyC,IAGvCiE,EAAU,SAACzF,EAAkB0F,GACxC1F,EAAMK,SAASL,EAAM2B,QAArB,2BAAoC+D,GAApC,IAA6CjF,GAAIT,EAAM2B,OAAQ1D,OAAQ,EAAGF,MAAO,IACjFiC,EAAMkF,SAAWlF,EAAM2B,SACvB3B,EAAMiF,OAAS,CAAE1G,KAAM,OAAQ2G,SAAUlF,EAAMkF,UAC/ClF,EAAMwE,OAAOC,MAAO,GAwBhBkB,EAAQC,YAAY,CACxBC,KAAMzI,EAAO0I,SACbxB,eACAyB,SAAU,CACRC,YAAa,SAAChG,EAAD,GAAiD,IAAvC0F,EAAsC,EAAtCA,QACrB1F,EAAMuF,SAAWG,GAEnBO,MAlBU,SAACjG,GACb,IAAMqD,EAAO,IAAItD,EAAKC,GAEtBY,QAAQC,IAAIwC,EAAKlC,QAAQ,GAAG8C,QAgB1BwB,QAAS,SAACzF,EAAD,OAAqB0F,EAArB,EAAqBA,QAArB,OAA4DD,EAAQzF,EAAO0F,IACpFrB,SAAU,SAACrE,EAAOkG,GAAR,OAAiD,IAAInG,EAAKC,GAAQqE,SAAS6B,EAAOR,UAC5FS,qBAAsB,SAACnG,EAAD,GAA8D,IAAzC0F,EAAwC,EAAxCA,QACzC1F,EAAMwF,kBAAoBE,GAE5BU,SAAU,SAACpG,GACTA,EAAMwE,OAAOC,MAAO,EACpBzE,EAAMiF,OAAS,KACfjF,EAAMkF,SAAW,KACjBlF,EAAMoF,WAAa,MAErBH,OAAQ,SAACjF,EAAD,GAAqI,IAA3H0F,EAA0H,EAA1HA,QACRnH,EAAmBmH,EAAnBnH,KAAM2G,EAAaQ,EAAbR,SACdlF,EAAMwE,OAAOC,KAAgB,SAATlG,EACpByB,EAAMiF,OAASS,EACf1F,EAAMkF,SAAN,OAAiBA,QAAjB,IAAiBA,IAAY,MAE/BmB,WAAY,SAACrG,EAAD,GAA4G,IAAD,IAAjG0F,QAAWY,EAAsF,EAAtFA,UAAWC,EAA2E,EAA3EA,UACtCvG,EAAMuE,aACRvE,EAAMwE,OAAOG,gBAAgB9G,GAAKyI,EAClCtG,EAAMwE,OAAOG,gBAAgB7G,GAAKyI,IAGtChC,WAAY,SAACvE,EAAD,GAAiD,IAAvC0F,EAAsC,EAAtCA,QACpB1F,EAAMuE,WAAamB,GAErBc,gBAAiB,SAACxG,EAAD,GAAgK,IAAD,MAArJ0F,QAAWY,EAA0I,EAA1IA,UAAWC,EAA+H,EAA/HA,UAAWzH,EAAoH,EAApHA,QAASC,EAA2G,EAA3GA,QACnE,GAAIiB,EAAMuE,WACRvE,EAAMwE,OAAOG,gBAAgB9G,GAAKyI,EAClCtG,EAAMwE,OAAOG,gBAAgB7G,GAAKyI,OAC7B,GAA2B,YAAvB,UAAAvG,EAAMiF,cAAN,eAAc1G,MACvByB,EAAMqF,iBAAmB,CAAEvG,UAASC,gBAC/B,GAAIiB,EAAMwE,OAAOC,MAAkC,kBAAnBzE,EAAMkF,SAAuB,CAElE,IAAMvD,EAAS3B,EAAMkF,SACrB,EAA2ClF,EAAMwF,kBAAhCiB,EAAjB,EAAQ3H,QAAyB4H,EAAjC,EAAwB3H,QACxBiB,EAAMwF,kBAAoB,CAAE1G,UAASC,WACrC,IAAM4H,EAAQ3G,EAAMwE,OAAOxF,KAAK4F,MAC1BnD,GAAM3C,EAAU2H,GAASE,EACzBjF,GAAM3C,EAAU2H,GAASC,EAC9B,IAAI5G,EAAKC,GAAQqE,SAAS,CAAE1C,SAAQD,KAAID,SAG7CmF,cAAe,SAAC5G,GAAW,IAAD,EAClBqD,EAAO,IAAItD,EAAKC,GACtB,GAAIA,EAAMoD,cAAe,CACvB,MAAgCpD,EAAMoD,cAAcrB,MAAM,KAAKvB,KAAI,SAAAqG,GAAC,OAAInG,OAAOmG,MAA/E,mBAAO9F,EAAP,KAAmBC,GAAnB,WACMC,EAAQP,OAAOV,EAAMkF,UAE3B7B,EAAKyD,cAAc,CAAC/F,UAASC,YAAWC,QAAOC,QAD/B,IAGlBlB,EAAMoD,mBAAgB5B,EACtBxB,EAAMqF,iBAAmB,KACzBrF,EAAMuE,YAAa,EACnBvE,EAAMwE,OAAOC,MAAO,EACO,YAAvB,UAAAzE,EAAMiF,cAAN,eAAc1G,QAChByB,EAAMiF,OAAS,OAInB8B,WAAY,SAAC/G,GACX,IAAQuB,EAA2CvB,EAA3CuB,YAAalB,EAA8BL,EAA9BK,SAAUwB,EAAoB7B,EAApB6B,MAAOqD,EAAalF,EAAbkF,SACjCA,GAAiC,kBAAbA,IAGzB5E,OAAOC,KAAKgB,GAAaU,QAAO,SAAC+E,EAAGC,GAClC,IAAM7H,EAAM6H,EAAIlF,MAAM,KAAKvB,KAAI,SAAAqG,GAAC,OAAIK,SAASL,MAI7C,OAHa,EAATzH,EAAI,KAAW8F,GAAqB,EAAT9F,EAAI,KAAW8F,UACrC3D,EAAY0F,GAEd,OACN,MAEH3G,OAAOC,KAAKsB,GAAOI,QAAO,SAAC+E,EAAGC,GAK5B,OAHa,EADDA,EAAIlF,MAAM,KAAKvB,KAAI,SAAAqG,GAAC,OAAIK,SAASL,MACrC,KAAW3B,UACVrD,EAAMoF,GAER,OACN,aAEI5G,EAAS6E,GAEhBlF,EAAMiF,OAAS,KACfjF,EAAMkF,SAAW,KACjBlF,EAAMoF,WAAa,OAErB+B,WAAY,SAACnH,GACX,IAAQkF,EAA0BlF,EAA1BkF,SAAU3D,EAAgBvB,EAAhBuB,YACM,kBAAb2D,UACF3D,EAAY2D,IAEvBkC,KAvHS,SAACpH,EAAD,GAA6D,IAAxC0F,EAAuC,EAAvCA,QAKhC,OAJApF,OAAO+G,OAAOrH,EAAOsE,GACrBtE,EAAMK,SAAWqF,EAAQrF,SACzBL,EAAM2B,OAASrB,OAAOC,KAAKmF,EAAQrF,UAAUZ,OAAS,EACtDO,EAAMuB,YAAcmE,EAAQnE,YACrBvB,GAmHL8G,cAAe,SAAC9G,EAAOkG,GACR,IAAInG,EAAKC,GACjB8G,cAAcZ,EAAOR,UAE5B4B,MAAO,kBAAMhD,GACbiD,UAAW,SAACvH,EAAD,GAA+C,IAArC0F,EAAoC,EAApCA,QACnB1F,EAAM6B,MAAN,2BAAmB7B,EAAM6B,OAAU6D,IAErC1G,KAAM,SAACgB,EAAD,GAAwD,IAA9C0F,EAA6C,EAA7CA,QACN1G,EAASgB,EAAMwE,OAAfxF,KACA4F,EAA0B5F,EAA1B4F,MAAOC,EAAmB7F,EAAnB6F,IAAKC,EAAc9F,EAAd8F,IAAKC,EAAS/F,EAAT+F,KACnByC,EAAW5C,GAASc,EAAUX,GAAQA,GACxCyC,GAAY3C,GAAO2C,GAAY1C,IACjC9F,EAAK4F,MAAQ4C,GAEC,OAAZ9B,IACF1F,EAAMwE,OAAOG,gBAAkB,CAAE9G,EAAG,EAAGC,EAAG,GAC1CkB,EAAK4F,MAAQ,IAGjB6C,SAAU,SAACzH,EAAD,GAA8G,IAAD,IAAnG0F,QAAWzH,EAAwF,EAAxFA,OAAQF,EAAgF,EAAhFA,MAAO0C,EAAyE,EAAzEA,GAC5CT,EAAMK,SAASI,GAAIxC,OAASA,EAC5B+B,EAAMK,SAASI,GAAI1C,MAAQA,MAKpB2J,EAAU/B,EAAM+B,QAChBC,EAAgBhC,EAAMiC,QAGtBC,EAAuB,SAAC7H,GAAD,OAAsBA,EAAM8H,MAAM9H,EAAM+H,U,OClM/DC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,OCGhDC,EALI,CACfC,OCFoB,SAACC,GACrB,IAAQC,EAAkCD,EAAlCC,SAAUC,EAAwBF,EAAxBE,OAAQhJ,EAAgB8I,EAAhB9I,EAAG+F,EAAa+C,EAAb/C,SAU7B,OACI,kDACQgD,GADR,IAEIE,MAAM,6BACNC,UAAU,QACVC,EAAG,EACHC,YAdY,SAACC,GACbtD,GACJ+C,EAAMrD,OAAO4D,EAAG,CACZL,SACAhJ,WDJRsJ,KEIS,SAACR,GACV,IAAQE,EAAcF,EAAdE,OAAQO,EAAMT,EAANS,EAER7D,EADMgD,EAAeL,GACrB3C,SACF8D,EAAWhB,IAGXU,EAAY,cAAiBxD,IAAasD,GAAUA,EAAU,SAAW,IAE/E,OAAO,sBACHC,MAAM,6BACNC,UAAWA,EACXK,EAAGA,EACHH,YAAa,SAACC,GACVA,EAAEI,kBAEFD,EAAStB,EAAQzC,OAAO,CAAE1G,KAAM,OAAQ2G,SAAUsD,U,QCzBjDU,EAAS,kBAAO,sBAAKnL,MAAM,KAAKE,OAAO,KAAKkL,QAAQ,YAAYC,KAAK,OAAOX,MAAM,6BAAlE,UACzB,wBAAQY,GAAG,UAAUC,GAAG,UAAUX,EAAE,UAAUS,KAAK,YACnD,wBAAQC,GAAG,UAAUC,GAAG,UAAUX,EAAE,UAAUS,KAAK,YACnD,wBAAQC,GAAG,UAAUC,GAAG,UAAUX,EAAE,UAAUS,KAAK,YACnD,wBAAQC,GAAG,UAAUC,GAAG,UAAUX,EAAE,UAAUS,KAAK,YACnD,wBAAQC,GAAG,UAAUC,GAAG,UAAUX,EAAE,UAAUS,KAAK,YACnD,wBAAQC,GAAG,UAAUC,GAAG,UAAUX,EAAE,UAAUS,KAAK,gBAG1CG,EAAO,kBAAO,sBAAKxL,MAAM,KAAKE,OAAO,IAAIkL,QAAQ,WAAWC,KAAK,OAAOX,MAAM,6BAAhE,UACvB,wBAAQY,GAAG,MAAMC,GAAG,MAAMX,EAAE,MAAMS,KAAK,YACvC,wBAAQC,GAAG,SAASC,GAAG,MAAMX,EAAE,MAAMS,KAAK,YAC1C,wBAAQC,GAAG,UAAUC,GAAG,MAAMX,EAAE,MAAMS,KAAK,gBCiChCI,EALO,CAClBC,OAtCW,SAACnB,GACZ,MAAkBoB,mBAASpB,GAA3B,mBAAOqB,EAAP,UACA,OAAO,qBAAKjB,UAAU,aAAf,SACFkB,KAAKC,UAAUF,EAAG,KAAM,MAoC7BG,MAzBU,SAACxB,GACX,IAAQyB,EAA8BzB,EAA9ByB,OAAQlE,EAAsByC,EAAtBzC,KAAMmE,EAAgB1B,EAAhB0B,YACtB,OACI,sBAAKtB,UAAU,yBAAf,UACI,qBAAKA,UAAU,SAAf,SACI,cAAC,EAAD,MAEJ,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,WAAf,UACI,yBACA,qBAAKuB,IAAKF,EAAQG,IAAKrE,EAAO,KAAOmE,OAEzC,sBAAKtB,UAAU,YAAf,UACI,mBAAGA,UAAU,aAAb,SAA2B7C,IAC3B,qBAAK6C,UAAU,iBAAf,SACI,cAAC,EAAD,MAEJ,mBAAGA,UAAU,YAAb,SAA0BsB,eC4H/BG,EArJW,SAAC,GAA4B,IAA1B1J,EAAyB,EAAzBA,GACzB,EACIyH,EAAeL,GADXzE,EAAR,EAAQA,cAAezB,EAAvB,EAAuBA,OAAQuD,EAA/B,EAA+BA,SAAUD,EAAzC,EAAyCA,OAAQpD,EAAjD,EAAiDA,MAAO2C,EAAxD,EAAwDA,OAA0B7B,EAAlF,EAAgEtC,SAAaI,GAEvEuI,EAAWhB,IACTzE,EAAcZ,EAAdY,KAAM3D,EAAQ+C,EAAR/C,IACNZ,EAASwF,EAATxF,KAER,EAAwB0K,mBAAS,CAC7BU,OAAQ,GACRC,QAAS,KAFb,mBAAOC,EAAP,KAAaC,EAAb,KAIMC,EAAMC,iBAAuB,MAE7BC,EAAgB,SAACnM,GAGnB,IAFA,IAAIa,EAAM,GAD4B,WAG7BI,GACL,IAAM8B,EAAG,UAAM/C,EAAN,eAAiBiB,GACpB2C,EAAO,UAAM1B,EAAN,YAAYlC,EAAZ,YAAoBiB,GAC3B+D,EACF,qBACIqF,YAAa,SAACC,GACVA,EAAEI,kBACFD,EAAStB,EAAQzC,OAAO,CACpB1G,KAAOA,EAAO,MACdqF,OAAQpE,EACR0F,SAAUvC,EAAKlC,OAIvBiI,UAAS,UAAKnK,EAAL,eAAgB+C,EAAhB,YAAuBa,GAChCwI,UAAW,SAAA9B,GACP,GAAa,OAATtK,GAAqC,kBAAb2G,IAAyB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAQrB,QAA9D,CACA,IAAM3C,EAAQ0B,EAAKlC,GACbS,EAAU1B,EACVuB,EAAUmE,EACVlE,EAAYiE,EAAOrB,OAErB7C,IAAYE,GAChB+H,EAAStB,EAAQZ,cAAc,CAAE/F,UAASC,YAAWC,QAAOC,eAnBpE,SAsBI,qBAAKwH,UAAS,oBAAgBtF,IAAkBjB,EAAW,IAAQ,gBAb9Db,GAeblC,EAAI2D,KAAKQ,IA5BJ/D,EAAI,EAAGA,GAAK+D,EAAKhF,GAAOiB,IAAM,EAA9BA,GA+BT,OACI,qBAAKkJ,UAAS,UAAKnK,EAAL,QAAd,SACKa,KAKbwL,qBAAU,WACN,GAAIJ,EAAI1J,QAAS,CAEb,IAAMsJ,EAAS/K,MAAMC,KAAKkL,EAAI1J,QAAQpD,cAAc,WAAWmN,UAEzDR,EAAUhL,MAAMC,KAAKkL,EAAI1J,QAAQpD,cAAc,YAAYmN,UAEjEN,EAAQ,CAAEH,SAAQC,YAElB,MAAsCG,EAAI1J,QAAlCgK,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YACtB/B,EAAStB,EAAQD,SAAS,CAAExJ,OAAQ6M,EAAc/M,MAAOgN,EAAatK,WAE3E,CAAC+J,IAIJ,IAAMQ,EAAa,SAACzM,EAAgBiB,EAAWN,GAC3C,IAAMoC,EAAG,UAAMb,EAAN,YAAYlC,EAAZ,YAAoBiB,GAC7B,IAAKqC,EAAMP,GAAM,CACb,IAAM2J,EAAO/L,EAAKtB,wBACZ+B,EAAO,CACT5B,MAAOmB,EAAK6L,YACZ9M,OAAQiB,EAAK4L,cAEXlL,EAAM,CACR/B,EAAGoN,EAAKpN,EACRC,EAAGmN,EAAKnN,GAEZ,OAAO,eACFwD,EAAMnD,EAAQuB,mBAAmBC,EAAMC,EAAKZ,EAAK4F,UA0B9D,OArBAgG,qBAAU,WACN,GAAIN,EAAKF,QAAUE,EAAKD,SAAW9G,EAAK2H,KAAOZ,EAAKF,OAAO3K,QAAU8D,EAAK4H,MAAQb,EAAKD,QAAQ5K,OAAQ,CACnG,IAAI2L,EAAW,GACfA,EAAW9K,OAAO+G,OAAO+D,EAAUd,EAAKF,OAAOnI,QAAO,SAACC,EAAKhD,EAAMM,GAC9D,OAAOc,OAAO+G,OAAOnF,EAAK8I,EAAW,KAAMxL,EAAI,EAAGN,MACnD,KACHkM,EAAW9K,OAAO+G,OAAO+D,EAAUd,EAAKD,QAAQpI,QAAO,SAACC,EAAKhD,EAAMM,GAC/D,OAAOc,OAAO+G,OAAOnF,EAAK8I,EAAW,MAAOxL,EAAI,EAAGN,MACpD,KACH8J,EAAStB,EAAQH,UAAU6D,OAEhC,CAACpC,EAAUzF,EAAM+G,IAEpBM,qBAAU,WAEN,GAAIJ,EAAI1J,SAAWa,EAAS,IAAMlB,GAAM+D,EAAOC,KAAM,CACjD,MAAsC+F,EAAI1J,QAAlCgK,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YACtB/B,EAAStB,EAAQrD,SAAS,CAAE1C,OAAQlB,EAAIgB,GAAmB,IAAdsJ,EAAmBrJ,GAAoB,IAAfoJ,QAE1E,IAEI,sBACHN,IAAKA,EACL9B,UAAW,eAAQjI,EAAR,iCAA4CyE,IAAazE,EAAK,UAAY,IACrF4K,MAAO,CACHC,IAAK1L,EAAI9B,EAAI,KACbyN,KAAM3L,EAAI/B,EAAI,KACd2N,OAAQ,QAEZ5C,YAAa,SAAAC,GACTA,EAAEI,kBACF,IAAQnK,EAAqB+J,EAArB/J,QAASC,EAAY8J,EAAZ9J,QACjBiK,EAAStB,EAAQzC,OAAO,CAAE1G,KAAM,OAAQ2G,SAAUzE,KAClDuI,EAAStB,EAAQvB,qBAAqB,CAAErH,UAASC,cAErD0M,cAAe,SAAA5C,KAGf6C,cAAe,aAjBZ,UAqBFhB,EAAc,MACf,qBACIhC,UAAU,wBADd,SAGI,cAAC,EAAce,OAAf,eAA0B9G,MAE7B+H,EAAc,W,uBCjJjBiB,EAAkB,SAAClM,EAAgBmM,GAGrC,IAHgF,IAAvB/G,EAAsB,uDAAhB,GAAIC,EAAY,uDAAN,EACnE+G,EAAS,GACTrL,EAAM,iEACHsL,EAAI,EAAGA,EAAIrM,EAAQqM,IAAK,CAE7B,IADA,IAAIC,EAAO,GACFvM,EAAI,EAAGA,EAAId,KAAKsN,MAAMtN,KAAKuN,UAAYpH,EAAMC,GAAOA,GAAMtF,IAC/DuM,GAAQvL,EAAI0L,OAAOxN,KAAKsN,MAAMtN,KAAKuN,SAAWzL,EAAIf,SAElDmM,EAAWnM,OAAS,IACpBsM,GAAQH,GAEZC,EAAO9I,KAAKgJ,GAEhB,OAAOF,GCJIM,EALF,CACTC,SCFS,uCAAI,sBAAAnJ,EAAA,+EACR,CACL,MAAS,CACP,EAAK,CACH,GAAM,EACN,KAAQ9F,EAAUkP,OAClB,KAAQ,CACN,KAAQ,UACR,KAAQ,cACR,MAAS,QAEX,KAAQ,CACN,GAAM,EACN,IAAO,GAET,IAAO,CACL,EAAK,QACL,EAAK,IAEP,OAAU,EACV,MAAS,GAEX,EAAK,CACH,GAAM,EACN,KAAQlP,EAAUkP,OAClB,KAAQ,CACN,KAAQ,SACR,KAAQ,aACR,MAAS,QAEX,KAAQ,CACN,GAAM,EACN,IAAO,GAET,IAAO,CACL,EAAK,SACL,EAAK,KAEP,OAAU,EACV,MAAS,GAEX,EAAK,CACH,GAAM,EACN,KAAQlP,EAAUkP,OAClB,KAAQ,CACN,KAAQ,SACR,KAAQ,aACR,MAAS,WAEX,KAAQ,CACN,GAAM,EACN,IAAO,GAET,IAAO,CACL,EAAK,SACL,EAAK,IAEP,OAAU,EACV,MAAS,GAEX,EAAK,CACH,GAAM,EACN,KAAQlP,EAAUkP,OAClB,KAAQ,CACN,KAAQ,SACR,KAAQ,eACR,MAAS,UAEX,KAAQ,CACN,GAAM,EACN,IAAO,GAET,IAAO,CACL,EAAK,QACL,EAAK,KAEP,OAAU,EACV,MAAS,IAGb,YAAe,CACb,UAAW,CACT,CACE,EAAK,SACL,EAAK,MAGT,UAAW,CACT,CACE,EAAK,SACL,EAAK,QA1FE,2CAAJ,qDDGTC,WDUW,uCAAG,WAAOC,GAAP,mBAAAtJ,EAAA,sDAOd,IANMuJ,EAAM,iBAAO,CACfjO,KAAM,MACNsH,KAAM,OACNjB,MAAO+G,EAAgB,EAAG,GAAI,GAAI,GAAG,KAEnCc,EAAM,GACHjN,EAAI,EAAGA,EAAI+M,IAAU/M,EAC1BiN,EAAI1J,KAAKyJ,KARC,yBAUPC,GAVO,2CAAH,uDGTFC,EAAgBC,YAAqB,oBACrCC,EAAaD,YAAwB,cACrCE,EAAeF,YAAqB,gBAE3CrI,EAAyB,CAC7ByD,QAAS,EACTD,MAAO,CAACgF,EAAsBA,EAAsBA,GACpDC,UAAW,GACXF,aAAc,GAGHG,EAAqBC,YAAiB,aAAD,sBAAe,sBAAAhK,EAAA,sEAClDkJ,EAAKG,WAAW,GADkC,oFAIpDY,EAAmBD,YAAiB,mBAAD,sBAAqB,sBAAAhK,EAAA,sEACtDkJ,EAAKC,WADiD,oFAK/DxE,EAAUuF,YAAc7I,GAAc,SAAC8I,GAC3CA,EACGC,QAAQX,GAAe,SAAC1M,EAAD,GAAyB,IAAf0F,EAAc,EAAdA,QAChC1F,EAAM+H,QAAUrC,KAEjB2H,QAAQT,GAAY,SAACU,EAAD,GAAsF,IAAD,IAA9D5H,QAAW5G,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,QAC9D,GAAKuO,EAAST,aAAd,CAEA,IAAM7M,EAAQsN,EAASxF,MAAMwF,EAASvF,SAChCpF,EFzBD,CACH,KAAQxF,EAAUkP,OAClB,KAAQ,CACJ,KAAQ,SACR,KAAQ,eACR,MAAS,UAEb,KAAQ,CACJ,GAAM,EACN,IAAO,GAEX,IAAO,CACH,GAAM,GACN,EAAK,MEaX1J,EAAK/C,IAAMzB,EAAQU,OAAOC,EAASC,EAASiB,EAAMwE,OAAOxF,KAAK4F,OAC9D5E,EAAMwF,kBAAoB,CAAE1G,UAASC,WACrC0G,EAAQzF,EAAO2C,GACf2K,EAAST,kBAAerL,MAEzB6L,QAAQR,GAAc,SAACS,EAAD,GAA0B,IAAd5H,EAAa,EAAbA,QACjC4H,EAAST,aAAenH,KAEzB2H,QAAQL,EAAmBO,WAAW,SAACvN,EAAOkG,GAC7ClG,EAAM+M,UAAY7G,EAAOR,WAE1B2H,QAAQH,EAAiBK,WAAW,SAACvN,EAAOkG,GAC3C,MAAyCA,EAAOR,QAAjCrF,EAAf,EAAQJ,MAAiBsB,EAAzB,EAAyBA,YACzBvB,EAAM8H,MAAM9H,EAAM+H,SAAWJ,EAC3B3H,EAAM8H,MAAM9H,EAAM+H,SAClB,CACExJ,KAAMnB,EAAO0I,SAAW,QACxBJ,QAAS,CAAErF,WAAUkB,oBAK1BiM,YACC,SAACtH,GAAD,OAAYA,EAAO3H,KAAKkF,WAAWrG,EAAO0I,aAC1C,SAAC9F,EAAOkG,GACNlG,EAAM8H,MAAM9H,EAAM+H,SAAWJ,EAAc3H,EAAM8H,MAAM9H,EAAM+H,SAAU7B,SAOlEuH,EAAQC,YAAe,CAClC9F,YCnDa+F,EAhBgB,WAC3B,IAAMpI,EAAW2C,GAAe,SAAAyB,GAAC,OAAI9B,EAAqB8B,GAAGpE,YACvDyD,EAAWhB,IAEjB,OACI,sBAAKU,UAAU,sBAAf,WACMnD,GACE,mCACI,wBAAQmD,UAAU,6BAA6BkF,QAAS,kBAAMhN,QAAQC,IAAI,UAA1E,qBAGR,wBAAQ6H,UAAU,6BAA6BkF,QAAS,kBAAM5E,EAAStB,EAAQ1B,aAAaT,KAA5F,SAAyGA,EAAW,SAAW,aCC5HsI,EAZU,WACrB,IAAM7E,EAAWhB,IAEjB,OACI,sBAAKU,UAAU,gBAAf,UACI,wBAAQA,UAAU,uBAAuBkF,QAAS,kBAAM5E,EAAStB,EAAQ1I,MAAK,KAA9E,eACA,wBAAQ0J,UAAU,uBAAuBkF,QAAS,kBAAM5E,EAAStB,EAAQ1I,MAAK,KAA9E,eACA,wBAAQ0J,UAAU,uBAAuBkF,QAAS,kBAAM5E,EAAStB,EAAQ1I,KAAK,QAA9E,uBCCC8O,EAAU,WACnB,IAAM9N,EAAQkI,EAAeL,GAErB5C,EAAsDjF,EAAtDiF,OAAQT,EAA8CxE,EAA9CwE,OAAQ3C,EAAsC7B,EAAtC6B,MAAOqD,EAA+BlF,EAA/BkF,SAAUG,EAAqBrF,EAArBqF,iBACzC,KAAI,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAQrB,QAAoD,OAA1ChD,QAAQmN,MAAR,2BAAiD,KACxE,IAAMC,EAAQ,UAAM9I,EAAN,gBAAsBD,EAAOrB,QAE3C,IAAK/B,EAAMmM,GAAwD,OAA3CpN,QAAQmN,MAAR,4BAAkD,KAC1E,IAAK1I,EAA0D,OAAtCzE,QAAQmN,MAAR,uBAA6C,KAEtE,IAAM1P,EAAQ,CACVR,EAAGgE,EAAMmM,GAAUnQ,EACnBC,EAAG+D,EAAMmM,GAAUlQ,GAEjBkB,EAAOwF,EAAOxF,KAAK4F,MACjB9F,EAAqBuG,EAArBvG,QAASC,EAAYsG,EAAZtG,QACXT,EAAMH,EAAQU,OAAOC,EAASC,EAASC,GACvC+J,EAAI5K,EAAQC,gBAAgBC,EAAOC,EAAK,aAE9C,OAAO,qBACHmK,MAAM,6BACNC,UAAU,sBAFP,SAIH,cAAC,EAAWI,KAAZ,CACIC,EAAGA,OAMFkF,GAAiB,WAC1B,MAA+B/F,EAAeL,GAAtCtG,EAAR,EAAQA,YAAaM,EAArB,EAAqBA,MAEfqM,EAAQ5N,OAAOmC,QAAQlB,GAAaf,KAAI,YAAY,IAAVc,EAAS,oBAE/ClC,EAAMkC,EAAIS,MAAM,KAChBiM,EAAQ,UAAM5O,EAAI,GAAV,gBAAoBA,EAAI,IAChC+O,EAAM,UAAM/O,EAAI,GAAV,eAAmBA,EAAI,IAEnC,IAAKyC,EAAMmM,KAAcnM,EAAMsM,GAE3B,OAAO,KAGX,IAAM9P,EAAQ,CACVR,EAAGgE,EAAMmM,GAAUnQ,EACnBC,EAAG+D,EAAMmM,GAAUlQ,GAEjBQ,EAAM,CACRT,EAAGgE,EAAMsM,GAAQtQ,EACjBC,EAAG+D,EAAMsM,GAAQrQ,GAEfiL,EAAI5K,EAAQC,gBAAgBC,EAAOC,EAAK,aAC9C,OAAO,8BACH,qBACImK,MAAM,6BACNC,UAAU,sBAFd,SAII,cAAC,EAAWI,KAAZ,CACIN,OAAQlH,EACRyH,EAAGA,OAPEzH,MAarB,OAAO,mCAAG4M,KAGDE,GAAW,WACpB,IAAM/N,EAAW6H,GAAe,SAAAyB,GAAC,OAAI9B,EAAqB8B,GAAGtJ,YAE7D,OAAO,mCAAGC,OAAO+N,OAAOhO,GAAUG,KAAI,SAACmC,GACnC,OAAO,cAAC,EAAD,CAKHlC,GAAIkC,EAAKlC,IADJkC,EAAKlC,UAQTqF,GAAW,WACpB,MACMoC,EAAeL,GADb5C,EAAR,EAAQA,OAAR,IAAgBT,OAAhB,IAA0BG,gBAAmB9G,EAA7C,EAA6CA,EAAGC,EAAhD,EAAgDA,EAAKkB,EAArD,EAAqDA,KAAQqG,EAA7D,EAA6DA,iBAGvD2D,EAAWhB,IAwBjB,OAtBA4C,qBAAU,WACN5B,EAASkE,OACV,IAEHtC,qBAAU,WACN,IAAM0D,EAAgB,SAACzF,GACL,WAAVA,EAAEvH,MACmB,UAAX,OAAN2D,QAAM,IAANA,OAAA,EAAAA,EAAQ1G,MACRyK,EAAStB,EAAQP,cAGjB6B,EAAStB,EAAQX,gBAK7B,OADAtJ,SAAS8Q,iBAAiB,UAAWD,GAC9B,WACH7Q,SAAS+Q,oBAAoB,UAAWF,MAE7C,CAACtF,EAAD,OAAW/D,QAAX,IAAWA,OAAX,EAAWA,EAAQ1G,OAIlB,sBACIkC,GAAG,WACHiI,UAAU,kBACVE,YAAa,SAACC,GACLA,EAAE4F,cAAcC,UAAUC,SAAS,qBACxC3F,EAAStB,EAAQnD,YAAW,IAC5ByE,EAAStB,EAAQtB,cAErBuE,UAAW,kBAAM3B,EAAStB,EAAQd,kBAClCgI,YAAa,SAAC/F,GACV,IAAQ/J,EAA2C+J,EAA3C/J,QAASC,EAAkC8J,EAAlC9J,QAASuH,EAAyBuC,EAAzBvC,UAAWC,EAAcsC,EAAdtC,UACrCyC,EAAStB,EAAQlB,gBAAgB,CAAE1H,UAASC,UAASuH,YAAWC,gBAEpEsI,aAAc,SAAChG,GACX,IAAQ/J,EAAqB+J,EAArB/J,QAASC,EAAY8J,EAAZ9J,QACjBiK,EAAS4D,EAAW,CAAE9N,UAASC,cAfvC,UAkBI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,sBACI2J,UAAU,WACV2C,MAAO,CACHyD,UAAU,aAAD,OAAejR,EAAf,eAAuBC,EAAvB,qBAAqCkB,EAAK4F,MAA1C,MAHjB,UAMI,cAAC,GAAD,IACA,cAAC,GAAD,IACCS,GAAoB,cAAC,EAAD,WC7GtB0J,GApCI,SAACzG,GAChB,IAAQsD,EAAetD,EAAfsD,WACFoD,EAAO9G,GAAe,SAAAyB,GAAC,OAAIA,EAAEoD,aAC7B/D,EAAWhB,IACXiH,EAAYrD,EAAWsD,cAAcnN,MAAM,KAAKD,QAAO,SAAAqN,GAAI,OAAIA,EAAK1P,OAAS,KAOnF,OAJAmL,qBAAU,WACN5B,EAASgE,OACV,CAAChE,IAGA,qBACIN,UAAU,0BADd,SAGKsG,EAAKxO,KAAI,SAAC2O,EAAMC,GACb,IAAQvJ,EAAsBsJ,EAAtBtJ,KAAMtH,EAAgB4Q,EAAhB5Q,KAAMqG,EAAUuK,EAAVvK,MACdyK,EAAQzF,KAAKC,UAAUsF,EAAM,KAAM,GAEzC,OACKF,EAAUzL,MAAK,SAAAuI,GAAI,OAAIsD,EAAMH,cAAcI,SAASvD,QAAWkD,EAAUxP,SAC1E,qBAEIiJ,UAAU,sBACV6G,mBAAoB,SAAC1G,GACjBG,EAAS6D,EAAa,KAJ9B,SAOI,8CAAetO,EAAf,oBAA+BqG,EAAQiB,MANlC,2BAA6BuJ,S,MCe3CI,OApCf,WAEE,MAAoC9F,mBAAS,IAA7C,mBAAOkC,EAAP,KAAmB6D,EAAnB,KACMzG,EAAWhB,IAEjB,OACE,sBAAKU,UAAU,MAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,qBAAKA,UAAU,4BAAf,SACE,uBACEnK,KAAK,OACLmR,YAAY,mBACZC,SAAU,SAAA9G,GAAO4G,EAAc5G,EAAE+G,OAAOhL,YAG5C,qBAAK8D,UAAU,0BAAf,SACE,cAAC,GAAD,CACEkD,WAAYA,SAIlB,sBAAKlD,UAAU,OAAf,UACE,gCACE,wBAAQkF,QAAS,kBAAM5E,EAASkE,MAAhC,gCAEA,wBAAQU,QAAS,kBAAM5E,EAAS0D,EAAc,KAA9C,uBACA,wBAAQkB,QAAS,kBAAM5E,EAAS0D,EAAc,KAA9C,uBACA,wBAAQkB,QAAS,kBAAM5E,EAAS0D,EAAc,KAA9C,uBACA,wBAAQkB,QAAS,kBAAM5E,EAAStB,EAAQzB,UAAxC,sBAEF,cAAC,GAAD,WC/BR4J,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUtC,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJhQ,SAASuS,eAAe,W","file":"static/js/main.7b2fd269.chunk.js","sourcesContent":["export enum NODE_TYPE {\n    START = 'START',\n    MIDDLE = 'MIDDLE',\n    END = 'END',\n}\n\nexport enum Slices {\n    Drawflow = 'drawflow'\n}\n\nexport const CURV = 0.5;\n\nexport enum MODAL_TYPE {\n    NODE_SETTINGS = \"NODE_SETTINGS\",\n    GROUP_SETTINGS = \"GROUP_SETTINGS\",\n}\n\nexport type pos = {\n    x: number,\n    y: number,\n}\n\nexport type clientPos = {\n    clientX: number,\n    clientY: number,\n}\n\nexport type port = {\n    in: number,\n    out: number,\n}\n\nexport type portType = 'in' | 'out'\n\nexport type ports = {\n    [propName: string]: pos\n}\n\nexport type block = {\n    name: string,\n    type: string,\n    value: string,\n    create?: boolean\n}\n\n\n\nexport type dataNode = {\n    type: string\n    data: block\n    port: port\n    pos: pos\n}\n\nexport interface node extends dataNode {\n    id: number\n    height: number\n    width: number\n}\n\nexport type drawflow = {\n    [id: number]: node\n}\n\nexport type connections = {\n    [propName: string]: pos[]\n}\n\nexport type data = {\n    nodes: drawflow,\n    connections: connections,\n    connectionsLabel?: {\n        [propName: string]: string\n    },\n}\n\nexport interface stateData {\n    nodeId: number,\n    canvasDrag: boolean,\n    config: {\n        drag: boolean,\n        connectionsLabelEnable: boolean,\n        canvasTranslate: pos,\n        zoom: {\n            value: number,\n            max: number,\n            min: number,\n            tick: number,\n        },\n    },\n    drawflow: drawflow,\n    modalType: string | null,\n    newPathDirection: clientPos | null,\n    ports: ports,\n    connections: connections,\n    connectionsLabel: {\n        [propName: string]: string\n    },\n    selectId: string | number | null,\n    select: { type: string, portId?: number, selectId?: string | number } | null,\n    selectPath: string | null,\n    showButton: number | null,\n    editLock: boolean,\n    mouseBlockDragPos: { clientX?: number, clientY?: number },\n    portToConnect?: string\n}\n\nexport interface flowType {\n    version: number\n    flows: stateData[]\n    dragTemplate?: number\n    templates: block[]\n}\n\nexport type addConnectionType = { startId: number, startPort: number, endId: number, endPort: number }\nexport type loadType = { drawflow: drawflow, connections: connections }\nexport type moveNodeType = { dx: number, dy: number, nodeId: number }","import { CURV as curv, stateData } from \"../types\";\n\nimport { pos } from \"../types\";\n\nexport const getPortListByNodeId = (nodeId: number, state: stateData) => {\n  const { ports } = state;\n  return Object.keys(ports).filter(key => key.split(/_/g)[0] === \"\" + nodeId);\n}\n\nconst createCurvature = (start: pos, end: pos, type: string) => {\n  let hx1 = null;\n  let hx2 = null;\n\n  //type openclose open close other\n  switch (type) {\n    case 'open':\n      if (start.x >= end.x) {\n        hx1 = start.x + Math.abs(end.x - start.x) * curv;\n        hx2 = end.x - Math.abs(end.x - start.x) * (curv * -1);\n      } else {\n        hx1 = start.x + Math.abs(end.x - start.x) * curv;\n        hx2 = end.x - Math.abs(end.x - start.x) * curv;\n      }\n      return ' M ' + start.x + ' ' + start.y + ' C ' + hx1 + ' ' + start.y + ' ' + hx2 + ' ' + end.y + ' ' + end.x + '  ' + end.y;\n\n    case 'close':\n      if (start.x >= end.x) {\n        hx1 = start.x + Math.abs(end.x - start.x) * (curv * -1);\n        hx2 = end.x - Math.abs(end.x - start.x) * curv;\n      } else {\n        hx1 = start.x + Math.abs(end.x - start.x) * curv;\n        hx2 = end.x - Math.abs(end.x - start.x) * curv;\n      }\n      return ' M ' + start.x + ' ' + start.y + ' C ' + hx1 + ' ' + start.y + ' ' + hx2 + ' ' + end.y + ' ' + end.x + '  ' + end.y;\n\n    case 'other':\n      if (start.x >= end.x) {\n        hx1 = start.x + Math.abs(end.x - start.x) * (curv * -1);\n        hx2 = end.x - Math.abs(end.x - start.x) * (curv * -1);\n      } else {\n        hx1 = start.x + Math.abs(end.x - start.x) * curv;\n        hx2 = end.x - Math.abs(end.x - start.x) * curv;\n      }\n      return ' M ' + start.x + ' ' + start.y + ' C ' + hx1 + ' ' + start.y + ' ' + hx2 + ' ' + end.y + ' ' + end.x + '  ' + end.y;\n\n    default:\n      hx1 = start.x + Math.abs(end.x - start.x) * curv;\n      hx2 = end.x - Math.abs(end.x - start.x) * curv;\n\n      return ' M ' + start.x + ' ' + start.y + ' C ' + hx1 + ' ' + start.y + ' ' + hx2 + ' ' + end.y + ' ' + end.x + '  ' + end.y;\n  }\n}\n\nconst getCanvasInfo = () => {\n  // TODO : replace querySelector to someting\n  const canvas = (document.querySelector(\"#drawflow\") as HTMLElement).querySelector(\".drawflow\") as HTMLElement;\n  const canvasRect = canvas.getBoundingClientRect();\n  return {\n    x: canvasRect.x,\n    y: canvasRect.y,\n    width: canvas.clientWidth,\n    height: canvas.clientHeight,\n  };\n}\n\nconst getPos = (clientX: number, clientY: number, zoom: number) => {\n  const { x, y, width, height } = getCanvasInfo();\n  return {\n    x: clientX * (width / (width * zoom)) - (x * (width / (width * zoom))),\n    y: clientY * (height / (height * zoom)) - (y * (height / (height * zoom))),\n  }\n}\n\nconst findIndexByElement = (elmt: HTMLElement) => {\n  const parentElement = elmt.parentElement as HTMLElement;\n  const arr = Array.from(parentElement.childNodes);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === elmt) return i;\n  }\n  return -1;\n}\n\n// my code\n\nconst getPortPosWithZoom = (size:{width: number, height: number}, pos: pos, zoom: number) => {\n  const canvas = handler.getCanvasInfo();\n  const widthZoom = (canvas.width / (canvas.width * zoom)) || 0;\n  const heightZoom = (canvas.height / (canvas.height * zoom)) || 0;\n  const x = size.width / 2 + (pos.x - canvas.x) * widthZoom;\n  const y = size.height / 2 + (pos.y - canvas.y) * heightZoom;\n\n  return { x, y };\n}\n\nconst handler = {\n  createCurvature,\n  getCanvasInfo,\n  getPos,\n  findIndexByElement,\n  getPortPosWithZoom,\n}\n\nexport default handler\n","import { current } from \"@reduxjs/toolkit\";\nimport { getPortListByNodeId } from \"../components/drawflowHandler\";\nimport { addConnectionType, moveNodeType, node, port, pos, stateData } from \"../types\";\n\nexport class Flow {\n    // readonly because we are using only immer.js with redux-toolkit\n    public readonly state: stateData\n    public readonly nodes: { [id: number]: Node } = {}\n    public readonly distanceToConnect = 100\n    public readonly distanceToDisconnect = 0\n\n    constructor(state: stateData) {\n        this.state = state\n        const { drawflow } = this.state\n        Object.keys(drawflow).map((id) => this.nodes[Number(id)] = new Node(Number(id), this))\n    }\n\n    get heads() {\n        return []\n    }\n\n    getNode(id: number) {\n        return this.nodes[id]\n    }\n\n    alignAll() {\n        console.log(current(this.state))\n        this.state.drawflow[1].pos.x = 0\n    }\n\n    addConnection({ startId, startPort, endId, endPort }: addConnectionType) {\n        // restric conns\n        if (this.getNode(startId).clildren(startPort).length || this.getNode(endId).parent)\n            return\n\n        const key = `${startId}_${startPort}_${endId}_${endPort}`;\n        const { connections } = this.state;\n\n        // if such connection already exist\n        if (connections[key] !== undefined) return;\n\n        // add connection:\n        connections[key] = []\n    }\n\n    moveNode({ dx, dy, nodeId }: moveNodeType) {\n        // update ports position\n        const { state } = this\n        const portKeys = getPortListByNodeId(nodeId, state)\n        state.ports = portKeys.reduce((acc, portKey) => {\n            acc[portKey] = {\n                x: acc[portKey].x + dx,\n                y: acc[portKey].y + dy,\n            };\n            return acc;\n        }, { ...state.ports });\n\n        // update node position\n        state.drawflow[nodeId].pos.x += dx\n        state.drawflow[nodeId].pos.y += dy\n\n        /**\n         * Attachment\n         * \n         * traverse all other nodes except this one,\n         * check if their ports are free for new conn, check distance\n         */\n\n        const currentNode = this.getNode(nodeId)\n        if (currentNode.parentConnection) {\n            // remove connection\n            delete this.state.connections[currentNode.parentConnection]\n        }\n        const nodeInPortPos = currentNode.portInPos\n        if (!nodeInPortPos) return\n        const portDistances: Array<{ key: string, distance: number }> = []\n        Object.entries(this.nodes).forEach(([id, node]) => {\n            if (Number(id) === nodeId) return\n\n            node.outPorts.forEach(([key, pos]) => {\n                const distance = Math.hypot(nodeInPortPos.x - pos.x, nodeInPortPos.y - pos.y)\n                portDistances.push({ key, distance })\n            })\n        });\n        portDistances.sort((a, b) => (a.distance - b.distance))\n        if (portDistances.length) {\n            const nearestPort = portDistances[0]\n            if (nearestPort.distance < this.distanceToConnect) {\n                // set state to\n                this.state.portToConnect = nearestPort.key\n            } else {\n                this.state.portToConnect = undefined\n            }\n        }\n    }\n\n    setLaneNumbers() {\n\n    }\n}\n\nclass Node {\n    public readonly id: number\n    private readonly state: stateData\n    public readonly flow: Flow\n    public readonly nodeState: node\n\n    constructor(id: number, flow: Flow) {\n        this.id = id\n        this.flow = flow\n        this.state = flow.state\n        this.nodeState = this.state.drawflow[this.id]\n    }\n\n    get port(): port {\n        return this.nodeState.port\n    }\n\n    get portInPos(): pos | undefined {\n        return Object.entries(this.state.ports).find(([key, value]) => key === `${this.id}_in_1`)?.[1]\n    }\n\n    get outPorts() {\n        return Object.entries(this.state.ports).filter(([key, pos]) => key.startsWith(`${this.id}_out`))\n    }\n\n    get parent(): Node | null {\n        const parentId = Object.keys(this.state.connections).find(key => key.split('_')[2] === this.id.toString())?.split('_')[0]\n        return parentId ? this.flow.getNode(Number(parentId)) : null\n    }\n\n    get parentConnection() {\n        return Object.keys(this.state.connections).find((key) => {\n            const arr = key.split('_').map(Number)\n            return arr[0] === this.parent?.id && arr[2] === this.id && arr[3] === 1\n        })\n    }\n\n    clildren(portId: number) {\n        return Object.keys(this.state.connections)\n            .filter(key => key.split('_')[0] === this.id.toString() && key.split('_')[1] === portId.toString())\n            .map(conn => this.flow.getNode(Number((conn.split('_')[2]))))\n    }\n\n    get out1() {\n        return this.clildren(1);\n    }\n\n    get firstSubnode() {\n        return this.clildren(2)[0];\n    }\n\n    get subnodes() {\n        const { flowLine } = this;\n        return flowLine ? flowLine.flowLineNodes : []\n    }\n\n    get isSub(): boolean {\n        let parent = this.parent\n        if (parent) {\n            if (parent.firstSubnode === this) return true\n            return parent.isSub\n        }\n        return false\n    }\n\n    get complexParentNode() {\n        // if is sub eturn complexNode to which belongs this subnode\n        return null\n    }\n\n    /**\n     * If not flow line, - returns null\n     */\n    get flowLine(): null | { flowLineNodes: Node[], hasSubnodes: Node } {\n        const flowLineNodes = [];\n        let node: Node = this;\n        let hasSubnodes = node.firstSubnode;\n\n        while (node.out1.length === 1) {\n            flowLineNodes.push(node);\n            hasSubnodes = hasSubnodes || node.firstSubnode;\n            node = node.out1[0]\n        }\n\n        return (node.out1.length > 1) ? null : { flowLineNodes, hasSubnodes };\n    }\n\n    get height() {\n        return this.state.drawflow[this.id].height\n    }\n    get width() {\n        return this.state.drawflow[this.id].width\n    }\n\n    get data() {\n        return {}\n    }\n\n    get pos() {\n        return this.state.drawflow[this.id].pos\n    }\n\n    setPos(newPos: pos) {\n        const { pos } = this;\n        const { x, y } = newPos;\n        this.flow.moveNode({ nodeId: this.id, dx: x - pos.x, dy: y - pos.y })\n    }\n}\n\n// export class AppNode extends Node {\n//     get prev_node_unique_id() {\n//         return 2;\n//     }\n//     get this_node_unique_id() {\n//         return 2;\n//     }\n//     get next_node_unique_id() {\n//         return 2;\n//     }\n\n// }","import { createSlice, PayloadAction, createAsyncThunk, current } from '@reduxjs/toolkit'\nimport handler, { getPortListByNodeId } from '../components/drawflowHandler'\nimport { testNode } from '../Mock'\nimport { dataNode, connections, drawflow, node, ports, pos, Slices, stateData, clientPos, flowType, addConnectionType, loadType, moveNodeType } from '../types'\nimport { Flow } from './Node'\nimport type { RootState } from './store'\n\nexport const initialState: stateData = {\n  nodeId: 1,\n  canvasDrag: false,\n  config: {\n    drag: false,\n    connectionsLabelEnable: false,\n    canvasTranslate: {\n      x: 0,\n      y: 0,\n    },\n    zoom: {\n      value: 1,\n      max: 2,\n      min: 0.5,\n      tick: 0.1,\n    },\n  },\n  drawflow: {},\n  connections: {},\n  connectionsLabel: {},\n  ports: {},\n  select: null,\n  selectId: null,\n  selectPath: null,\n  showButton: null,\n  newPathDirection: null,\n  modalType: null,\n  editLock: false,\n  mouseBlockDragPos: { clientX: undefined, clientY: undefined },\n}\n\nexport const addNode = (state: stateData, payload: dataNode) => {\n  state.drawflow[state.nodeId] = { ...payload, id: state.nodeId, height: 0, width: 0 }\n  state.selectId = state.nodeId++\n  state.select = { type: 'node', selectId: state.selectId }\n  state.config.drag = true\n}\n\n// load version from server\n\nconst load = (state: stateData, { payload }: PayloadAction<loadType>) => {\n  Object.assign(state, initialState)\n  state.drawflow = payload.drawflow\n  state.nodeId = Object.keys(payload.drawflow).length + 1\n  state.connections = payload.connections\n  return state\n}\n\nconst align = (state: stateData) => {\n  const flow = new Flow(state)\n  // const { isSub, id } = flow.getNode(1)\n  console.log(flow.getNode(1).isSub)\n\n}\nconst setLaneNumbers = (state: stateData) => {\n  // iterate over nodes and add to state numbers(id, position, lane, etc: then this data will be rendered in every node)\n}\n\n\nconst slice = createSlice({\n  name: Slices.Drawflow,\n  initialState,\n  reducers: {\n    setEditLock: (state, { payload }: PayloadAction<boolean>) => {\n      state.editLock = payload\n    },\n    align,\n    addNode: (state: stateData, { payload }: PayloadAction<dataNode>) => addNode(state, payload),\n    moveNode: (state, action: PayloadAction<moveNodeType>) => (new Flow(state)).moveNode(action.payload),\n    setMouseBlockDragPos: (state: stateData, { payload }: PayloadAction<clientPos>) => {\n      state.mouseBlockDragPos = payload\n    },\n    unSelect: (state) => {\n      state.config.drag = false\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    select: (state, { payload }: PayloadAction<{ type: 'node' | 'path' | 'input' | 'output', portId?: number, selectId?: string | number }>) => {\n      const { type, selectId } = payload;\n      state.config.drag = type === 'node'\n      state.select = payload\n      state.selectId = selectId ?? null;\n    },\n    moveCanvas: (state, { payload: { movementX, movementY } }: PayloadAction<{ movementX: number, movementY: number }>) => {\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n      }\n    },\n    canvasDrag: (state, { payload }: PayloadAction<boolean>) => {\n      state.canvasDrag = payload\n    },\n    canvasMouseMove: (state, { payload: { movementX, movementY, clientX, clientY } }: PayloadAction<{ clientX: number, clientY: number, movementX: number, movementY: number }>) => {\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n      } else if (state.select?.type === 'output') {\n        state.newPathDirection = { clientX, clientY }\n      } else if (state.config.drag && typeof state.selectId === 'number') {\n        // move node\n        const nodeId = state.selectId\n        const { clientX: prevX, clientY: prevY } = state.mouseBlockDragPos as clientPos\n        state.mouseBlockDragPos = { clientX, clientY }\n        const coef = (state.config.zoom.value)\n        const dx = (clientX - prevX) / coef\n        const dy = (clientY - prevY) / coef;\n        (new Flow(state)).moveNode({ nodeId, dy, dx })\n      }\n    },\n    canvasMouseUp: (state) => {\n      const flow = new Flow(state)\n      if (state.portToConnect) {\n        const [startId, _, startPort] = state.portToConnect.split('_').map(v => Number(v))\n        const endId = Number(state.selectId)\n        const endPort = 1\n        flow.addConnection({startId, startPort, endId, endPort})\n      }\n      state.portToConnect = undefined\n      state.newPathDirection = null\n      state.canvasDrag = false\n      state.config.drag = false\n      if (state.select?.type === 'output') {\n        state.select = null\n      }\n      // ().alignAll()\n    },\n    deleteNode: (state) => {\n      const { connections, drawflow, ports, selectId } = state;\n      if (!selectId || (typeof selectId !== 'number')) return;\n\n      // 1. find in connections\n      Object.keys(connections).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId || arr[2] * 1 === selectId) {\n          delete connections[val];\n        }\n        return null;\n      }, null);\n      // 2. find in ports\n      Object.keys(ports).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId) {\n          delete ports[val];\n        }\n        return null;\n      }, null);\n      // 3. find in drawflow\n      delete drawflow[selectId];\n\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    deletePath: (state) => {\n      const { selectId, connections } = state\n      if (typeof selectId === 'string')\n        delete connections[selectId];\n    },\n    load,\n    addConnection: (state, action: PayloadAction<addConnectionType>) => {\n      const flow = new Flow(state)\n      flow.addConnection(action.payload)\n    },\n    clear: () => initialState,\n    pushPorts: (state, { payload }: PayloadAction<ports>) => {\n      state.ports = { ...state.ports, ...payload }\n    },\n    zoom: (state, { payload }: PayloadAction<boolean | null>) => {\n      const { zoom } = state.config;\n      const { value, max, min, tick } = zoom\n      const newValue = value + (payload ? tick : -tick)\n      if (newValue <= max && newValue >= min) {\n        zoom.value = newValue\n      }\n      if (payload === null) {\n        state.config.canvasTranslate = { x: 0, y: 0 }\n        zoom.value = 1\n      }\n    },\n    nodeSize: (state, { payload: { height, width, id } }: PayloadAction<{ id: number, height: number, width: number }>) => {\n      state.drawflow[id].height = height\n      state.drawflow[id].width = width\n    }\n  },\n})\n\nexport const actions = slice.actions\nexport const drawflowSlice = slice.reducer\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectActiveDrawflow = (state: RootState) => state.flows[state.version]\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import Circle from \"./Circle\"\nimport Path from \"./Path\"\n\nconst Connection = {\n    Circle,\n    Path\n}\n\nexport default Connection\n","import { MouseEvent } from \"react\";\n\nconst CircleComponent = (props: any) => {\n    const { property, svgKey, i, editLock } = props;\n\n    const onMouseDown = (e: MouseEvent) => {\n        if (editLock) return;\n        props.select(e, {\n            svgKey,\n            i,\n        });\n    }\n\n    return (\n        <circle\n            {...property}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"point\"\n            r={6}\n            onMouseDown={onMouseDown}\n        />\n    );\n}\n\nexport default CircleComponent;\n","import { MouseEvent } from \"react\";\nimport { actions, selectActiveDrawflow } from '../../redux/drawflowSlice'\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks'\n\ntype Props = {\n    svgKey?: string,\n    d: string,\n}\n\nconst Path = (props: Props) => {\n    const { svgKey, d } = props;\n    const state = useAppSelector(selectActiveDrawflow)\n    const { selectId } = state;\n    const dispatch = useAppDispatch()\n\n\n    const className = \"main-path \" + ((selectId === svgKey && svgKey) ? 'select' : '')\n\n    return <path\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className={className}\n        d={d}\n        onMouseDown={(e) => {\n            e.stopPropagation()\n            // if (editLock) return;\n            dispatch(actions.select({ type: 'path', selectId: svgKey }))\n        }}\n    ></path>\n\n}\n\nexport default Path;\n","export const Grabme = () => (<svg width=\"11\" height=\"16\" viewBox=\"0 0 11 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle cx=\"2.22798\" cy=\"1.45455\" r=\"1.45455\" fill=\"#CED0D7\" />\n    <circle cx=\"8.77486\" cy=\"1.45455\" r=\"1.45455\" fill=\"#CED0D7\" />\n    <circle cx=\"2.22798\" cy=\"14.5454\" r=\"1.45455\" fill=\"#CED0D7\" />\n    <circle cx=\"8.77486\" cy=\"14.5454\" r=\"1.45455\" fill=\"#CED0D7\" />\n    <circle cx=\"2.22798\" cy=\"8.00044\" r=\"1.45455\" fill=\"#CED0D7\" />\n    <circle cx=\"8.77486\" cy=\"8.00044\" r=\"1.45455\" fill=\"#CED0D7\" />\n</svg>)\n\nexport const More = () => (<svg width=\"12\" height=\"3\" viewBox=\"0 0 12 3\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle cx=\"1.2\" cy=\"1.2\" r=\"1.2\" fill=\"#C5C5D0\" />\n    <circle cx=\"5.9998\" cy=\"1.2\" r=\"1.2\" fill=\"#C5C5D0\" />\n    <circle cx=\"10.7996\" cy=\"1.2\" r=\"1.2\" fill=\"#C5C5D0\" />\n</svg>)","import { useState } from \"react\"\nimport { Grabme, More } from \"../../svg\"\n\nconst Common = (props: object) => {\n    const [s, setS] = useState(props)\n    return <div className=\"node-block\" >\n        {JSON.stringify(s, null, 2)}\n    </div>\n}\n\ntype Props = {\n    imgSrc: string,\n    setImgSrc: (imgSrc: string) => void,\n    name: string,\n    description: string\n}\n\nconst Round = (props: Props) => {\n    const { imgSrc, name, description } = props;\n    return (\n        <div className=\"blockelem create-flowy\">\n            <div className=\"grabme\">\n                <Grabme />\n            </div>\n            <div className=\"blockin\">\n                <div className=\"blockico\">\n                    <span></span>\n                    <img src={imgSrc} alt={name + '\\n' + description} />\n                </div>\n                <div className=\"blocktext\">\n                    <p className=\"blocktitle\">{name}</p>\n                    <div className=\"side-elem-more\">\n                        <More />\n                    </div>\n                    <p className=\"blockdesc\">{description}</p>\n                </div>\n            </div>\n        </div>)\n}\n\nconst NodeComponent = {\n    Common,\n    Round,\n};\n\nexport default NodeComponent\n","import { useEffect, useState, useRef, } from \"react\";\nimport { node, ports, portType } from \"../types\";\nimport handler from \"./drawflowHandler\";\n\nimport { actions, selectActiveDrawflow } from '../redux/drawflowSlice'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport NodeComponent from \"./NodeComponents\";\n\n\nconst DrawflowNodeBlock = ({ id }: { id: number }) => {\n    const { portToConnect, nodeId, selectId, select, ports, config, drawflow: { [id]: node } } =\n        useAppSelector(selectActiveDrawflow)\n    const dispatch = useAppDispatch()\n    const { port, pos } = node;\n    const { zoom } = config\n\n    const [refs, setRefs] = useState({\n        inputs: [],\n        outputs: [],\n    });\n    const ref = useRef<HTMLDivElement>(null);\n\n    const portComponent = (type: portType) => {\n        let arr = [];\n\n        for (let i = 1; i <= port[type]; i++) {\n            const key = `${type}put-${i}`;\n            const portKey = `${id}_${type}_${i}`\n            const port =\n                <div\n                    onMouseDown={(e) => {\n                        e.stopPropagation()\n                        dispatch(actions.select({\n                            type: (type + 'put') as ('input' | 'output'),\n                            portId: i,\n                            selectId: node.id\n                        }))\n                    }}\n                    key={key}\n                    className={`${type}put ${key} ${portKey}`}\n                    onMouseUp={e => {\n                        if (type !== \"in\" || typeof selectId !== \"number\" || !select?.portId) return\n                        const endId = node.id\n                        const endPort = i\n                        const startId = selectId\n                        const startPort = select.portId;\n                        // if connect to same node\n                        if (startId === endId) return\n                        dispatch(actions.addConnection({ startId, startPort, endId, endPort }))\n                    }}\n                >\n                    <div className={`indicator ${(portToConnect === portKey && ' ') || 'invisible'}`}></div>\n                </div>;\n            arr.push(port);\n        }\n\n        return (\n            <div className={`${type}puts`}>\n                {arr}\n            </div>\n        );\n    }\n\n    useEffect(() => {\n        if (ref.current) {\n            //@ts-ignore\n            const inputs = Array.from(ref.current.querySelector(\".inputs\").children);\n            //@ts-ignore\n            const outputs = Array.from(ref.current.querySelector(\".outputs\").children);\n            //@ts-ignore\n            setRefs({ inputs, outputs, });\n\n            const { offsetHeight, offsetWidth } = ref.current\n            dispatch(actions.nodeSize({ height: offsetHeight, width: offsetWidth, id }))\n        }\n    }, [ref]);\n\n    \n\n    const getPortPos = (type: portType, i: number, elmt: HTMLElement) => {\n        const key = `${id}_${type}_${i}`;\n        if (!ports[key]) {\n            const rect = elmt.getBoundingClientRect();\n            const size = {\n                width: elmt.offsetWidth,\n                height: elmt.offsetHeight,\n            };\n            const pos = {\n                x: rect.x,\n                y: rect.y,\n            };\n            return {\n                [key]: handler.getPortPosWithZoom(size, pos, zoom.value),\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (refs.inputs && refs.outputs && port.in === refs.inputs.length && port.out === refs.outputs.length) {\n            let newPorts = {};\n            newPorts = Object.assign(newPorts, refs.inputs.reduce((acc, elmt, i) => {\n                return Object.assign(acc, getPortPos(\"in\", i + 1, elmt));\n            }, {}));\n            newPorts = Object.assign(newPorts, refs.outputs.reduce((acc, elmt, i) => {\n                return Object.assign(acc, getPortPos(\"out\", i + 1, elmt));\n            }, {}));\n            dispatch(actions.pushPorts(newPorts))\n        }\n    }, [dispatch, port, refs]);\n\n    useEffect(() => {\n        // when add new node shift it to left and up\n        if (ref.current && nodeId - 1 === id && config.drag) {\n            const { offsetHeight, offsetWidth } = ref.current\n            dispatch(actions.moveNode({ nodeId: id, dx: -offsetWidth * 0.2, dy: -offsetHeight * 0.2 }))\n        }\n    }, [])\n\n    return <div\n        ref={ref}\n        className={`node-${id} drawflow-node-block-default` + (selectId === id ? ' select' : '')}\n        style={{\n            top: pos.y + \"px\",\n            left: pos.x + \"px\",\n            cursor: \"move\",\n        }}\n        onMouseDown={e => {\n            e.stopPropagation()\n            const { clientX, clientY } = e\n            dispatch(actions.select({ type: 'node', selectId: id }))\n            dispatch(actions.setMouseBlockDragPos({ clientX, clientY }))\n        }}\n        onContextMenu={e => {\n            // TODO show delete button\n        }}\n        onDoubleClick={() => {\n            // show node settings\n        }}\n    >\n        {portComponent(\"in\")}\n        <div\n            className=\"drawflow-node-content\"\n        >\n            <NodeComponent.Common {...node} />\n        </div>\n        {portComponent(\"out\")}\n        {/* <button\n            style={{\n                display: showButton === id ? \"block\" : \"none\"\n            }}\n            className=\"drawflow-delete\"\n            onMouseDown={(e) => { e.stopPropagation(); event.deleteNode() }}\n        >X</button> */}\n    </div>\n\n\n}\n\nexport default DrawflowNodeBlock;\n","const makeRandomNames = (length: number, searchWord: string, max = 15, min = 5) => {\n    const result = [];\n    const map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let j = 0; j < length; j++) {\n        let word = \"\";\n        for (let i = 0; i < Math.floor(Math.random() * (max - min) + min); i++) {\n            word += map.charAt(Math.floor(Math.random() * map.length));\n        }\n        if (searchWord.length > 1) {\n            word += searchWord;\n        }\n        result.push(word);\n    }\n    return result;\n}\n\nconst getGroups = async (number: number) => {\n    const rnd = () => ({\n        type: 'Asd',\n        name: 'assa',\n        value: makeRandomNames(1, \"\", 10, 5)[0],\n    })\n    const rez = []\n    for (let i = 0; i < number; ++i) {\n        rez.push(rnd())\n    }\n    return rez;\n}\n\nexport default getGroups","import { NODE_TYPE } from \"../types\";\nimport getDummy from \"./dummy.mock\";\nimport getFilters from \"./fields.mock\";\n\nconst mock = {\n    getDummy,\n    getFilters,\n}\n\nexport default mock\nexport const testNode = () => {\n    return {\n        \"type\": NODE_TYPE.MIDDLE,\n        \"data\": {\n            \"type\": \"String\",\n            \"name\": \"1qdlCNXqYBsE\",\n            \"value\": \"qqweee\"\n        },\n        \"port\": {\n            \"in\": 1,\n            \"out\": 2\n        },\n        \"pos\": {\n            \"x\": -20,\n            \"y\": 100\n        },\n    }\n}","import { data } from \"../types\"\nimport { NODE_TYPE } from \"../types\"\n\nconst getData =  async (): Promise<data> => {\n  return {\n    \"nodes\": {\n      \"1\": {\n        \"id\": 1,\n        \"type\": NODE_TYPE.MIDDLE,\n        \"data\": {\n          \"type\": \"Numeric\",\n          \"name\": \"HLuF7rwKIuD\",\n          \"value\": \"asdf\"\n        },\n        \"port\": {\n          \"in\": 1,\n          \"out\": 2\n        },\n        \"pos\": {\n          \"x\": 43.3125,\n          \"y\": 14\n        },\n        \"height\": 0,\n        \"width\": 0,\n      },\n      \"2\": {\n        \"id\": 2,\n        \"type\": NODE_TYPE.MIDDLE,\n        \"data\": {\n          \"type\": \"String\",\n          \"name\": \"y24mqVYQtD\",\n          \"value\": \"eeee\"\n        },\n        \"port\": {\n          \"in\": 1,\n          \"out\": 2\n        },\n        \"pos\": {\n          \"x\": 469.3125,\n          \"y\": 286\n        },\n        \"height\": 0,\n        \"width\": 0,\n      },\n      \"3\": {\n        \"id\": 3,\n        \"type\": NODE_TYPE.MIDDLE,\n        \"data\": {\n          \"type\": \"String\",\n          \"name\": \"y24mqVYQtD\",\n          \"value\": \"asdffff\"\n        },\n        \"port\": {\n          \"in\": 1,\n          \"out\": 2\n        },\n        \"pos\": {\n          \"x\": 436.8125,\n          \"y\": 92\n        },\n        \"height\": 0,\n        \"width\": 0,\n      },\n      \"4\": {\n        \"id\": 4,\n        \"type\": NODE_TYPE.MIDDLE,\n        \"data\": {\n          \"type\": \"String\",\n          \"name\": \"1qdlCNXqYBsE\",\n          \"value\": \"qqweee\"\n        },\n        \"port\": {\n          \"in\": 1,\n          \"out\": 2\n        },\n        \"pos\": {\n          \"x\": 36.3125,\n          \"y\": 209\n        },\n        \"height\": 0,\n        \"width\": 0,\n      }\n    },\n    \"connections\": {\n      \"1_1_3_1\": [\n        {\n          \"x\": 327.3125,\n          \"y\": 327\n        }\n      ],\n      \"4_1_2_1\": [\n        {\n          \"x\": 323.3125,\n          \"y\": 57\n        }\n      ]\n    },\n  }\n}\n\nexport default getData","import { configureStore, createAction, createAsyncThunk, createReducer, PayloadAction } from '@reduxjs/toolkit'\nimport { clientPos, flowType, Slices, stateData } from '../types'\nimport { addNode, drawflowSlice } from './drawflowSlice'\nimport mock, { testNode } from '../Mock'\nimport { initialState as drawflowInitialState } from './drawflowSlice'\nimport handler from '../components/drawflowHandler'\n\nexport const changeVersion = createAction<number>('versions/changed')\nexport const addNewNode = createAction<clientPos>('addNewNode')\nexport const dragTemplate = createAction<number>('dragTemplate')\n\nconst initialState: flowType = {\n  version: 0,\n  flows: [drawflowInitialState, drawflowInitialState, drawflowInitialState],\n  templates: [],\n  dragTemplate: 0\n}\n\nexport const fetchNodeTemplates = createAsyncThunk('fetchPosts', async () => {\n  return await mock.getFilters(5)\n})\n\nexport const fetchFlowVersion = createAsyncThunk('fetchFlowVersion', async () => {\n  return await mock.getDummy()\n})\n\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(changeVersion, (state, { payload }) => {\n      state.version = payload\n    })\n    .addCase(addNewNode, (appState: flowType, { payload: { clientX, clientY } }: PayloadAction<clientPos>) => {\n      if (!appState.dragTemplate) return;\n\n      const state = appState.flows[appState.version]\n      const node = testNode()\n      node.pos = handler.getPos(clientX, clientY, state.config.zoom.value)\n      state.mouseBlockDragPos = { clientX, clientY };\n      addNode(state, node)\n      appState.dragTemplate = undefined\n    })\n    .addCase(dragTemplate, (appState, {payload}) => {\n      appState.dragTemplate = payload\n    })\n    .addCase(fetchNodeTemplates.fulfilled, (state, action) => {\n      state.templates = action.payload\n    })\n    .addCase(fetchFlowVersion.fulfilled, (state, action) => {\n      const { nodes: drawflow, connections } = action.payload;\n      state.flows[state.version] = drawflowSlice(\n        state.flows[state.version],\n        {\n          type: Slices.Drawflow + '/load',\n          payload: { drawflow, connections }\n        })\n    })\n\n    // reducer for drawflow\n    .addMatcher(\n      (action) => action.type.startsWith(Slices.Drawflow),\n      (state, action) => {\n        state.flows[state.version] = drawflowSlice(state.flows[state.version], action)\n      }\n    )\n\n\n})\n\nexport const store = configureStore({\n  reducer\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\n// store.subscribe(() => console.log(store.getState()))","import { actions, selectActiveDrawflow } from \"../../redux/drawflowSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\n\nconst DrawflowAdditionalArea = () => {\n    const editLock = useAppSelector(s => selectActiveDrawflow(s).editLock)\n    const dispatch = useAppDispatch()\n\n    return (\n        <div className=\"drawflow-additional\">\n            {!editLock &&\n                <>\n                    <button className=\"drawflow-additional-button\" onClick={() => console.log('clear')}>Clear</button>\n                </>\n            }\n            <button className=\"drawflow-additional-button\" onClick={() => dispatch(actions.setEditLock(!editLock))}>{editLock ? \"UnLock\" : \"Lock\"}</button>\n        </div>\n    );\n}\n\nexport default DrawflowAdditionalArea;\n","import { actions } from \"../../redux/drawflowSlice\";\nimport { useAppDispatch } from \"../../redux/hooks\";\n\nconst DrawflowZoomArea = () => {\n    const dispatch = useAppDispatch()\n\n    return (\n        <div className=\"drawflow-zoom\">\n            <button className=\"drawflow-zoom-button\" onClick={() => dispatch(actions.zoom(true))}>+</button>\n            <button className=\"drawflow-zoom-button\" onClick={() => dispatch(actions.zoom(false))}>-</button>\n            <button className=\"drawflow-zoom-button\" onClick={() => dispatch(actions.zoom(null))}>reset</button>\n        </div>\n    )\n}\n\nexport default DrawflowZoomArea;\n","import handler from \"./drawflowHandler\"\nimport { actions, selectActiveDrawflow } from '../redux/drawflowSlice'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport Connection from \"./Connection\";\nimport DrawflowNodeBlock from \"./DrawflowNodeBlock\";\nimport { useEffect } from \"react\";\nimport { addNewNode, fetchFlowVersion } from \"../redux/store\";\nimport DrawflowAdditionalArea from \"./ButtonArea/DrawflowAdditionalArea\";\nimport DrawflowZoomArea from \"./ButtonArea/DrawflowZoomArea\";\nimport { testNode } from \"../Mock\";\n\nexport const NewPath = () => {\n    const state = useAppSelector(selectActiveDrawflow)\n\n    const { select, config, ports, selectId, newPathDirection } = state;\n    if (!select?.portId) { console.error(`Select port id not set!`); return null }\n    const startKey = `${selectId}_out_${select.portId}`;\n\n    if (!ports[startKey]) { console.error(`Start port key not exist`); return null }\n    if (!newPathDirection) { console.error(`Path direction null`); return null }\n\n    const start = {\n        x: ports[startKey].x,\n        y: ports[startKey].y,\n    }\n    const zoom = config.zoom.value;\n    const { clientX, clientY } = newPathDirection;\n    const end = handler.getPos(clientX, clientY, zoom);\n    const d = handler.createCurvature(start, end, \"openclose\");\n\n    return <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"drawflow-connection\"\n    >\n        <Connection.Path\n            d={d}\n        />\n    </svg>\n\n}\n\nexport const ConnectionList = () => {\n    const { connections, ports } = useAppSelector(selectActiveDrawflow)\n\n    const conns = Object.entries(connections).map(([key]) => {\n        // key: fromId_portNum_toId_portNum\n        const arr = key.split(\"_\");\n        const startKey = `${arr[0]}_out_${arr[1]}`;\n        const endKey = `${arr[2]}_in_${arr[3]}`;\n\n        if (!ports[startKey] || !ports[endKey]) {\n            // console.error(`No such connection`, key);\n            return null\n        };\n\n        const start = {\n            x: ports[startKey].x,\n            y: ports[startKey].y,\n        }\n        const end = {\n            x: ports[endKey].x,\n            y: ports[endKey].y,\n        }\n        const d = handler.createCurvature(start, end, \"openclose\")\n        return <div key={key}>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"drawflow-connection\"\n            >\n                <Connection.Path\n                    svgKey={key}\n                    d={d}\n                />\n            </svg>\n        </div>\n\n    })\n    return <>{conns}</>\n}\n\nexport const NodeList = () => {\n    const drawflow = useAppSelector(s => selectActiveDrawflow(s).drawflow)\n\n    return <>{Object.values(drawflow).map((node) => {\n        return <DrawflowNodeBlock\n            // updateRef={(elem: HTMLElement) => {\n            //     this.nodeRefs[node.id] = elem\n            // }}\n            key={node.id}\n            id={node.id}\n        />\n    }\n    )}</>\n}\n\n\nexport const Drawflow = () => {\n    const { select, config: { canvasTranslate: { x, y }, zoom }, newPathDirection }\n        = useAppSelector(selectActiveDrawflow)\n\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        dispatch(fetchFlowVersion())\n    }, [])\n\n    useEffect(() => {\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === \"Delete\") {\n                if (select?.type === \"path\") {\n                    dispatch(actions.deletePath())\n                }\n                else {\n                    dispatch(actions.deleteNode())\n                }\n            }\n        }\n        document.addEventListener(\"keydown\", handleKeyDown);\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyDown);\n        }\n    }, [dispatch, select?.type])\n\n\n    return (\n        <div\n            id=\"drawflow\"\n            className=\"parent-drawflow\"\n            onMouseDown={(e) => {\n                if (!e.currentTarget.classList.contains(\"parent-drawflow\")) return;\n                dispatch(actions.canvasDrag(true))\n                dispatch(actions.unSelect())\n            }}\n            onMouseUp={() => dispatch(actions.canvasMouseUp())}\n            onMouseMove={(e) => {\n                const { clientX, clientY, movementX, movementY } = e\n                dispatch(actions.canvasMouseMove({ clientX, clientY, movementX, movementY }))\n            }}\n            onMouseEnter={(e) => {\n                const { clientX, clientY } = e\n                dispatch(addNewNode({ clientX, clientY }))\n            }}\n        >\n            <DrawflowAdditionalArea />\n            <DrawflowZoomArea />\n            <div\n                className=\"drawflow\"\n                style={{\n                    transform: `translate(${x}px, ${y}px) scale(${zoom.value})`\n                }}\n            >\n                <NodeList />\n                <ConnectionList />\n                {newPathDirection && <NewPath />}\n            </div>\n        </div>\n    )\n}","import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../redux/hooks';\nimport { dragTemplate, fetchNodeTemplates } from '../redux/store';\n\ntype Props = {\n    searchWord: string\n}\n\nconst FilterList = (props: Props) => {\n    const { searchWord } = props;\n    const list = useAppSelector(s => s.templates)\n    const dispatch = useAppDispatch()\n    const searchArr = searchWord.toLowerCase().split(\" \").filter(item => item.length > 0);\n\n\n    useEffect(() => {\n        dispatch(fetchNodeTemplates())\n    }, [dispatch])\n\n    return (\n        <div\n            className=\"drawflow-node-list-wrap\"\n        >\n            {list.map((item, idx) => {\n                const { name, type, value } = item\n                const label = JSON.stringify(item, null, 2)\n\n                return (\n                    (searchArr.find(word => label.toLowerCase().includes(word)) || !searchArr.length) &&\n                    <div\n                        key={\"drawflow-sidemenu-block-\" + idx}\n                        className=\"drawflow-node-block\"\n                        onMouseDownCapture={(e) => {\n                            dispatch(dragTemplate(1))\n                        }}\n                    >\n                        <pre>{`Type: ${type}\\nValue: ${value + name}`}</pre>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default FilterList;\n","import { useState } from 'react';\nimport { Drawflow } from './components/DrawflowHook';\nimport FilterList from \"./components/FilterList\";\nimport { useAppDispatch } from './redux/hooks';\nimport { changeVersion, fetchFlowVersion } from './redux/store';\n\nimport './drawflow.scss'\nimport { actions } from './redux/drawflowSlice';\n\nfunction App() {\n\n  const [searchWord, setSearchWord] = useState(\"\");\n  const dispatch = useAppDispatch()\n\n  return (\n    <div className=\"App\">\n      <div className=\"drawflow-node-list\">\n        <div className=\"drawflow-node-list-search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search templates\"\n            onChange={e => { setSearchWord(e.target.value) }}\n          />\n        </div>\n        <div className=\"drawflow-node-list-flex\">\n          <FilterList\n            searchWord={searchWord}\n          />\n        </div>\n      </div>\n      <div className=\"flow\">\n        <div>\n          <button onClick={() => dispatch(fetchFlowVersion())}>Fetch flow version</button>\n\n          <button onClick={() => dispatch(changeVersion(0))}>Version 1</button>\n          <button onClick={() => dispatch(changeVersion(1))}>Version 2</button>\n          <button onClick={() => dispatch(changeVersion(2))}>Version 3</button>\n          <button onClick={() => dispatch(actions.align())}>Align</button>\n        </div>\n        <Drawflow />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}