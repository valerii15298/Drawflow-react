{"version":3,"sources":["types.ts","components/drawflowHandler.ts","redux/Node.ts","redux/Flow.ts","redux/drawflowSlice.ts","redux/hooks.ts","Mock/fields.mock.ts","Mock/index.ts","redux/store.ts","components/DrawflowAdditionalArea.tsx","components/DrawflowZoomArea.tsx","components/Path.tsx","redux/selectors.tsx","components/NewPath.tsx","components/NodeComponents.tsx","styles.ts","components/Ports.tsx","components/DrawflowNodeBlock.tsx","components/NodeList.tsx","components/ConnectionList.tsx","components/DrawflowHook.tsx","components/FilterList.tsx","App.tsx","index.tsx"],"names":["NODE_TYPE","Slices","getCanvasInfo","canvas","document","querySelector","canvasRect","getBoundingClientRect","x","y","width","clientWidth","height","clientHeight","handler","createCurvature","start","end","halfHeiht","dx","getPos","clientX","clientY","zoom","findIndexByElement","elmt","parentElement","arr","Array","from","childNodes","i","length","getPortPosWithZoom","size","pos","coef","MODAL_TYPE","portType","Node","id","flow","state","nodeState","spacingX","spacingY","this","drawflow","head","lane","port","Object","entries","ports","find","key","filter","startsWith","parentId","keys","connections","split","toString","getNode","Number","map","parent","visible","Math","max","subnodesWidth","leftWidth","rightWidth","out1","totalWidth","forEach","node","update","isSub","out","xPos","setPos","alignChildren","subnodes","subNode","childrenTotalWidth","selfLeftWidth","leftChildWidth","childrenRightWidth","selfRightWidth","rightChildWidth","successors","push","allSuccessors","parentConnection","outConnections","connKey","visibility","childrenVisibility","includes","toggleVisibility","subnodesVisibility","portId","conn","children","firstSubnode","flowLine","flowLineNodes","reduce","acc","complexParentNode","hasSubnodes","newPos","moveNode","nodeId","dy","data","newData","lodash","merge","assign","Flow","nodes","distanceToConnect","distanceToDisconnect","el","setLaneNumbers","heads","startId","startPort","endId","nodeIn","nodeOut","connectAsSub","endPort","nextNode","keyToDelete","lastNode","keyToCreate","toggleAvailablePortToConnect","now","Date","computing","config","drag","currentNode","currentNodeHead","alignAll","nodeInPortPos","portInPos","portDistances","outPorts","distance","hypot","sort","a","b","nearestPort","shift","portToConnect","undefined","laneNodes","nextLaneNodes","nextNodes","console","error","laneNumber","values","positionNumber","initialState","canvasDrag","connectionsLabelEnable","canvasTranslate","value","min","tick","connectionsLabel","select","selectId","selectPath","showButton","newPathDirection","modalType","editLock","mouseBlockDragPos","align","slice","createSlice","name","Drawflow","reducers","setEditLock","payload","action","dragNode","setMouseBlockDragPos","unSelect","type","moveCanvas","movementX","movementY","canvasMouseMove","clientCurrentMousePos","prevX","prevY","canvasMouseUp","v","addConnection","deleteNode","_","val","parseInt","deletePath","load","portMouseUp","PortType","in","clear","pushPorts","newValue","nodeSize","toggleSubnodes","toggleSubnodesVisibility","toggleChildren","toggleChildrenVisibility","copyNode","nodeToCopyId","insertCopiedNode","JSON","parse","stringify","actions","drawflowSlice","reducer","selectActiveDrawflow","flows","version","useAppDispatch","useDispatch","useAppSelector","useSelector","makeRandomNames","searchWord","result","j","word","floor","random","charAt","getGroups","number","rnd","rez","testNode","MIDDLE","mock","getDummy","getFilters","changeVersion","createAction","addNewNode","dragTemplate","drawflowInitialState","templates","fetchNodeTemplates","createAsyncThunk","fetchFlowVersion","createReducer","builder","addCase","appState","fulfilled","addMatcher","store","configureStore","Div","styled","div","Button","button","DrawflowAdditionalArea","s","dispatch","onClick","ZoomArea","DrawflowZoomArea","Svg","svg","StyledPath","path","theme","selected","Path","props","svgKey","d","onMouseDown","e","stopPropagation","createDeepEqualSelector","createSelectorCreator","defaultMemoize","isEqual","usePortPos","useMemo","NewPath","log","startKey","StyledNode","Round","subnodeStyle","Indicator","portStyle","Output1","css","Output2","Input1","styledPorts","Ports","useNodeIsSub","portKey","StyledPort","onMouseUp","className","BlockStyled","DrawflowNodeBlock","useNodePos","useNodeIsSelected","ref","useRef","useNode","useEffect","current","offsetHeight","offsetWidth","getPortPos","getComputedStyle","left","top","inputs","outputs","newPorts","style","onContextMenu","onDoubleClick","NodeList","Connection","endKey","ConnectionList","conns","ParentDrawflow","InnerDrawflow","flowRef","flowDiv","transform","match","tabIndex","onKeyDownCapture","ctrlKey","onMouseMove","onMouseEnter","FilterList","list","searchArr","toLowerCase","item","idx","label","onMouseDownCapture","App","useState","setSearchWord","placeholder","onChange","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e2fbc6b8.chunk.js","sourcesContent":["export enum NODE_TYPE {\n    START = 'START',\n    MIDDLE = 'MIDDLE',\n    END = 'END',\n}\n\nexport enum Slices {\n    Drawflow = 'drawflow'\n}\n\nexport const CURV = 0.3;\n\nexport enum MODAL_TYPE {\n    NODE_SETTINGS = \"NODE_SETTINGS\",\n    GROUP_SETTINGS = \"GROUP_SETTINGS\",\n}\n\nexport enum portType {\n    in = 'in',\n    out = 'out'\n}\n\nexport type pos = {\n    x: number,\n    y: number,\n}\n\nexport type clientPos = {\n    clientX: number,\n    clientY: number,\n}\n\nexport type port = {\n    in: number,\n    out: number,\n}\n\n\n\nexport type ports = {\n    [propName: string]: pos\n}\n\n\n\nexport type block = {\n    name: string,\n    type: string,\n    value: string,\n    create?: boolean\n}\n\n\n\nexport type dataNode = {\n    type: string\n    data: block\n    port: port\n    pos: pos\n    isSub: boolean\n}\n\n\nexport interface node extends dataNode {\n    id: number\n    height: number\n    width: number\n    lane?: number\n    position?: number\n    head?: number\n    positionNumber?: number\n    subnodesVisibility?: boolean\n    childrenVisibility?: boolean\n    visible?: boolean\n    selected?: boolean\n}\n\nexport interface pureNode extends Omit<node, 'pos'> {\n    pos: undefined\n}\n\n\ntype RecursivePartial<T> = {\n    [P in keyof T]?:\n    T[P] extends (infer U)[] ? RecursivePartial<U>[] :\n    T[P] extends object ? RecursivePartial<T[P]> :\n    T[P];\n}\n\nexport type updateNode = RecursivePartial<node>\n\nexport type drawflow = {\n    [id: number]: node\n}\n\nexport type connections = {\n    [propName: string]: boolean\n}\n\nexport type data = {\n    nodes: drawflow,\n    connections: connections,\n    connectionsLabel?: {\n        [propName: string]: string\n    },\n}\n\nexport interface stateData {\n    nodeId: number,\n    canvasDrag: boolean,\n    config: {\n        drag: boolean,\n        connectionsLabelEnable: boolean,\n        canvasTranslate: pos,\n        zoom: {\n            value: number,\n            max: number,\n            min: number,\n            tick: number,\n        },\n    },\n    drawflow: drawflow,\n    modalType: string | null,\n    newPathDirection: clientPos | null,\n    ports: ports,\n    connections: connections,\n    connectionsLabel: {\n        [propName: string]: string\n    },\n    selectId: string | number | null,\n    select: { type: portType | 'node' | 'path', portId?: number, selectId?: string | number } | null,\n    selectPath: string | null,\n    showButton: number | null,\n    editLock: boolean,\n    mouseBlockDragPos: { clientX?: number | undefined, clientY?: number | undefined },\n    portToConnect?: string | undefined\n    nodeToCopyId?: number\n    clientCurrentMousePos?: clientPos\n    computing?: number\n}\n\nexport interface flowType {\n    version: number\n    flows: stateData[]\n    dragTemplate?: number | undefined\n    templates: block[]\n}\n\nexport type addConnectionType = { startId: number, startPort: number, endId: number, endPort: number }\nexport type loadType = { drawflow: drawflow, connections: connections }\nexport type moveNodeType = { dx: number, dy: number, nodeId: number }","import { stateData } from \"../types\";\n\nimport { pos } from \"../types\";\n\nexport const getPortListByNodeId = (nodeId: number, state: stateData) => {\n  const { ports } = state;\n  return Object.keys(ports).filter(key => key.split(/_/g)[0] === \"\" + nodeId);\n}\n\nconst createCurvature = (start: pos, end: pos) => {\n  const halfHeiht = (start.y - end.y) / 2\n  const dx = start.x - end.x\n  return `M ${start.x} ${start.y} v ${-halfHeiht} h ${-dx} v ${-halfHeiht} `\n}\n\nconst getCanvasInfo = () => {\n  const canvas = document.querySelector(\".drawflow\") as HTMLElement;\n  const canvasRect = canvas.getBoundingClientRect();\n  return {\n    x: canvasRect.x,\n    y: canvasRect.y,\n    width: canvas.clientWidth,\n    height: canvas.clientHeight,\n  };\n}\n\nconst getPos = (clientX: number, clientY: number, zoom: number) => {\n  const { x, y, width, height } = getCanvasInfo();\n  return {\n    x: clientX * (width / (width * zoom)) - (x * (width / (width * zoom))),\n    y: clientY * (height / (height * zoom)) - (y * (height / (height * zoom))),\n  }\n}\n\nconst findIndexByElement = (elmt: HTMLElement) => {\n  const parentElement = elmt.parentElement as HTMLElement;\n  const arr = Array.from(parentElement.childNodes);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === elmt) return i;\n  }\n  return -1;\n}\n\nconst getPortPosWithZoom = (size: { width: number, height: number }, pos: pos, zoom: number) => {\n  const canvas = handler.getCanvasInfo();\n  const coef = 1 / zoom\n\n  const x = size.width / 2 + (pos.x - canvas.x) * coef;\n  const y = size.height / 2 + (pos.y - canvas.y) * coef;\n\n  return { x, y };\n}\n\nconst handler = {\n  createCurvature,\n  getCanvasInfo,\n  getPos,\n  findIndexByElement,\n  getPortPosWithZoom,\n}\n\nexport default handler\n","import lodash from \"lodash\"\nimport { node, port, pos, stateData, updateNode } from \"../types\"\nimport { Flow } from \"./Flow\"\n\nexport default class Node {\n    public readonly id: number\n    private readonly state: stateData\n    public readonly flow: Flow\n    public readonly nodeState: node\n    public readonly spacingX = 40\n    public readonly spacingY = 60\n\n    constructor(id: number, flow: Flow) {\n        this.id = id\n        this.flow = flow\n        this.state = flow.state\n        this.nodeState = this.state.drawflow[this.id]\n    }\n\n    get head() {\n        return this.nodeState.head\n    }\n\n    get lane() {\n        return this.nodeState.lane\n    }\n\n    get port(): port {\n        return this.nodeState.port\n    }\n\n    get portInPos(): pos | undefined {\n        return Object.entries(this.state.ports).find(([key, value]) => key === `${this.id}_in_1`)?.[1]\n    }\n\n    get outPorts() {\n        return Object.entries(this.state.ports).filter(([key, pos]) => key.startsWith(`${this.id}_out`))\n    }\n\n    get parent(): Node | null {\n        const parentId = Object.keys(this.state.connections).find(key => key.split('_')[2] === this.id.toString())?.split('_')[0]\n        return parentId ? this.flow.getNode(Number(parentId)) : null\n    }\n\n    get parentConnection() {\n        return Object.keys(this.state.connections).find((key) => {\n            const arr = key.split('_').map(Number)\n            return arr[0] === this.parent?.id && arr[2] === this.id && arr[3] === 1\n        })\n    }\n\n    get totalWidth() {\n        if (this.nodeState.visible === false) return 0\n        const totalWidth = Math.max(this.width + this.subnodesWidth, this.leftWidth + this.rightWidth)\n        return totalWidth\n    }\n\n    get childrenTotalWidth() {\n        const { out1 } = this\n        if (!out1.length) return 0\n\n        let totalWidth = 0\n        out1.forEach(node => {\n            totalWidth += node.totalWidth\n        })\n        return totalWidth + this.spacingX * (out1.length - 1)\n    }\n\n    alignChildren() {\n        const { out1 } = this\n        this.update({ isSub: false, port: { out: 2 } })\n\n\n        let xPos = this.pos.x - (this.leftWidth - this.width / 2)\n\n        for (const node of out1) {\n            const x = xPos + (node.leftWidth - node.width / 2)\n            node.setPos({ x, y: this.pos.y + this.height + this.spacingY })\n            if (node.nodeState.visible !== false) {\n                xPos += node.totalWidth + this.spacingX\n            }\n            node.alignChildren()\n        }\n\n        const { subnodes } = this\n        if (subnodes.length) {\n\n            xPos = this.pos.x + this.width + this.spacingX\n            subnodes.forEach(subNode => {\n                subNode.update({ isSub: true, port: { out: 1 } })\n                subNode.setPos({ x: xPos, y: this.pos.y + (this.height / 2 - subNode.height / 2) })\n                delete this.state.ports[`${subNode.id}_out_2`]\n                xPos += subNode.width + this.spacingX\n            })\n        }\n    }\n\n    get leftWidth(): number {\n        if (this.nodeState.visible === false) return 0\n        const { out1, childrenTotalWidth } = this\n        const selfLeftWidth = this.width / 2\n        if (!out1.length) {\n            return selfLeftWidth\n        }\n\n        const leftChildWidth = out1[0].leftWidth\n        const rightChildWidth = out1[out1.length - 1].rightWidth\n\n        let childrenRightWidth = leftChildWidth + (childrenTotalWidth - leftChildWidth - rightChildWidth) / 2\n        return Math.max(childrenRightWidth, selfLeftWidth)\n    }\n\n    get rightWidth(): number {\n        if (this.nodeState.visible === false) return 0\n        const { out1, childrenTotalWidth } = this\n        const selfRightWidth = this.width / 2 + this.subnodesWidth\n        if (!out1.length) {\n            return selfRightWidth\n        }\n\n        const leftChildWidth = out1[0].leftWidth\n        const rightChildWidth = out1[out1.length - 1].rightWidth\n\n        let childrenRightWidth = rightChildWidth + (childrenTotalWidth - leftChildWidth - rightChildWidth) / 2\n        return Math.max(childrenRightWidth, selfRightWidth)\n    }\n\n    get all2Successors(): Array<Node> {\n        const { subnodes, out1 } = this\n        const successors: Array<Node> = [...out1]\n\n        subnodes.forEach(subNode => successors.push(subNode))\n        this.out1.forEach(node => successors.push(node))\n\n        return successors\n    }\n\n    get allSuccessors() {\n        const successors = [...this.out1, ...this.subnodes]\n        const allSuccessors = [...successors]\n        successors.forEach(node => allSuccessors.push(...node.allSuccessors))\n        return allSuccessors\n    }\n\n    toggleVisibility(visible: boolean) {\n        // set self visibility\n        this.update({ visible })\n\n        this.parentConnection && (this.state.connections[this.parentConnection] = visible)\n\n        // set conns visibility to false\n        this.outConnections.forEach(connKey => {\n            this.state.connections[connKey] = visible\n        })\n    }\n\n    toggleChildrenVisibility() {\n        const visibility = this.nodeState.childrenVisibility ?? true\n        this.update({ childrenVisibility: !visibility })\n        const { subnodes, allSuccessors } = this\n        allSuccessors.forEach(node => {\n            if (!subnodes.includes(node)) { node.toggleVisibility(!visibility) }\n        })\n    }\n\n    toggleSubnodesVisibility() {\n        const visibility = this.nodeState.subnodesVisibility ?? true\n        this.update({ subnodesVisibility: !visibility })\n        this.subnodes.forEach(node => {\n            node.toggleVisibility(!visibility)\n        })\n    }\n\n    get outConnections() {\n        return Object.entries(this.state.connections)\n            .filter(([key,]) => {\n                // key: fromId_portNum_toId_portNum\n                const arr = key.split(\"_\").map(Number);\n                return arr[0] === this.id\n            })\n            .map(arr => arr[0])\n    }\n\n    children(portId: number) {\n        return Object.keys(this.state.connections)\n            .filter(key => key.split('_')[0] === this.id.toString() && key.split('_')[1] === portId.toString())\n            .map(conn => this.flow.getNode(Number((conn.split('_')[2]))))\n    }\n\n    get out1() {\n        return this.children(1)\n    }\n\n    get firstSubnode(): Node | undefined {\n        return this.children(2)[0]\n    }\n\n    get subnodes(): Node[] {\n        return this.firstSubnode?.flowLine?.flowLineNodes || []\n    }\n\n    get subnodesWidth(): number {\n        return this.subnodes.reduce((acc, subNode) => {\n            return acc + subNode.width + this.spacingX\n        }, 0)\n    }\n\n    get isSub(): boolean {\n        return this.complexParentNode !== null\n    }\n\n    get complexParentNode(): Node | null {\n        // if is sub eturn complexNode to which belongs this subnode\n        let parent = this.parent\n        if (parent) {\n            if (parent.firstSubnode === this) return parent\n            return parent.complexParentNode\n        }\n        return null\n    }\n\n    /**\n     * If not flow line, - returns null\n     */\n    get flowLine(): null | { flowLineNodes: Node[], hasSubnodes: Node | undefined } {\n        const flowLineNodes: Node[] = [this];\n        let node: Node = this;\n        let hasSubnodes = node.firstSubnode;\n\n        while (node.out1.length === 1) {\n            hasSubnodes = hasSubnodes || node.firstSubnode;\n            node = node.out1[0]\n            flowLineNodes.push(node);\n        }\n\n        return (node.out1.length > 1) ? null : { flowLineNodes, hasSubnodes };\n    }\n\n    get height() {\n        return this.state.drawflow[this.id].height\n    }\n    get width() {\n        return this.state.drawflow[this.id].width\n    }\n\n    get pos() {\n        return this.state.drawflow[this.id].pos\n    }\n\n    setPos(newPos: pos) {\n        const { pos } = this;\n        const { x, y } = newPos;\n        this.flow.moveNode({ nodeId: this.id, dx: x - pos.x, dy: y - pos.y })\n    }\n\n    update(data: updateNode) {\n        const newData = lodash.merge(this.nodeState, data)\n        Object.assign(this.nodeState, newData)\n    }\n}","import { addConnectionType, moveNodeType, stateData } from \"../types\";\nimport Node from './Node'\n\n\nexport class Flow {\n    // readonly because we are using only immer.js with redux-toolkit\n    public readonly state: stateData\n    public readonly nodes: { [id: number]: Node } = {}\n    public readonly distanceToConnect = 100\n    public readonly distanceToDisconnect = 0\n\n    constructor(state: stateData) {\n        this.state = state\n        const { drawflow } = this.state\n        Object.keys(drawflow).map((id) => this.nodes[Number(id)] = new Node(Number(id), this))\n    }\n\n    get heads() {\n        return Object.entries(this.nodes).filter(([id, node]) => !node.parent).map(el => el[1])\n    }\n\n    getNode(id: number) {\n        return this.nodes[id]\n    }\n\n    alignAll() {\n        this.setLaneNumbers()\n        this.heads.forEach(node => {\n            // node.calculateFullWidth()\n            node.alignChildren()\n        })\n        // console.log('Align all')\n    }\n\n    allowConnection(conn: addConnectionType) {\n        let { startId, startPort, endId } = conn\n        const nodeIn = this.getNode(endId)\n        const nodeOut = this.getNode(startId)\n        const connectAsSub = startPort === 2\n\n\n        if (nodeIn.parent || nodeOut.nodeState.visible === false) {\n            return false\n        }\n\n        const flowLine = nodeIn.flowLine\n\n        if ((connectAsSub || nodeOut.isSub) && (!flowLine || flowLine.hasSubnodes)) {\n            return false\n        }\n        return true\n    }\n\n    addConnection(conn: addConnectionType) {\n        let { startId, startPort, endId, endPort } = conn\n        const nodeIn = this.getNode(endId)\n        const nodeOut = this.getNode(startId)\n        const connectAsSub = startPort === 2\n\n\n        if (nodeIn.parent || nodeOut.nodeState.visible === false) {\n            return false\n        }\n\n        const flowLine = nodeIn.flowLine\n\n        if ((connectAsSub || nodeOut.isSub) && (!flowLine || flowLine.hasSubnodes)) {\n            return false\n        }\n\n        // Insertion to into the subnodes\n        let nextNode = null;\n        if (connectAsSub && nodeOut.subnodes.length) {\n            if (nodeOut.nodeState.subnodesVisibility === false) {\n                // connect subnode to the end when subnodes are hidden\n                startId = nodeOut.subnodes[nodeOut.subnodes.length - 1].id\n                startPort = 1\n                const key = `${startId}_${startPort}_${endId}_${endPort}`;\n                this.state.connections[key] = true\n                const { flowLineNodes } = flowLine as { flowLineNodes: Node[] }\n                flowLineNodes.forEach(node => node.toggleVisibility(false))\n                return\n            } else {\n                nextNode = nodeOut.subnodes[0]\n            }\n        }\n        if (nodeOut.isSub && nodeOut.out1.length) {\n            nextNode = nodeOut.out1[0]\n        }\n\n        if (nextNode !== null) {\n            const keyToDelete = `${startId}_${startPort}_${nextNode.id}_1`\n            delete this.state.connections[keyToDelete]\n            const { flowLineNodes } = flowLine as { flowLineNodes: Node[] }\n            const lastNode = flowLineNodes[flowLineNodes.length - 1]\n            const keyToCreate = `${lastNode.id}_1_${nextNode.id}_1`\n            this.state.connections[keyToCreate] = true\n        }\n\n        const key = `${startId}_${startPort}_${endId}_${endPort}`;\n        this.state.connections[key] = true\n    }\n\n    moveNode({ dx, dy, nodeId }: moveNodeType) {\n        this.state.drawflow[nodeId].pos.x += dx\n        this.state.drawflow[nodeId].pos.y += dy\n    }\n\n    dragNode({ dx, dy, nodeId }: moveNodeType) {\n        this.moveNode({ dx, dy, nodeId })\n        this.toggleAvailablePortToConnect(nodeId)\n    }\n\n    toggleAvailablePortToConnect(nodeId: number) {\n        /**\n         * Because of long computatuon we executing\n         * this action not often then 1 time per 200 milliseconds\n         */\n        const now = Date.now()\n        if (this.state.computing && (now - this.state.computing) < 100) {\n            return\n        }\n        this.state.computing = now\n\n        /**\n         * Attachment\n         *\n         * traverse all other nodes except this one,\n         * check if their ports are free for new conn, check distance\n         */\n\n        if (!this.state.config.drag) return\n\n        const currentNode = this.getNode(nodeId)\n        const currentNodeHead = currentNode.head\n        if (currentNode.parentConnection) {\n            // remove connection\n            delete this.state.connections[currentNode.parentConnection]\n            this.alignAll()\n        }\n        const nodeInPortPos = currentNode.portInPos\n        if (!nodeInPortPos) return\n        const portDistances: Array<{ key: string, distance: number }> = []\n        Object.entries(this.nodes)\n            .filter(([_, node]) => node.head !== currentNodeHead && (node.nodeState.visible !== false))\n            .forEach(([id, node]) => {\n                if (Number(id) === nodeId) return\n                node.outPorts.forEach(([key, pos]) => {\n                    const distance = Math.hypot(nodeInPortPos.x - pos.x, nodeInPortPos.y - pos.y)\n                    if (distance < this.distanceToConnect) {\n                        portDistances.push({ key, distance })\n                    }\n                })\n            });\n        portDistances.sort((a, b) => (a.distance - b.distance))\n\n        if (portDistances.length) {\n            let nearestPort = portDistances.shift() as { key: string; distance: number; }\n            if (true) {\n                if (nearestPort.distance < this.distanceToConnect) {\n                    this.state.portToConnect = nearestPort.key\n                } else {\n                    this.state.portToConnect = undefined\n                }\n            }\n        } else {\n            this.state.portToConnect = undefined\n        }\n    }\n\n    setLaneNumbers() {\n        let laneNodes = this.heads\n        laneNodes.forEach(node => node.update({ head: node.id, lane: 0 }))\n\n        while (laneNodes.length) {\n            const nextLaneNodes: Array<Node> = [];\n            laneNodes.forEach(node => {\n                let lane = node.lane as number + 1\n                const { subnodes, head } = node\n                if (head === undefined) { console.error('head is undefined in setLaneNumbers'); return }\n                if (subnodes.length) {\n                    for (const sub of subnodes) {\n                        sub.update({ lane: lane++, head })\n                    }\n                }\n                const nextNodes = node.children(1)\n                nextNodes.forEach(nextNode => nextNode.update({ head, lane }))\n                nextLaneNodes.push(...nextNodes)\n            })\n            laneNodes = nextLaneNodes;\n        }\n\n        this.heads.forEach(node => {\n            const { head } = node\n            for (let laneNumber = 0, positionNumber = 0, nextLaneNodes: Array<Node> = [node]; nextLaneNodes.length; ++laneNumber) {\n\n                nextLaneNodes = Object.values(this.nodes).filter(nextNode => nextNode.lane === laneNumber && nextNode.head === head)\n\n                nextLaneNodes.forEach(nextNode => {\n                    nextNode.update({ positionNumber: positionNumber++ })\n                })\n            }\n        })\n\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport handler from '../components/drawflowHandler'\nimport { ports, Slices, stateData, clientPos, loadType, moveNodeType, portType } from '../types'\nimport { Flow } from './Flow'\nimport type { RootState } from './store'\n\nexport const initialState: stateData = {\n  nodeId: 1,\n  canvasDrag: false,\n  config: {\n    drag: false,\n    connectionsLabelEnable: false,\n    canvasTranslate: {\n      x: 0,\n      y: 0,\n    },\n    zoom: {\n      value: 1,\n      max: 2,\n      min: 0.5,\n      tick: 0.1,\n    },\n  },\n  drawflow: {},\n  connections: {},\n  connectionsLabel: {},\n  ports: {},\n  select: null,\n  selectId: null,\n  selectPath: null,\n  showButton: null,\n  newPathDirection: null,\n  modalType: null,\n  editLock: false,\n  mouseBlockDragPos: { clientX: undefined, clientY: undefined },\n}\n\n\n// load version from server\n\nconst load = (state: stateData, { payload }: PayloadAction<loadType>) => {\n  Object.assign(state, initialState)\n  state.drawflow = payload.drawflow\n  state.nodeId = Object.keys(payload.drawflow).length + 1\n  state.connections = payload.connections\n  return state\n}\n\nconst align = (state: stateData) => {\n  const flow = new Flow(state)\n  flow.alignAll()\n}\n\n\nconst slice = createSlice({\n  name: Slices.Drawflow,\n  initialState,\n  reducers: {\n    setEditLock: (state, { payload }: PayloadAction<boolean>) => {\n      state.editLock = payload\n    },\n    align,\n    moveNode: (state, action: PayloadAction<moveNodeType>) => (new Flow(state)).dragNode(action.payload),\n    setMouseBlockDragPos: (state: stateData, { payload }: PayloadAction<clientPos>) => {\n      state.mouseBlockDragPos = payload\n    },\n    unSelect: (state) => {\n      state.config.drag = false\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    select: (state, { payload }: PayloadAction<{ type: 'node' | 'path' | portType, portId?: number, selectId?: string | number }>) => {\n      const { type, selectId } = payload\n      state.config.drag = type === 'node'\n      state.select = payload\n      state.selectId = selectId ?? null\n    },\n    moveCanvas: (state, { payload: { movementX, movementY } }: PayloadAction<{ movementX: number, movementY: number }>) => {\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n      }\n    },\n    canvasDrag: (state, { payload }: PayloadAction<boolean>) => {\n      state.canvasDrag = payload\n    },\n    canvasMouseMove: (state, { payload: { movementX, movementY, clientX, clientY } }: PayloadAction<{ clientX: number, clientY: number, movementX: number, movementY: number }>) => {\n      state.clientCurrentMousePos = { clientX, clientY }\n      // return undefined\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n        // console.log('Drag canvas')\n      } else if (state.select?.type === portType.out) {\n        state.newPathDirection = { clientX, clientY }\n        // console.log('New path')\n      } else if (state.config.drag && typeof state.selectId === 'number') {\n        // move node\n        // console.log('Move node')\n        const nodeId = state.selectId\n        const { clientX: prevX, clientY: prevY } = state.mouseBlockDragPos as clientPos\n        state.mouseBlockDragPos = { clientX, clientY }\n        const coef = (state.config.zoom.value)\n        const dx = (clientX - prevX) / coef\n        const dy = (clientY - prevY) / coef;\n        (new Flow(state)).dragNode({ nodeId, dy, dx })\n      }\n      // align(state)\n    },\n    canvasMouseUp: (state) => {\n      const flow = new Flow(state)\n      if (state.portToConnect) {\n        const [startId, , startPort] = state.portToConnect.split('_').map(v => Number(v))\n        // console.log([startId, startPort])\n        const endId = Number(state.selectId)\n        const endPort = 1\n        flow.addConnection({ startId, startPort, endId, endPort })\n      }\n      state.portToConnect = undefined\n      state.newPathDirection = null\n      state.canvasDrag = false\n      state.config.drag = false\n      if (state.select?.type === portType.out) {\n        state.select = null\n      }\n      flow.alignAll()\n    },\n    deleteNode: (state) => {\n      const { connections, drawflow, ports, selectId, select } = state;\n      if (!selectId || (typeof selectId !== 'number') || select?.type !== 'node') return;\n\n      // 1. find in connections\n      Object.keys(connections).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId || arr[2] * 1 === selectId) {\n          delete connections[val];\n        }\n        return null;\n      }, null);\n      // 2. find in ports\n      Object.keys(ports).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId) {\n          delete ports[val];\n        }\n        return null;\n      }, null);\n      // 3. find in drawflow\n      delete drawflow[selectId];\n\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    deletePath: (state) => {\n      const { selectId, connections, select } = state\n      if (typeof selectId === 'string' && select?.type === \"path\")\n        delete connections[selectId];\n    },\n    load,\n    portMouseUp: (state, { payload: { nodeId, portId, PortType } }: PayloadAction<{ PortType: portType, nodeId: number, portId: number }>) => {\n      const { selectId, select } = state\n      if (PortType !== portType.in || typeof selectId !== \"number\" || !select?.portId) return\n      const endId = nodeId\n      const endPort = portId\n      const startId = selectId\n      const startPort = select.portId\n      // if connect to same node\n      if (startId === endId) return\n      const flow = new Flow(state)\n      flow.addConnection({ startId, startPort, endId, endPort })\n    },\n    clear: () => initialState,\n    pushPorts: (state: stateData, { payload }: PayloadAction<ports>) => {\n      state.ports = { ...state.ports, ...payload }\n    },\n    zoom: (state, { payload }: PayloadAction<boolean | null>) => {\n      const { zoom } = state.config;\n      const { value, max, min, tick } = zoom\n      const newValue = value + (payload ? tick : -tick)\n      if (newValue <= max && newValue >= min) {\n        zoom.value = newValue\n      }\n      if (payload === null) {\n        state.config.canvasTranslate = { x: 0, y: 0 }\n        zoom.value = 1\n      }\n    },\n    nodeSize: (state, { payload: { height, width, id } }: PayloadAction<{ id: number, height: number, width: number }>) => {\n      state.drawflow[id].height = height\n      state.drawflow[id].width = width\n    },\n    toggleSubnodes: (state, { payload: { id } }: PayloadAction<{ id: number }>) => {\n      const flow = new Flow(state)\n      const node = flow.getNode(id)\n      node.toggleSubnodesVisibility()\n      align(state)\n    },\n    toggleChildren: (state, { payload: { id } }: PayloadAction<{ id: number }>) => {\n      const flow = new Flow(state)\n      const node = flow.getNode(id)\n      node.toggleChildrenVisibility()\n      align(state)\n    },\n    copyNode: (state) => {\n      if (state.select?.type === 'node' && typeof state.select.selectId === 'number')\n        state.nodeToCopyId = state.select.selectId\n    },\n    insertCopiedNode: (state) => {\n      if (state.nodeToCopyId === undefined) return\n      const { clientX, clientY } = state.clientCurrentMousePos as clientPos\n      const node = JSON.parse(JSON.stringify(state.drawflow[state.nodeToCopyId]))\n      node.pos = handler.getPos(clientX, clientY, state.config.zoom.value)\n      state.drawflow[state.nodeId] = { ...node, id: state.nodeId, height: 0, width: 0 }\n      ++state.nodeId\n    },\n  },\n})\n\nexport const actions = slice.actions\nexport const drawflowSlice = slice.reducer\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectActiveDrawflow = (state: RootState) => state.flows[state.version]\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","const makeRandomNames = (length: number, searchWord: string, max = 15, min = 5) => {\n    const result = [];\n    const map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let j = 0; j < length; j++) {\n        let word = \"\";\n        for (let i = 0; i < Math.floor(Math.random() * (max - min) + min); i++) {\n            word += map.charAt(Math.floor(Math.random() * map.length));\n        }\n        if (searchWord.length > 1) {\n            word += searchWord;\n        }\n        result.push(word);\n    }\n    return result;\n}\n\nconst getGroups = async (number: number) => {\n    const rnd = () => ({\n        type: 'Asd',\n        name: 'assa',\n        value: makeRandomNames(1, \"\", 10, 5)[0],\n    })\n    const rez = []\n    for (let i = 0; i < number; ++i) {\n        rez.push(rnd())\n    }\n    return rez;\n}\n\nexport default getGroups","import { node, NODE_TYPE } from \"../types\";\nimport getFilters from \"./fields.mock\";\nimport { data } from \"../types\"\n\nexport const testNode = (): node => {\n  return {\n    id: 0,\n    \"type\": NODE_TYPE.MIDDLE,\n    \"data\": {\n      \"type\": \"Node type\",\n      \"name\": \"Node name\",\n      \"value\": \"Node value\"\n    },\n    \"port\": {\n      \"in\": 1,\n      \"out\": 2\n    },\n    \"pos\": {\n      \"x\": -20,\n      \"y\": 100\n    },\n    \"isSub\": false,\n    height: 0,\n    width: 0\n  }\n}\n\nconst getDummy = async (): Promise<data> => {\n  const data: any = {\n    \"nodes\": {\n    },\n    \"connections\": {\n      \"1_1_3_1\": true,\n      \"4_1_2_1\": true\n    },\n  }\n\n  for (let i = 1; i < 5; ++i) {\n    const node = testNode()\n    node.id = i\n    node.data.name = `Node ${i}`\n    node.pos.x = 100 * i\n    node.pos.y = 50 * i\n    data.nodes[i] = node\n  }\n\n\n  return data\n}\n\n\nconst mock = {\n  getDummy,\n  getFilters,\n}\n\nexport default mock\n","import { configureStore, createAction, createAsyncThunk, createReducer, PayloadAction } from '@reduxjs/toolkit'\nimport { clientPos, flowType, Slices, stateData } from '../types'\nimport { drawflowSlice } from './drawflowSlice'\nimport mock, { testNode } from '../Mock'\nimport { initialState as drawflowInitialState } from './drawflowSlice'\nimport handler from '../components/drawflowHandler'\nimport { Flow } from './Flow'\n\nexport const changeVersion = createAction<number>('versions/changed')\nexport const addNewNode = createAction<clientPos>('addNewNode')\nexport const dragTemplate = createAction<number>('dragTemplate')\n\nconst initialState: flowType = {\n  version: 0,\n  flows: [drawflowInitialState, drawflowInitialState, drawflowInitialState],\n  templates: [],\n  dragTemplate: 0\n}\n\nexport const fetchNodeTemplates = createAsyncThunk('fetchPosts', async () => {\n  const data = await mock.getFilters(5)\n  // console.log(data)\n\n  return data\n})\n\nexport const fetchFlowVersion = createAsyncThunk('fetchFlowVersion', async () => {\n  return await mock.getDummy()\n})\n\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(changeVersion, (state, { payload }) => {\n      state.version = payload\n    })\n    .addCase(addNewNode, (appState: flowType, { payload: { clientX, clientY } }: PayloadAction<clientPos>) => {\n      if (!appState.dragTemplate) return;\n\n      const state = appState.flows[appState.version]\n      const node = testNode()\n      node.pos = handler.getPos(clientX, clientY, state.config.zoom.value)\n      state.mouseBlockDragPos = { clientX, clientY };\n      state.drawflow[state.nodeId] = { ...node, id: state.nodeId, height: 0, width: 0 }\n      state.selectId = state.nodeId++\n      state.select = { type: 'node', selectId: state.selectId }\n      state.config.drag = true\n\n      appState.dragTemplate = undefined\n    })\n    .addCase(dragTemplate, (appState, { payload }) => {\n      appState.dragTemplate = payload\n    })\n    .addCase(fetchNodeTemplates.fulfilled, (state, action) => {\n      state.templates = action.payload\n    })\n    .addCase(fetchFlowVersion.fulfilled, (state, action) => {\n      const { nodes: drawflow, connections } = action.payload;\n      state.flows[state.version] = drawflowSlice(\n        state.flows[state.version],\n        {\n          type: Slices.Drawflow + '/load',\n          payload: { drawflow, connections }\n        })\n    })\n\n    // reducer for drawflow\n    .addMatcher(\n      (action) => action.type.startsWith(Slices.Drawflow),\n      (state, action) => {\n        state.flows[state.version] = drawflowSlice(state.flows[state.version], action)\n      }\n    )\n\n\n})\n\nexport const store = configureStore({\n  reducer\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\n// store.subscribe(() => console.log(store.getState()))","import styled from \"styled-components\";\nimport { actions, selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppDispatch, useAppSelector } from \"../redux/hooks\";\n\nconst Div = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  padding: 5px 10px;\n  background-color: #ddd;\n  font-weight: bold;\n  z-index: 1;\n`;\n\nconst Button = styled.button`\n  background-color: #333;\n  color: #fff;\n  border-radius: 4px;\n`;\n\nconst DrawflowAdditionalArea = () => {\n  const editLock = useAppSelector((s) => selectActiveDrawflow(s).editLock);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Div>\n      {!editLock && <Button>Clear</Button>}\n      <Button onClick={() => dispatch(actions.setEditLock(!editLock))}>\n        {editLock ? \"UnLock\" : \"Lock\"}\n      </Button>\n    </Div>\n  );\n};\n\nexport default DrawflowAdditionalArea;\n","import styled from \"styled-components\";\nimport { actions } from \"../redux/drawflowSlice\";\nimport { useAppDispatch } from \"../redux/hooks\";\n\nconst ZoomArea = styled.div`\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  padding: 5px 10px;\n  background-color: #ddd;\n  font-weight: bold;\n  z-index: 1;\n`;\n\nconst Button = styled.button`\n  background-color: #333;\n  color: #fff;\n  border-radius: 4px;\n  padding: 3px 10px;\n`;\n\nconst DrawflowZoomArea = () => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <ZoomArea>\n      <Button onClick={() => dispatch(actions.zoom(true))}>+</Button>\n      <Button onClick={() => dispatch(actions.zoom(false))}>-</Button>\n      <Button onClick={() => dispatch(actions.zoom(null))}>reset</Button>\n    </ZoomArea>\n  );\n};\n\nexport default DrawflowZoomArea;\n","import styled from \"styled-components\";\nimport { actions, selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppSelector, useAppDispatch } from \"../redux/hooks\";\n\nconst Svg = styled.svg`\n  position: absolute;\n  overflow: visible;\n`;\n\nconst StyledPath = styled.path`\n  :hover {\n    stroke-width: 6px;\n    stroke: purple;\n    cursor: pointer;\n  }\n  fill: none;\n  stroke-width: ${({ theme }) => (theme.selected ? 7 : 6)}px;\n  stroke: steelblue;\n`;\n\ntype Props = {\n  svgKey?: string;\n  d: string;\n};\n\nexport const Path = (props: Props) => {\n  const { svgKey, d } = props;\n  const selectId = useAppSelector((s) => selectActiveDrawflow(s).selectId);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Svg>\n      <StyledPath\n        theme={{ selected: selectId === svgKey && svgKey }}\n        d={d}\n        onMouseDown={(e) => {\n          if (!svgKey) return;\n          e.stopPropagation();\n          // if (editLock) return;\n          dispatch(actions.select({ type: \"path\", selectId: svgKey }));\n        }}\n      ></StyledPath>\n    </Svg>\n  );\n};\n","import { createSelectorCreator, defaultMemoize } from \"reselect\";\nimport lodash from \"lodash\";\nimport { useMemo } from \"react\";\nimport { selectActiveDrawflow } from \"./drawflowSlice\";\nimport { useAppSelector } from \"./hooks\";\nimport { RootState } from \"./store\";\nimport { pureNode } from \"../types\";\n\nexport const createDeepEqualSelector = createSelectorCreator(\n  defaultMemoize,\n  lodash.isEqual\n);\n\nexport const useNodeIds = () =>\n  useAppSelector(\n    useMemo(\n      () =>\n        createDeepEqualSelector(\n          (s: RootState) => {\n            const { drawflow } = selectActiveDrawflow(s);\n            const data = Object.entries(drawflow)\n              .filter(([id, { visible }]) => visible !== false)\n              .map(([id]) => Number(id));\n            return data;\n          },\n          (s) => s\n        ),\n      []\n    )\n  );\n\nexport const useActiveFlow = () =>\n  useAppSelector(\n    useMemo(\n      () =>\n        createDeepEqualSelector(\n          (s: RootState) => {\n            const state = selectActiveDrawflow(s);\n            const {\n              config: {\n                // canvasTranslate: { x, y },\n                zoom,\n              },\n              newPathDirection,\n              canvasDrag,\n            } = state;\n            const obj = {\n              config: {\n                // canvasTranslate: { x, y },\n                zoom,\n              },\n              newPathDirection,\n              canvasDrag,\n            };\n            return obj;\n          },\n          (s) => s\n        ),\n      []\n    )\n  );\n\nexport const useNodePos = (id: number) =>\n  useAppSelector(\n    useMemo(\n      () =>\n        createDeepEqualSelector(\n          (s: RootState) => {\n            return selectActiveDrawflow(s).drawflow[id].pos;\n          },\n          (s) => s\n        ),\n      [id]\n    )\n  );\n\nexport const useNodeIsSelected = (id: number) =>\n  useAppSelector(\n    useMemo(\n      () =>\n        createDeepEqualSelector(\n          (s: RootState) => {\n            return selectActiveDrawflow(s).selectId === id;\n          },\n          (s) => s\n        ),\n      [id]\n    )\n  );\n\nexport const useNodeIsSub = (id: number) =>\n  useAppSelector(\n    useMemo(\n      () =>\n        createDeepEqualSelector(\n          (s: RootState) => {\n            return selectActiveDrawflow(s).drawflow[id].isSub;\n          },\n          (s) => s\n        ),\n      [id]\n    )\n  );\n\nexport const useNode = (id: number): pureNode =>\n  useAppSelector(\n    useMemo(\n      () =>\n        createDeepEqualSelector(\n          (s: RootState) => {\n            const node = JSON.parse(\n              JSON.stringify(selectActiveDrawflow(s).drawflow[id])\n            );\n            delete node.pos;\n            return node;\n          },\n          (s) => s\n        ),\n      [id]\n    )\n  );\n\nexport const useDrag = () =>\n  useAppSelector(\n    useMemo(\n      () =>\n        createDeepEqualSelector(\n          (s: RootState) => {\n            return selectActiveDrawflow(s).config.drag;\n          },\n          (s) => s\n        ),\n      []\n    )\n  );\n\nexport const usePortPos = (id: string) =>\n  useAppSelector(\n    useMemo(\n      () =>\n        createDeepEqualSelector(\n          (s: RootState) => {\n            return selectActiveDrawflow(s).ports[id];\n          },\n          (s) => s\n        ),\n      [id]\n    )\n  );\n\nexport const useConnectionIds = () =>\n  useAppSelector(\n    useMemo(\n      () =>\n        createDeepEqualSelector(\n          (s: RootState) => {\n            const { connections } = selectActiveDrawflow(s);\n\n            return Object.entries(connections).filter(([, conn]) => conn);\n          },\n          (s) => s\n        ),\n      []\n    )\n  );\n","import { selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppSelector } from \"../redux/hooks\";\nimport { Path } from \"./Path\";\nimport handler from \"./drawflowHandler\";\nimport { usePortPos } from \"../redux/selectors\";\n\nexport const NewPath = () => {\n  console.log(\"Render new Path\");\n\n  const zoom = useAppSelector((s) => selectActiveDrawflow(s).config.zoom.value);\n  const select = useAppSelector((s) => selectActiveDrawflow(s).select);\n  const newPathDirection = useAppSelector(\n    (s) => selectActiveDrawflow(s).newPathDirection\n  );\n\n  const startKey = `${select?.selectId}_out_${select?.portId}`;\n  const start = usePortPos(startKey);\n\n  if (!start) {\n    console.error(\"No start port in newPath\");\n    return null;\n  }\n\n  if (!select?.portId) {\n    console.error(`Select port id not set!`);\n    return null;\n  }\n\n  if (!newPathDirection) {\n    console.error(`Path direction null`);\n    return null;\n  }\n\n  const { clientX, clientY } = newPathDirection;\n  const end = handler.getPos(clientX, clientY, zoom);\n  const d = handler.createCurvature(start, end);\n\n  return <Path d={d} />;\n};\n","// import { useState } from \"react\";\n// import { Grabme, More } from \"../svg\"\n\nimport styled from \"styled-components\";\n\nconst StyledNode = styled.div`\n  max-height: 100%;\n  overflow: hidden;\n`;\n\nexport const Round = (props: any) => {\n  return <StyledNode>{JSON.stringify(props, null, 2)}</StyledNode>;\n\n  // const { imgSrc, name, description } = props;\n  // return (\n  //     <div className=\"blockelem create-flowy\">\n  //         <div className=\"grabme\">\n  //             <Grabme />\n  //         </div>\n  //         <div className=\"blockin\">\n  //             <div className=\"blockico\">\n  //                 <span></span>\n  //                 <img src={imgSrc} alt={name + '\\n' + description} />\n  //             </div>\n  //             <div className=\"blocktext\">\n  //                 <p className=\"blocktitle\">{name}</p>\n  //                 <div className=\"side-elem-more\">\n  //                     <More />\n  //                 </div>\n  //                 <p className=\"blockdesc\">{description}</p>\n  //             </div>\n  //         </div>\n  //     </div>)\n};\n","export const subnodeStyle = {\n    width: 100,\n    height: 60,\n}\n\nexport const nodeStyle = {\n    width: 200,\n}","import styled, { css } from \"styled-components\";\nimport { actions, selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppDispatch, useAppSelector } from \"../redux/hooks\";\nimport { useNodeIsSub } from \"../redux/selectors\";\nimport { portType, port } from \"../types\";\n\nconst Indicator = styled.div<{ visible: boolean }>`\n  width: 15px;\n  height: 15px;\n  border-radius: 60px;\n  background-color: #217ce8;\n  opacity: ${({ visible }) => (visible ? 1 : 0)};\n  transform: scale(${({ visible }) => (visible ? 1 : 0)});\n  transition: all 0.3s cubic-bezier(0.05, 0.03, 0.35, 1);\n`;\n\nconst portStyle = styled.div`\n  height: 15px;\n  width: 15px;\n  border-radius: 50%;\n  background-color: red;\n  position: absolute;\n`;\n\nconst Output1 = styled(portStyle)<{ isSub: boolean }>`\n  left: 50%;\n  top: 100%;\n  transform: translate(-50%, -50%);\n  ${({ isSub }) =>\n    isSub &&\n    css`\n      left: 100%;\n      top: 50%;\n    `}\n`;\nconst Output2 = styled(portStyle)<{ isSub: boolean }>`\n  left: 100%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  ${({ isSub }) =>\n    isSub &&\n    css`\n      display: none;\n    `}\n`;\n\nconst Input1 = styled(portStyle)<{ isSub: boolean }>`\n  left: 50%;\n  top: 0;\n  transform: translate(-50%, -50%);\n\n  ${({ isSub }) =>\n    isSub &&\n    css`\n      left: 0;\n      top: 50%;\n    `}\n`;\nconst styledPorts = {\n  [portType.in]: [Input1],\n  [portType.out]: [Output1, Output2],\n};\n\nexport const Ports = (props: { type: portType; id: number; port: port }) => {\n  const { id, port, type } = props;\n  const dispatch = useAppDispatch();\n  const portToConnect = useAppSelector(\n    (s) => selectActiveDrawflow(s).portToConnect\n  );\n  const isSub = useNodeIsSub(id);\n  let arr = [];\n\n  for (let i = 1; i <= port[type]; i++) {\n    const key = `${type}put-${i}`;\n    const portKey = `${id}_${type}_${i}`;\n    const StyledPort = styledPorts[type][i - 1];\n    const port = (\n      <StyledPort\n        isSub={isSub}\n        onMouseDown={(e) => {\n          e.stopPropagation();\n          dispatch(\n            actions.select({\n              type,\n              portId: i,\n              selectId: id,\n            })\n          );\n        }}\n        key={key}\n        onMouseUp={(e) => {\n          dispatch(\n            actions.portMouseUp({ nodeId: id, portId: i, PortType: type })\n          );\n        }}\n      >\n        <Indicator visible={!!(portToConnect === portKey && \" \")} />\n      </StyledPort>\n    );\n    arr.push(port);\n  }\n\n  return <div className={`${type}puts`}>{arr}</div>;\n};\n","import { useEffect, useRef } from \"react\";\nimport { portType } from \"../types\";\n\nimport { actions, selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppSelector, useAppDispatch } from \"../redux/hooks\";\nimport styled, { css } from \"styled-components\";\nimport { Round } from \"./NodeComponents\";\nimport { subnodeStyle } from \"../styles\";\nimport { Ports } from \"./Ports\";\nimport {\n  useDrag,\n  useNode,\n  useNodeIsSelected,\n  useNodePos,\n} from \"../redux/selectors\";\n\nconst BlockStyled = styled.div<{\n  isSub: boolean;\n  selected: boolean;\n}>`\n  display: inline-block;\n  position: absolute;\n  padding: 5px;\n  width: 200px;\n  min-height: 60px;\n  background-color: #d3d3d3;\n  z-index: 1;\n  cursor: move;\n\n  ${({ isSub }) =>\n    isSub &&\n    css`\n      height: ${subnodeStyle.height}px;\n      width: ${subnodeStyle.width}px;\n    `}\n  ${({ selected }) =>\n    selected &&\n    css`\n      box-shadow: 0 2px 15px 2px #cacaca;\n      z-index: 2;\n    `};\n`;\n\nconst DrawflowNodeBlock = ({ id }: { id: number }) => {\n  // console.log(`Render node id: ${id}`);\n  // return null;\n\n  const drag = useDrag();\n  const nodeId = useAppSelector((s) => selectActiveDrawflow(s).nodeId);\n\n  const pos = useNodePos(id);\n\n  const selected = useNodeIsSelected(id);\n  const dispatch = useAppDispatch();\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const node = useNode(id);\n  const { port } = node;\n\n  useEffect(() => {\n    if (ref.current) {\n      const { offsetHeight, offsetWidth } = ref.current;\n      dispatch(\n        actions.nodeSize({ height: offsetHeight, width: offsetWidth, id })\n      );\n      dispatch(actions.align());\n      // console.log(\"align node\");\n    }\n  }, [dispatch, id, node]);\n\n  useEffect(() => {\n    const getPortPos = (type: portType, i: number, elmt: Element) => {\n      const key = `${id}_${type}_${i}`;\n      const x = parseInt(getComputedStyle(elmt).left) + pos.x;\n      const y = parseInt(getComputedStyle(elmt).top) + pos.y;\n\n      return {\n        [key]: { x, y },\n      };\n    };\n\n    if (ref.current) {\n      const inputs = Array.from(\n        (ref.current.querySelector(\".inputs\") as HTMLDivElement).children\n      );\n      const outputs = Array.from(\n        (ref.current.querySelector(\".outputs\") as HTMLDivElement).children\n      );\n      let newPorts = {};\n      newPorts = Object.assign(\n        newPorts,\n        inputs.reduce((acc, elmt, i) => {\n          return Object.assign(acc, getPortPos(portType.in, i + 1, elmt));\n        }, {})\n      );\n      newPorts = Object.assign(\n        newPorts,\n        outputs.reduce((acc, elmt, i) => {\n          return Object.assign(acc, getPortPos(portType.out, i + 1, elmt));\n        }, {})\n      );\n      dispatch(actions.pushPorts(newPorts));\n    }\n  }, [dispatch, id, pos]);\n\n  useEffect(() => {\n    // when add new node shift it to left and up\n    if (ref.current && nodeId - 1 === id && drag) {\n      const { offsetHeight, offsetWidth } = ref.current;\n      dispatch(\n        actions.moveNode({\n          nodeId: id,\n          dx: -offsetWidth * 0.2,\n          dy: -offsetHeight * 0.2,\n        })\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <BlockStyled\n      selected={selected}\n      ref={ref}\n      style={{ left: pos.x, top: pos.y }}\n      isSub={node.isSub}\n      onMouseDown={(e) => {\n        e.stopPropagation();\n        const { clientX, clientY } = e;\n        dispatch(actions.select({ type: \"node\", selectId: id }));\n        dispatch(actions.setMouseBlockDragPos({ clientX, clientY }));\n      }}\n      onContextMenu={(e) => {\n        // TODO show delete button\n      }}\n      onDoubleClick={() => {\n        // show node settings\n      }}\n    >\n      <Round {...node} {...pos} />\n\n      {!node.isSub && (\n        <>\n          <div\n            onClick={() => {\n              dispatch(actions.toggleSubnodes({ id }));\n            }}\n          >\n            toggle sub\n          </div>\n          <div\n            onClick={() => {\n              dispatch(actions.toggleChildren({ id }));\n            }}\n          >\n            toggle children\n          </div>\n        </>\n      )}\n      <Ports id={id} port={port} type={portType.in} />\n      <Ports id={id} port={port} type={portType.out} />\n      <button\n        style={\n          {\n            // display: showButton === id ? \"block\" : \"none\"\n          }\n        }\n        onMouseDown={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        X\n      </button>\n    </BlockStyled>\n  );\n};\n\nexport default DrawflowNodeBlock;\n","import { useNodeIds } from \"../redux/selectors\";\nimport DrawflowNodeBlock from \"./DrawflowNodeBlock\";\n\nexport const NodeList = () => {\n  console.log(`Render NodeList`);\n\n  const drawflow = useNodeIds();\n\n  // return null;\n\n  return (\n    <>\n      {drawflow.map((id) => {\n        return <DrawflowNodeBlock key={id} id={id} />;\n      })}\n    </>\n  );\n};\n","import { useConnectionIds, usePortPos } from \"../redux/selectors\";\nimport { Path } from \"./Path\";\nimport handler from \"./drawflowHandler\";\n\nconst Connection = ({ id: key }: { id: string }) => {\n  // key: fromId_portNum_toId_portNum\n  const arr = key.split(\"_\").map(Number);\n\n  const startKey = `${arr[0]}_out_${arr[1]}`;\n  const endKey = `${arr[2]}_in_${arr[3]}`;\n  const start = usePortPos(startKey);\n  const end = usePortPos(endKey);\n\n  const d = start && end ? handler.createCurvature(start, end) : \"\";\n  return <Path key={key} svgKey={key} d={d} />;\n};\n\nexport const ConnectionList = () => {\n  const connections = useConnectionIds();\n\n  const conns = connections.map(([key]) => {\n    return <Connection key={key} id={key} />;\n  });\n  return <>{conns}</>;\n};\n","import { actions } from \"../redux/drawflowSlice\";\nimport { useAppDispatch } from \"../redux/hooks\";\nimport { useEffect, useRef } from \"react\";\nimport { addNewNode, fetchFlowVersion } from \"../redux/store\";\nimport DrawflowAdditionalArea from \"./DrawflowAdditionalArea\";\nimport DrawflowZoomArea from \"./DrawflowZoomArea\";\nimport { NewPath } from \"./NewPath\";\n\nimport { NodeList } from \"./NodeList\";\nimport { ConnectionList } from \"./ConnectionList\";\nimport styled from \"styled-components\";\nimport { useActiveFlow } from \"../redux/selectors\";\n\nconst ParentDrawflow = styled.div`\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n  background: #282a36;\n  background-size: 25px 25px;\n  background-image: linear-gradient(to right, #2f323d 1px, transparent 1px),\n    linear-gradient(to bottom, #2f323d 1px, transparent 1px);\n`;\n\nconst InnerDrawflow = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n`;\n\nexport const Drawflow = () => {\n  console.log(`Render Drawflow`);\n  // return null;\n\n  const {\n    config: {\n      // canvasTranslate: { x, y },\n      zoom,\n    },\n    newPathDirection,\n    canvasDrag,\n  } = useActiveFlow();\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchFlowVersion());\n  }, [dispatch]);\n\n  const flowRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const { current: flowDiv } = flowRef;\n    if (flowDiv) {\n      // console.log(flowDiv.style.transform);\n      const [x, y] = getComputedStyle(flowDiv)\n        .transform.match(/^matrix\\((.+)\\)$/)?.[1]\n        .split(\",\")\n        .slice(-2)\n        .map(Number) || [0, 0];\n      flowDiv.style.transform = `translate(${x}px, ${y}px) scale(${zoom.value})`;\n    }\n  }, [canvasDrag, zoom.value]);\n\n  return (\n    <ParentDrawflow\n      tabIndex={0}\n      onKeyDownCapture={(e) => {\n        if (e.key === \"Delete\") {\n          dispatch(actions.deletePath());\n          dispatch(actions.deleteNode());\n        }\n        if (e.ctrlKey && e.key === \"c\") {\n          dispatch(actions.copyNode());\n        }\n        if (e.ctrlKey && e.key === \"v\") {\n          dispatch(actions.insertCopiedNode());\n        }\n      }}\n      onMouseDown={(e) => {\n        dispatch(actions.canvasDrag(true));\n        dispatch(actions.unSelect());\n      }}\n      onMouseUp={() => dispatch(actions.canvasMouseUp())}\n      onMouseMove={(e) => {\n        const { clientX, clientY, movementX, movementY } = e;\n        const { current: flowDiv } = flowRef;\n        if (canvasDrag && flowDiv) {\n          // console.log(flowDiv.style.transform);\n          const [x, y] = getComputedStyle(flowDiv)\n            .transform.match(/^matrix\\((.+)\\)$/)?.[1]\n            .split(\",\")\n            .slice(-2)\n            .map(Number) || [0, 0];\n          flowDiv.style.transform = `translate(${x + movementX}px, ${\n            y + movementY\n          }px) scale(${zoom.value})`;\n        }\n        dispatch(\n          actions.canvasMouseMove({ clientX, clientY, movementX, movementY })\n        );\n      }}\n      onMouseEnter={(e) => {\n        const { clientX, clientY } = e;\n        dispatch(addNewNode({ clientX, clientY }));\n      }}\n    >\n      <DrawflowAdditionalArea />\n      <DrawflowZoomArea />\n      <InnerDrawflow\n        ref={flowRef}\n        className=\"drawflow\"\n        style={\n          {\n            // transform: `translate(${x}px, ${y}px) scale(${zoom.value})`,\n          }\n        }\n      >\n        <NodeList />\n        <ConnectionList />\n        {newPathDirection && <NewPath />}\n      </InnerDrawflow>\n    </ParentDrawflow>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../redux/hooks\";\nimport { dragTemplate, fetchNodeTemplates } from \"../redux/store\";\n\ntype Props = {\n  searchWord: string;\n};\n\nconst FilterList = (props: Props) => {\n  const { searchWord } = props;\n  const list = useAppSelector((s) => s.templates);\n  const dispatch = useAppDispatch();\n  const searchArr = searchWord\n    .toLowerCase()\n    .split(\" \")\n    .filter((item) => item.length > 0);\n\n  useEffect(() => {\n    dispatch(fetchNodeTemplates());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {list.map((item, idx) => {\n        const { name, type, value } = item;\n        const label = JSON.stringify(item, null, 2);\n\n        return (\n          (searchArr.find((word) => label.toLowerCase().includes(word)) ||\n            !searchArr.length) && (\n            <div\n              key={idx}\n              onMouseDownCapture={(e) => {\n                dispatch(dragTemplate(1));\n              }}\n            >\n              <pre>{`Type: ${type}\\nValue: ${value + name}`}</pre>\n            </div>\n          )\n        );\n      })}\n    </div>\n  );\n};\n\nexport default FilterList;\n","import { useEffect, useState } from \"react\";\nimport { Drawflow } from \"./components/DrawflowHook\";\nimport FilterList from \"./components/FilterList\";\nimport { useAppDispatch } from \"./redux/hooks\";\nimport { changeVersion, fetchFlowVersion } from \"./redux/store\";\n\nimport \"./drawflow.scss\";\nimport { actions } from \"./redux/drawflowSlice\";\n\nfunction App() {\n  const [searchWord, setSearchWord] = useState(\"\");\n  const dispatch = useAppDispatch();\n  console.log(\"Render App\");\n  useEffect(() => {\n    dispatch(actions.align());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"drawflow-node-list\">\n        <div className=\"drawflow-node-list-search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search templates\"\n            onChange={(e) => {\n              setSearchWord(e.target.value);\n            }}\n          />\n        </div>\n        <div className=\"drawflow-node-list-flex\">\n          <FilterList searchWord={searchWord} />\n        </div>\n      </div>\n      <div className=\"flow\">\n        <div>\n          <button onClick={() => dispatch(fetchFlowVersion())}>\n            Fetch flow version\n          </button>\n\n          <button onClick={() => dispatch(changeVersion(0))}>Version 1</button>\n          <button onClick={() => dispatch(changeVersion(1))}>Version 2</button>\n          <button onClick={() => dispatch(changeVersion(2))}>Version 3</button>\n          <button onClick={() => dispatch(actions.align())}>Align</button>\n        </div>\n        <Drawflow />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}