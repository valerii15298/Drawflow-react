{"version":3,"sources":["types.ts","components/drawflowHandler.ts","redux/Node.ts","redux/Flow.ts","redux/drawflowSlice.ts","redux/hooks.ts","components/Connection/index.ts","components/Connection/Circle.tsx","components/Connection/Path.tsx","components/NodeComponents.tsx","components/DrawflowNodeBlock.tsx","Mock/fields.mock.ts","Mock/index.ts","redux/store.ts","components/ButtonArea/DrawflowAdditionalArea.tsx","components/ButtonArea/DrawflowZoomArea.tsx","components/DrawflowHook.tsx","components/FilterList.tsx","App.tsx","index.tsx"],"names":["NODE_TYPE","Slices","MODAL_TYPE","portType","getCanvasInfo","canvas","document","querySelector","canvasRect","getBoundingClientRect","x","y","width","clientWidth","height","clientHeight","handler","createCurvature","start","end","hx1","hx2","curv","Math","abs","getPos","clientX","clientY","zoom","findIndexByElement","elmt","parentElement","arr","Array","from","childNodes","i","length","getPortPosWithZoom","size","pos","coef","Node","id","flow","state","nodeState","spacingX","spacingY","this","drawflow","head","lane","port","Object","entries","ports","find","key","filter","startsWith","parentId","keys","connections","split","toString","getNode","Number","map","parent","fullWidth","children","out1","fullChildrenWidth","forEach","node","calculateFullWidth","rez","max","update","xPos","setPos","alignChildren","subnodes","subNode","portId","conn","firstSubnode","isSub","flowLineNodes","hasSubnodes","push","newPos","moveNode","nodeId","dx","dy","data","newData","lodash","merge","assign","Flow","nodes","distanceToConnect","distanceToDisconnect","el","setLaneNumbers","heads","startId","startPort","endId","endPort","connectionAllowed","nodeIn","flowLine","currentNode","currentNodeHead","parentConnection","nodeInPortPos","portInPos","portDistances","outPorts","distance","hypot","sort","a","b","nearestPort","portToConnect","undefined","laneNodes","nextLaneNodes","console","log","nextNodes","nextNode","initialState","canvasDrag","config","drag","connectionsLabelEnable","canvasTranslate","value","min","tick","connectionsLabel","select","selectId","selectPath","showButton","newPathDirection","modalType","editLock","mouseBlockDragPos","addNode","payload","type","slice","createSlice","name","Drawflow","reducers","setEditLock","align","alignAll","action","dragNode","setMouseBlockDragPos","unSelect","moveCanvas","movementX","movementY","canvasMouseMove","prevX","prevY","canvasMouseUp","v","addConnection","deleteNode","reduce","_","val","parseInt","deletePath","load","clear","pushPorts","newValue","nodeSize","actions","drawflowSlice","reducer","selectActiveDrawflow","flows","version","useAppDispatch","useDispatch","useAppSelector","useSelector","Connection","Circle","props","property","svgKey","xmlns","className","r","onMouseDown","e","Path","d","dispatch","stopPropagation","Round","useState","JSON","stringify","DrawflowNodeBlock","inputs","outputs","refs","setRefs","ref","useRef","portComponent","portKey","onMouseUp","useEffect","current","offsetHeight","offsetWidth","getPortPos","getComputedStyle","left","top","in","out","newPorts","acc","style","cursor","onContextMenu","onDoubleClick","makeRandomNames","searchWord","result","j","word","floor","random","charAt","getGroups","number","rnd","testNode","MIDDLE","mock","getDummy","getFilters","changeVersion","createAction","addNewNode","dragTemplate","drawflowInitialState","templates","fetchNodeTemplates","createAsyncThunk","fetchFlowVersion","createReducer","builder","addCase","appState","fulfilled","addMatcher","store","configureStore","DrawflowAdditionalArea","s","onClick","DrawflowZoomArea","NewPath","error","startKey","ConnectionList","conns","endKey","NodeList","values","handleKeyDown","addEventListener","removeEventListener","currentTarget","classList","contains","onMouseMove","onMouseEnter","transform","FilterList","list","searchArr","toLowerCase","item","idx","label","includes","onMouseDownCapture","App","setSearchWord","placeholder","onChange","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"uIAAYA,EAMAC,E,kDANAD,K,cAAAA,E,gBAAAA,E,WAAAA,M,cAMAC,K,qBAAAA,M,KAIL,IAEKC,EAKAC,G,SALAD,K,8BAAAA,E,iCAAAA,M,cAKAC,K,QAAAA,E,WAAAA,M,KCbL,IAeDC,EAAgB,WAEpB,IAAMC,EAAUC,SAASC,cAAc,aAA6BA,cAAc,aAC5EC,EAAaH,EAAOI,wBAC1B,MAAO,CACLC,EAAGF,EAAWE,EACdC,EAAGH,EAAWG,EACdC,MAAOP,EAAOQ,YACdC,OAAQT,EAAOU,eAgCbC,EAAU,CACdC,gBAnDsB,SAACC,EAAYC,GACnC,IAAIC,EAAKC,EACLC,EAAQJ,EAAMR,GAAKS,EAAIT,GDDT,MCMlB,OAHAU,EAAMF,EAAMR,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKY,EAC5CD,EAAMF,EAAIT,EAAIa,KAAKC,IAAIL,EAAIT,EAAIQ,EAAMR,GAAKY,EAEnC,MAAQJ,EAAMR,EAAI,IAAMQ,EAAMP,EAAI,MAAQS,EAAM,IAAMF,EAAMP,EAAI,IAAMU,EAAM,IAAMF,EAAIR,EAAI,IAAMQ,EAAIT,EAAI,KAAOS,EAAIR,GA6C1HP,gBACAqB,OA/Ba,SAACC,EAAiBC,EAAiBC,GAChD,MAAgCxB,IAAxBM,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGC,EAAd,EAAcA,MAAOE,EAArB,EAAqBA,OACrB,MAAO,CACLJ,EAAGgB,GAAWd,GAASA,EAAQgB,IAAUlB,GAAKE,GAASA,EAAQgB,IAC/DjB,EAAGgB,GAAWb,GAAUA,EAASc,IAAUjB,GAAKG,GAAUA,EAASc,MA4BrEC,mBAxByB,SAACC,GAI1B,IAHA,IAAMC,EAAgBD,EAAKC,cACrBC,EAAMC,MAAMC,KAAKH,EAAcI,YAE5BC,EAAI,EAAGA,EAAIJ,EAAIK,OAAQD,IAC9B,GAAIJ,EAAII,KAAON,EAAM,OAAOM,EAE9B,OAAQ,GAkBRE,mBAfyB,SAACC,EAAyCC,EAAUZ,GAC7E,IAAMvB,EAASW,EAAQZ,gBACjBqC,EAAO,EAAIb,EAKjB,MAAO,CAAElB,EAHC6B,EAAK3B,MAAQ,GAAK4B,EAAI9B,EAAIL,EAAOK,GAAK+B,EAGpC9B,EAFF4B,EAAKzB,OAAS,GAAK0B,EAAI7B,EAAIN,EAAOM,GAAK8B,KAapCzB,I,+DC/DM0B,E,WAQjB,WAAYC,EAAYC,GAAa,yBAPrBD,QAOoB,OANnBE,WAMmB,OALpBD,UAKoB,OAJpBE,eAIoB,OAHpBC,SAAW,GAGS,KAFpBC,SAAW,GAGvBC,KAAKN,GAAKA,EACVM,KAAKL,KAAOA,EACZK,KAAKJ,MAAQD,EAAKC,MAClBI,KAAKH,UAAYG,KAAKJ,MAAMK,SAASD,KAAKN,I,sCAG9C,WACI,OAAOM,KAAKH,UAAUK,O,gBAG1B,WACI,OAAOF,KAAKH,UAAUM,O,gBAG1B,WACI,OAAOH,KAAKH,UAAUO,O,qBAG1B,WAAkC,IAAD,SAC7B,iBAAOC,OAAOC,QAAQN,KAAKJ,MAAMW,OAAOC,MAAK,mCAAEC,EAAF,iBAAkBA,IAAG,UAAQ,EAAKf,GAAb,mBAAlE,aAAO,EAAqF,K,oBAGhG,WAAgB,IAAD,OACX,OAAOW,OAAOC,QAAQN,KAAKJ,MAAMW,OAAOG,QAAO,mCAAED,EAAF,iBAAgBA,EAAIE,WAAJ,UAAkB,EAAKjB,GAAvB,c,kBAGnE,WAA2B,IAAD,SAChBkB,EAAQ,UAAGP,OAAOQ,KAAKb,KAAKJ,MAAMkB,aAAaN,MAAK,SAAAC,GAAG,OAAIA,EAAIM,MAAM,KAAK,KAAO,EAAKrB,GAAGsB,qBAAjF,aAAG,EAA2FD,MAAM,KAAK,GACvH,OAAOH,EAAWZ,KAAKL,KAAKsB,QAAQC,OAAON,IAAa,O,4BAG5D,WAAwB,IAAD,OACnB,OAAOP,OAAOQ,KAAKb,KAAKJ,MAAMkB,aAAaN,MAAK,SAACC,GAAS,IAAD,EAC/C1B,EAAM0B,EAAIM,MAAM,KAAKI,IAAID,QAC/B,OAAOnC,EAAI,MAAJ,UAAW,EAAKqC,cAAhB,aAAW,EAAa1B,KAAMX,EAAI,KAAO,EAAKW,IAAiB,IAAXX,EAAI,Q,qBAIvE,WACI,OAAOiB,KAAKH,UAAUwB,Y,gCAG1B,WACI,IAAMC,EAAWtB,KAAKuB,KAClBC,EAAoB,EACxBF,EAASG,SAAQ,SAAAC,GACbF,GAAqBE,EAAKC,wBAE9B,IAAMC,EAAMtD,KAAKuD,IAAI7B,KAAKrC,MACtB6D,EAAoBxB,KAAKF,UAAYwB,EAASlC,OAAS,IAE3D,OADAY,KAAK8B,OAAO,CAAET,UAAWO,IAClBA,I,2BAGX,WAAiB,IAAD,OACJL,EAASvB,KAATuB,KACR,GAAKA,EAAKnC,OAAV,CAEA,IAJY,EAIR2C,EAAO/B,KAAKT,IAAI9B,GAAKuC,KAAK2B,qBAAuB,EAAI3B,KAAKrC,MAAQ,GAJ1D,cAKO4D,GALP,IAKZ,2BAAyB,CAAC,IAAfG,EAAc,QACfjE,EAAIsE,GAAQL,EAAKC,qBAAuB,EAAID,EAAK/D,MAAQ,GAC/D+D,EAAKM,OAAO,CAAEvE,IAAGC,EAAGsC,KAAKT,IAAI7B,EAAIsC,KAAKnC,OAASmC,KAAKD,WACpDgC,GAAQL,EAAKC,qBAAuB3B,KAAKF,SACzC4B,EAAKO,iBATG,8BAYZ,IAAQC,EAAalC,KAAbkC,SACJA,EAAS9C,SACT2C,EAAO/B,KAAKT,IAAI9B,EAAIuC,KAAKrC,MAAQqC,KAAKF,SACtCoC,EAAST,SAAQ,SAAAU,GACbA,EAAQH,OAAO,CAAEvE,EAAGsE,EAAMrE,EAAG,EAAK6B,IAAI7B,IACtCqE,GAAQI,EAAQxE,MAAQ,EAAKmC,gB,sBAKzC,SAASsC,GAAiB,IAAD,OACrB,OAAO/B,OAAOQ,KAAKb,KAAKJ,MAAMkB,aACzBJ,QAAO,SAAAD,GAAG,OAAIA,EAAIM,MAAM,KAAK,KAAO,EAAKrB,GAAGsB,YAAcP,EAAIM,MAAM,KAAK,KAAOqB,EAAOpB,cACvFG,KAAI,SAAAkB,GAAI,OAAI,EAAK1C,KAAKsB,QAAQC,OAAQmB,EAAKtB,MAAM,KAAK,U,gBAG/D,WACI,OAAOf,KAAKsB,SAAS,K,wBAGzB,WACI,OAAOtB,KAAKsB,SAAS,GAAG,K,oBAK5B,WACI,OAAOtB,KAAKsB,SAAS,K,iBAKzB,WACI,IAAIF,EAASpB,KAAKoB,OAClB,QAAIA,IACIA,EAAOkB,eAAiBtC,MACrBoB,EAAOmB,S,6BAKtB,WAEI,OAAO,O,oBAMX,WAKI,IAJA,IAAMC,EAAgB,GAClBd,EAAa1B,KACbyC,EAAcf,EAAKY,aAEK,IAArBZ,EAAKH,KAAKnC,QACboD,EAAcE,KAAKhB,GACnBe,EAAcA,GAAef,EAAKY,aAClCZ,EAAOA,EAAKH,KAAK,GAGrB,OAAQG,EAAKH,KAAKnC,OAAS,EAAK,KAAO,CAAEoD,gBAAeC,iB,kBAG5D,WACI,OAAOzC,KAAKJ,MAAMK,SAASD,KAAKN,IAAI7B,S,iBAExC,WACI,OAAOmC,KAAKJ,MAAMK,SAASD,KAAKN,IAAI/B,Q,gBAGxC,WACI,MAAO,K,eAGX,WACI,OAAOqC,KAAKJ,MAAMK,SAASD,KAAKN,IAAIH,M,oBAGxC,SAAOoD,GACH,IAAQpD,EAAQS,KAART,IACA9B,EAASkF,EAATlF,EAAGC,EAAMiF,EAANjF,EACXsC,KAAKL,KAAKiD,SAAS,CAAEC,OAAQ7C,KAAKN,GAAIoD,GAAIrF,EAAI8B,EAAI9B,EAAGsF,GAAIrF,EAAI6B,EAAI7B,M,oBAGrE,SAAOsF,GACH,IAAMC,EAAUC,IAAOC,MAAMnD,KAAKH,UAAWmD,GAC7C3C,OAAO+C,OAAOpD,KAAKH,UAAWoD,O,KChKzBI,EAAb,WAOI,WAAYzD,GAAmB,IAAD,gCALdA,WAKc,OAJd0D,MAAgC,GAIlB,KAHdC,kBAAoB,IAGN,KAFdC,qBAAuB,EAGnCxD,KAAKJ,MAAQA,EACb,IAAQK,EAAaD,KAAKJ,MAAlBK,SACRI,OAAOQ,KAAKZ,GAAUkB,KAAI,SAACzB,GAAD,OAAQ,EAAK4D,MAAMpC,OAAOxB,IAAO,IAAID,EAAKyB,OAAOxB,GAAK,MAVxF,uCAaI,WACI,OAAOW,OAAOC,QAAQN,KAAKsD,OAAO5C,QAAO,oDAAsBU,UAAQD,KAAI,SAAAsC,GAAE,OAAIA,EAAG,QAd5F,qBAiBI,SAAQ/D,GACJ,OAAOM,KAAKsD,MAAM5D,KAlB1B,sBAqBI,WACIM,KAAK0D,iBACL1D,KAAK2D,MAAMlC,SAAQ,SAAAC,GAEfA,EAAKO,qBAzBjB,2BA6BI,SAAcI,GACV,IAAQuB,EAAuCvB,EAAvCuB,QAASC,EAA8BxB,EAA9BwB,UAAWC,EAAmBzB,EAAnByB,MAAOC,EAAY1B,EAAZ0B,QACnC,GAAK/D,KAAKgE,kBAAkB3B,GAA5B,CACA,IAAM5B,EAAG,UAAMmD,EAAN,YAAiBC,EAAjB,YAA8BC,EAA9B,YAAuCC,GAChD/D,KAAKJ,MAAMkB,YAAYL,GAAO,MAjCtC,+BAqCI,YAAuF,IAAnEmD,EAAkE,EAAlEA,QAASC,EAAyD,EAAzDA,UAAWC,EAA8C,EAA9CA,MAA8C,EAAvCC,QAC3C,GAAmB,IAAdF,GAAmB7D,KAAKiB,QAAQ2C,GAAStC,SAASuC,GAAWzE,QAC3DY,KAAKiB,QAAQ6C,GAAO1C,OACvB,OAAO,EACX,IAAM6C,EAASjE,KAAKiB,QAAQ6C,GACZ9D,KAAKiB,QAAQ2C,GAEZK,EAAOC,SAQxB,OAAO,IApDf,sBAuDI,YAA4C,IAAjCpB,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,GAAIF,EAAwB,EAAxBA,OACf7C,KAAKJ,MAAMK,SAAS4C,GAAQtD,IAAI9B,GAAKqF,EACrC9C,KAAKJ,MAAMK,SAAS4C,GAAQtD,IAAI7B,GAAKqF,IAzD7C,sBA4DI,YAA4C,IAAjCD,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,GAAIF,EAAwB,EAAxBA,OACf7C,KAAK4C,SAAS,CAAEE,KAAIC,KAAIF,WASxB,IAAMsB,EAAcnE,KAAKiB,QAAQ4B,GAC3BuB,EAAkBD,EAAYjE,KAChCiE,EAAYE,yBAELrE,KAAKJ,MAAMkB,YAAYqD,EAAYE,kBAE9C,IAAMC,EAAgBH,EAAYI,UAClC,GAAKD,EAAL,CACA,IAAME,EAA0D,GAYhE,GAXAnE,OAAOC,QAAQN,KAAKsD,OACf5C,QAAO,oDAAoBR,OAASkE,KACpC3C,SAAQ,YAAiB,IAAD,mBAAd/B,EAAc,KAAVgC,EAAU,KACjBR,OAAOxB,KAAQmD,GACnBnB,EAAK+C,SAAShD,SAAQ,YAAiB,IAAD,mBAAdhB,EAAc,KAATlB,EAAS,KAC5BmF,EAAWpG,KAAKqG,MAAML,EAAc7G,EAAI8B,EAAI9B,EAAG6G,EAAc5G,EAAI6B,EAAI7B,GAC3E8G,EAAc9B,KAAK,CAAEjC,MAAKiE,mBAGtCF,EAAcI,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEH,SAAWI,EAAEJ,YAEzCF,EAAcpF,OAAQ,CACtB,IAAM2F,EAAcP,EAAc,GAC9BO,EAAYL,SAAW1E,KAAKuD,kBAC5BvD,KAAKJ,MAAMoF,cAAgBD,EAAYtE,IAEvCT,KAAKJ,MAAMoF,mBAAgBC,MA/F3C,4BAoGI,WACI,IAAIC,EAAYlF,KAAK2D,MACrBuB,EAAUzD,SAAQ,SAAAC,GAAI,OAAIA,EAAKI,OAAO,CAAE5B,KAAMwB,EAAKhC,GAAIS,KAAM,OAE7D,IAJa,iBAKT,IAAMgF,EAA6B,GACnCD,EAAUzD,SAAQ,SAAAC,GACd,IAAIvB,EAAOuB,EAAKvB,KAAiB,EACzB+B,EAAmBR,EAAnBQ,SAAUhC,EAASwB,EAATxB,KAClB,GAAIgC,EAAS9C,OAAQ,CACjBgG,QAAQC,IAAI,CAAEnD,aADG,oBAECA,GAFD,IAEjB,2BAA4B,SACpBJ,OAAO,CAAE3B,KAAMA,IAAQD,UAHd,+BAMrB,IAAMoF,EAAY5D,EAAKJ,SAAS,GAChCgE,EAAU7D,SAAQ,SAAA8D,GAAQ,OAAIA,EAASzD,OAAO,CAAE5B,OAAMC,YACtDgF,EAAczC,KAAd,MAAAyC,EAAa,YAASG,OAE1BJ,EAAYC,GAfTD,EAAU9F,QAAS,QAxGlC,KCEaoG,EAA0B,CACrC3C,OAAQ,EACR4C,YAAY,EACZC,OAAQ,CACNC,MAAM,EACNC,wBAAwB,EACxBC,gBAAiB,CACfpI,EAAG,EACHC,EAAG,GAELiB,KAAM,CACJmH,MAAO,EACPjE,IAAK,EACLkE,IAAK,GACLC,KAAM,KAGV/F,SAAU,GACVa,YAAa,GACbmF,iBAAkB,GAClB1F,MAAO,GACP2F,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,iBAAkB,KAClBC,UAAW,KACXC,UAAU,EACVC,kBAAmB,CAAEhI,aAASwG,EAAWvG,aAASuG,IAGvCyB,EAAU,SAAC9G,EAAkB+G,GACxC/G,EAAMK,SAASL,EAAMiD,QAArB,2BAAoC8D,GAApC,IAA6CjH,GAAIE,EAAMiD,OAAQhF,OAAQ,EAAGF,MAAO,IACjFiC,EAAMuG,SAAWvG,EAAMiD,SACvBjD,EAAMsG,OAAS,CAAEU,KAAM,OAAQT,SAAUvG,EAAMuG,UAC/CvG,EAAM8F,OAAOC,MAAO,GA2BhBkB,EAAQC,YAAY,CACxBC,KAAM/J,EAAOgK,SACbxB,eACAyB,SAAU,CACRC,YAAa,SAACtH,EAAD,GAAiD,IAAvC+G,EAAsC,EAAtCA,QACrB/G,EAAM4G,SAAWG,GAEnBQ,MArBU,SAACvH,GACA,IAAIyD,EAAKzD,GAIjBwH,YAiBHV,QAAS,SAAC9G,EAAD,OAAqB+G,EAArB,EAAqBA,QAArB,OAA4DD,EAAQ9G,EAAO+G,IACpF/D,SAAU,SAAChD,EAAOyH,GAAR,OAAiD,IAAIhE,EAAKzD,GAAQ0H,SAASD,EAAOV,UAC5FY,qBAAsB,SAAC3H,EAAD,GAA8D,IAAzC+G,EAAwC,EAAxCA,QACzC/G,EAAM6G,kBAAoBE,GAE5Ba,SAAU,SAAC5H,GACTA,EAAM8F,OAAOC,MAAO,EACpB/F,EAAMsG,OAAS,KACftG,EAAMuG,SAAW,KACjBvG,EAAMyG,WAAa,MAErBH,OAAQ,SAACtG,EAAD,GAAqI,IAA3H+G,EAA0H,EAA1HA,QACRC,EAAmBD,EAAnBC,KAAMT,EAAaQ,EAAbR,SACdvG,EAAM8F,OAAOC,KAAgB,SAATiB,EACpBhH,EAAMsG,OAASS,EACf/G,EAAMuG,SAAN,OAAiBA,QAAjB,IAAiBA,IAAY,MAE/BsB,WAAY,SAAC7H,EAAD,GAA4G,IAAD,IAAjG+G,QAAWe,EAAsF,EAAtFA,UAAWC,EAA2E,EAA3EA,UACtC/H,EAAM6F,aACR7F,EAAM8F,OAAOG,gBAAgBpI,GAAKiK,EAClC9H,EAAM8F,OAAOG,gBAAgBnI,GAAKiK,IAGtClC,WAAY,SAAC7F,EAAD,GAAiD,IAAvC+G,EAAsC,EAAtCA,QACpB/G,EAAM6F,WAAakB,GAErBiB,gBAAiB,SAAChI,EAAD,GAAgK,IAAD,MAArJ+G,QAAWe,EAA0I,EAA1IA,UAAWC,EAA+H,EAA/HA,UAAWlJ,EAAoH,EAApHA,QAASC,EAA2G,EAA3GA,QACnE,GAAIkB,EAAM6F,WACR7F,EAAM8F,OAAOG,gBAAgBpI,GAAKiK,EAClC9H,EAAM8F,OAAOG,gBAAgBnI,GAAKiK,OAC7B,GAA2B,YAAvB,UAAA/H,EAAMsG,cAAN,eAAcU,MACvBhH,EAAM0G,iBAAmB,CAAE7H,UAASC,gBAC/B,GAAIkB,EAAM8F,OAAOC,MAAkC,kBAAnB/F,EAAMuG,SAAuB,CAElE,IAAMtD,EAASjD,EAAMuG,SACrB,EAA2CvG,EAAM6G,kBAAhCoB,EAAjB,EAAQpJ,QAAyBqJ,EAAjC,EAAwBpJ,QACxBkB,EAAM6G,kBAAoB,CAAEhI,UAASC,WACrC,IAAMc,EAAQI,EAAM8F,OAAO/G,KAAKmH,MAC1BhD,GAAMrE,EAAUoJ,GAASrI,EACzBuD,GAAMrE,EAAUoJ,GAAStI,EAC9B,IAAI6D,EAAKzD,GAAQ0H,SAAS,CAAEzE,SAAQE,KAAID,SAG7CiF,cAAe,SAACnI,GAAW,IAAD,EAClBD,EAAO,IAAI0D,EAAKzD,GACtB,GAAIA,EAAMoF,cAAe,CACvB,MAAgCpF,EAAMoF,cAAcjE,MAAM,KAAKI,KAAI,SAAA6G,GAAC,OAAI9G,OAAO8G,MAA/E,mBAAOpE,EAAP,KAAmBC,GAAnB,WACMC,EAAQ5C,OAAOtB,EAAMuG,UAE3BxG,EAAKsI,cAAc,CAAErE,UAASC,YAAWC,QAAOC,QADhC,IAGlBnE,EAAMoF,mBAAgBC,EACtBrF,EAAM0G,iBAAmB,KACzB1G,EAAM6F,YAAa,EACnB7F,EAAM8F,OAAOC,MAAO,EACO,YAAvB,UAAA/F,EAAMsG,cAAN,eAAcU,QAChBhH,EAAMsG,OAAS,MAEjBvG,EAAKyH,YAEPc,WAAY,SAACtI,GACX,IAAQkB,EAA2ClB,EAA3CkB,YAAab,EAA8BL,EAA9BK,SAAUM,EAAoBX,EAApBW,MAAO4F,EAAavG,EAAbuG,SACjCA,GAAiC,kBAAbA,IAGzB9F,OAAOQ,KAAKC,GAAaqH,QAAO,SAACC,EAAGC,GAClC,IAAMtJ,EAAMsJ,EAAItH,MAAM,KAAKI,KAAI,SAAA6G,GAAC,OAAIM,SAASN,MAI7C,OAHa,EAATjJ,EAAI,KAAWoH,GAAqB,EAATpH,EAAI,KAAWoH,UACrCrF,EAAYuH,GAEd,OACN,MAEHhI,OAAOQ,KAAKN,GAAO4H,QAAO,SAACC,EAAGC,GAK5B,OAHa,EADDA,EAAItH,MAAM,KAAKI,KAAI,SAAA6G,GAAC,OAAIM,SAASN,MACrC,KAAW7B,UACV5F,EAAM8H,GAER,OACN,aAEIpI,EAASkG,GAEhBvG,EAAMsG,OAAS,KACftG,EAAMuG,SAAW,KACjBvG,EAAMyG,WAAa,OAErBkC,WAAY,SAAC3I,GACX,IAAQuG,EAA0BvG,EAA1BuG,SAAUrF,EAAgBlB,EAAhBkB,YACM,kBAAbqF,UACFrF,EAAYqF,IAEvBqC,KA1HS,SAAC5I,EAAD,GAA6D,IAAxC+G,EAAuC,EAAvCA,QAKhC,OAJAtG,OAAO+C,OAAOxD,EAAO4F,GACrB5F,EAAMK,SAAW0G,EAAQ1G,SACzBL,EAAMiD,OAASxC,OAAOQ,KAAK8F,EAAQ1G,UAAUb,OAAS,EACtDQ,EAAMkB,YAAc6F,EAAQ7F,YACrBlB,GAsHLqI,cAAe,SAACrI,EAAOyH,GACR,IAAIhE,EAAKzD,GACjBqI,cAAcZ,EAAOV,UAE5B8B,MAAO,kBAAMjD,GACbkD,UAAW,SAAC9I,EAAD,GAA0D,IAArC+G,EAAoC,EAApCA,QAC9B/G,EAAMW,MAAN,2BAAmBX,EAAMW,OAAUoG,IAErChI,KAAM,SAACiB,EAAD,GAAwD,IAA9C+G,EAA6C,EAA7CA,QACNhI,EAASiB,EAAM8F,OAAf/G,KACAmH,EAA0BnH,EAA1BmH,MAAOjE,EAAmBlD,EAAnBkD,IAAKkE,EAAcpH,EAAdoH,IAAKC,EAASrH,EAATqH,KACnB2C,EAAW7C,GAASa,EAAUX,GAAQA,GACxC2C,GAAY9G,GAAO8G,GAAY5C,IACjCpH,EAAKmH,MAAQ6C,GAEC,OAAZhC,IACF/G,EAAM8F,OAAOG,gBAAkB,CAAEpI,EAAG,EAAGC,EAAG,GAC1CiB,EAAKmH,MAAQ,IAGjB8C,SAAU,SAAChJ,EAAD,GAA8G,IAAD,IAAnG+G,QAAW9I,EAAwF,EAAxFA,OAAQF,EAAgF,EAAhFA,MAAO+B,EAAyE,EAAzEA,GAC5CE,EAAMK,SAASP,GAAI7B,OAASA,EAC5B+B,EAAMK,SAASP,GAAI/B,MAAQA,MAKpBkL,EAAUhC,EAAMgC,QAChBC,EAAgBjC,EAAMkC,QAGtBC,EAAuB,SAACpJ,GAAD,OAAsBA,EAAMqJ,MAAMrJ,EAAMsJ,U,OCrM/DC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,OCGhDC,EALI,CACfC,OCFoB,SAACC,GACrB,IAAQC,EAAkCD,EAAlCC,SAAUC,EAAwBF,EAAxBE,OAAQxK,EAAgBsK,EAAhBtK,EAAGqH,EAAaiD,EAAbjD,SAU7B,OACI,kDACQkD,GADR,IAEIE,MAAM,6BACNC,UAAU,QACVC,EAAG,EACHC,YAdY,SAACC,GACbxD,GACJiD,EAAMvD,OAAO8D,EAAG,CACZL,SACAxK,WDJR8K,KEIS,SAACR,GACV,IAAQE,EAAcF,EAAdE,OAAQO,EAAMT,EAANS,EAER/D,EADMkD,EAAeL,GACrB7C,SACFgE,EAAWhB,IAGXU,EAAY,cAAiB1D,IAAawD,GAAUA,EAAU,SAAW,IAE/E,OAAO,sBACHC,MAAM,6BACNC,UAAWA,EACXK,EAAGA,EACHH,YAAa,SAACC,GACVA,EAAEI,kBAEFD,EAAStB,EAAQ3C,OAAO,CAAEU,KAAM,OAAQT,SAAUwD,U,QCtBjDU,EAAQ,SAACZ,GAClB,MAAea,mBAASb,GAAxB,mBAAO5E,EAAP,UACA,OACI,qBAAKgF,UAAU,aAAf,SACKU,KAAKC,UAAU3F,EAAG,KAAM,MCkJtB4F,EAhJW,SAAC,GAA4B,IAA1B/K,EAAyB,EAAzBA,GACzB,EACI2J,EAAeL,GADXhE,EAAR,EAAQA,cAAenC,EAAvB,EAAuBA,OAAQsD,EAA/B,EAA+BA,SAAUD,EAAzC,EAAyCA,OAAQR,EAAjD,EAAiDA,OAA0BhE,EAA3E,EAAyDzB,SAAaP,GAEhEyK,EAAWhB,IACT/I,EAAcsB,EAAdtB,KAAMb,EAAQmC,EAARnC,IAEd,EAAwB+K,mBAAS,CAC7BI,OAAQ,GACRC,QAAS,KAFb,mBAAOC,EAAP,KAAaC,EAAb,KAIMC,EAAMC,iBAAuB,MAE7BC,EAAgB,SAACpE,GAGnB,IAFA,IAAI7H,EAAM,GAD4B,WAG7BI,GACL,IAAMsB,EAAG,UAAMmG,EAAN,eAAiBzH,GACpB8L,EAAO,UAAMvL,EAAN,YAAYkH,EAAZ,YAAoBzH,GAC3BiB,EACF,qBACI2J,YAAa,SAACC,GACVA,EAAEI,kBACFD,EAAStB,EAAQ3C,OAAO,CACpBU,KAAOA,EAAO,MACdxE,OAAQjD,EACRgH,SAAUzG,MAIlBmK,UAAS,UAAKjD,EAAL,eAAgBnG,EAAhB,YAAuBwK,GAChCC,UAAW,SAAAlB,GACP,GAAa,OAATpD,GAAqC,kBAAbT,IAAyB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAQ9D,QAA9D,CACA,IAAM0B,EAAQpE,EACRqE,EAAU5E,EACVyE,EAAUuC,EACVtC,EAAYqC,EAAO9D,OAErBwB,IAAYE,GAChBqG,EAAStB,EAAQZ,cAAc,CAAErE,UAASC,YAAWC,QAAOC,eAnBpE,SAsBI,qBAAK8F,UAAS,oBAAgB7E,IAAkBiG,EAAW,IAAQ,gBAb9DxK,GAeb1B,EAAI2D,KAAKtC,IA5BJjB,EAAI,EAAGA,GAAKiB,EAAKwG,GAAOzH,IAAM,EAA9BA,GA+BT,OACI,qBAAK0K,UAAS,UAAKjD,EAAL,QAAd,SACK7H,KAuDb,OAlDAoM,qBAAU,WACN,GAAIL,EAAIM,QAAS,CAEb,IAAMV,EAAS1L,MAAMC,KAAK6L,EAAIM,QAAQ9N,cAAc,WAAWgE,UAEzDqJ,EAAU3L,MAAMC,KAAK6L,EAAIM,QAAQ9N,cAAc,YAAYgE,UAEjEuJ,EAAQ,CAAEH,SAAQC,eAEvB,CAACG,IAEJK,qBAAU,WACN,GAAIL,EAAIM,QAAS,CACb,MAAsCN,EAAIM,QAAlCC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YACtBnB,EAAStB,EAAQD,SAAS,CAAE/K,OAAQwN,EAAc1N,MAAO2N,EAAa5L,WAE3E,CAACyK,EAAUzK,EAAIoL,EAAKpJ,IAGvByJ,qBAAU,WACN,IAAMI,EAAa,SAAC3E,EAAgBzH,EAAWN,GAC3C,IAAM4B,EAAG,UAAMf,EAAN,YAAYkH,EAAZ,YAAoBzH,GACvB1B,EAAI6K,SAASkD,iBAAiB3M,GAAM4M,MAAQ/J,EAAKnC,IAAI9B,EACrDC,EAAI4K,SAASkD,iBAAiB3M,GAAM6M,KAAOhK,EAAKnC,IAAI7B,EAE1D,OAAO,eACF+C,EAAM,CAAEhD,IAAGC,OAIpB,GAAIkN,EAAKF,QAAUE,EAAKD,SAAWvK,EAAKuL,KAAOf,EAAKF,OAAOtL,QAAUgB,EAAKwL,MAAQhB,EAAKD,QAAQvL,OAAQ,CACnG,IAAIyM,EAAW,GACfA,EAAWxL,OAAO+C,OAAOyI,EAAUjB,EAAKF,OAAOvC,QAAO,SAAC2D,EAAKjN,EAAMM,GAC9D,OAAOkB,OAAO+C,OAAO0I,EAAKP,EAAWrO,EAASyO,GAAIxM,EAAI,EAAGN,MAC1D,KACHgN,EAAWxL,OAAO+C,OAAOyI,EAAUjB,EAAKD,QAAQxC,QAAO,SAAC2D,EAAKjN,EAAMM,GAC/D,OAAOkB,OAAO+C,OAAO0I,EAAKP,EAAWrO,EAAS0O,IAAKzM,EAAI,EAAGN,MAC3D,KACHsL,EAAStB,EAAQH,UAAUmD,OAEhC,CAACtM,EAAK4K,EAAUS,EAAKF,OAAQE,EAAKD,QAASvK,EAAKuL,GAAIvL,EAAKwL,IAAKlM,EAAIgC,EAAKnC,IAAI9B,EAAGiE,EAAKnC,IAAI7B,IAE1FyN,qBAAU,WAEN,GAAIL,EAAIM,SAAWvI,EAAS,IAAMnD,GAAMgG,EAAOC,KAAM,CACjD,MAAsCmF,EAAIM,QAAlCC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YACtBnB,EAAStB,EAAQjG,SAAS,CAAEC,OAAQnD,EAAIoD,GAAmB,IAAdwI,EAAmBvI,GAAoB,IAAfsI,QAE1E,IAGC,sBACIP,IAAKA,EACLjB,UAAW,eAAQnK,EAAR,iCAA4CyG,IAAazG,EAAK,UAAY,IACrFqM,MAAO,CACHL,IAAKnM,EAAI7B,EAAI,KACb+N,KAAMlM,EAAI9B,EAAI,KACduO,OAAQ,QAEZjC,YAAa,SAAAC,GACTA,EAAEI,kBACF,IAAQ3L,EAAqBuL,EAArBvL,QAASC,EAAYsL,EAAZtL,QACjByL,EAAStB,EAAQ3C,OAAO,CAAEU,KAAM,OAAQT,SAAUzG,KAClDyK,EAAStB,EAAQtB,qBAAqB,CAAE9I,UAASC,cAErDuN,cAAe,SAAAjC,KAGfkC,cAAe,aAjBnB,UAqBKlB,EAAc9N,EAASyO,IACxB,qBACI9B,UAAU,wBADd,SAGI,cAAC,EAAD,eAAWnI,MAEdsJ,EAAc9N,EAAS0O,S,uBC5I9BO,EAAkB,SAAC/M,EAAgBgN,GAGrC,IAHgF,IAAvBvK,EAAsB,uDAAhB,GAAIkE,EAAY,uDAAN,EACnEsG,EAAS,GACTlL,EAAM,iEACHmL,EAAI,EAAGA,EAAIlN,EAAQkN,IAAK,CAE7B,IADA,IAAIC,EAAO,GACFpN,EAAI,EAAGA,EAAIb,KAAKkO,MAAMlO,KAAKmO,UAAY5K,EAAMkE,GAAOA,GAAM5G,IAC/DoN,GAAQpL,EAAIuL,OAAOpO,KAAKkO,MAAMlO,KAAKmO,SAAWtL,EAAI/B,SAElDgN,EAAWhN,OAAS,IACpBmN,GAAQH,GAEZC,EAAO3J,KAAK6J,GAEhB,OAAOF,GAgBIM,EAbA,uCAAG,WAAOC,GAAP,mBAAA/H,EAAA,sDAOd,IANMgI,EAAM,iBAAO,CACfjG,KAAM,MACNG,KAAM,OACNjB,MAAOqG,EAAgB,EAAG,GAAI,GAAI,GAAG,KAEnCvK,EAAM,GACHzC,EAAI,EAAGA,EAAIyN,IAAUzN,EAC1ByC,EAAIc,KAAKmK,KARC,yBAUPjL,GAVO,2CAAH,sDCZFkL,EAAW,WACpB,MAAO,CACHpN,GAAI,EACJ,KAAQ3C,EAAUgQ,OAClB,KAAQ,CACJ,KAAQ,SACR,KAAQ,eACR,MAAS,UAEb,KAAQ,CACJ,GAAM,EACN,IAAO,GAEX,IAAO,CACH,GAAM,GACN,EAAK,KAET,OAAS,EACTlP,OAAQ,EACRF,MAAO,IAiCAqP,EALF,CACTC,SAzBU,uCAAG,gCAAApI,EAAA,sDAUf,IATM7B,EAAY,CAChB,MAAS,GAET,YAAe,CACb,UAAW,GACX,UAAW,KAIN7D,EAAI,EAAGA,EAAI,IAAKA,GACjBuC,EAAOoL,KACRpN,GAAKP,EACVuC,EAAKsB,KAAK+D,KAAV,eAAyB5H,GACzBuC,EAAKnC,IAAI9B,EAAI,IAAM0B,EACnBuC,EAAKnC,IAAI7B,EAAI,GAAKyB,EAClB6D,EAAKM,MAAMnE,GAAKuC,EAhBH,yBAoBRsB,GApBQ,2CAAH,qDA0BVkK,cC9CSC,EAAgBC,YAAqB,oBACrCC,EAAaD,YAAwB,cACrCE,EAAeF,YAAqB,gBAE3C5H,EAAyB,CAC7B0D,QAAS,EACTD,MAAO,CAACsE,EAAsBA,EAAsBA,GACpDC,UAAW,GACXF,aAAc,GAGHG,EAAqBC,YAAiB,aAAD,sBAAe,sBAAA7I,EAAA,sEAClDmI,EAAKE,WAAW,GADkC,oFAIpDS,EAAmBD,YAAiB,mBAAD,sBAAqB,sBAAA7I,EAAA,sEACtDmI,EAAKC,WADiD,oFAK/DlE,EAAU6E,YAAcpI,GAAc,SAACqI,GAC3CA,EACGC,QAAQX,GAAe,SAACvN,EAAD,GAAyB,IAAf+G,EAAc,EAAdA,QAChC/G,EAAMsJ,QAAUvC,KAEjBmH,QAAQT,GAAY,SAACU,EAAD,GAAsF,IAAD,IAA9DpH,QAAWlI,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,QAC9D,GAAKqP,EAAST,aAAd,CAEA,IAAM1N,EAAQmO,EAAS9E,MAAM8E,EAAS7E,SAChCxH,EAAOoL,IACbpL,EAAKnC,IAAMxB,EAAQS,OAAOC,EAASC,EAASkB,EAAM8F,OAAO/G,KAAKmH,OAC9DlG,EAAM6G,kBAAoB,CAAEhI,UAASC,WACrCgI,EAAQ9G,EAAO8B,GACfqM,EAAST,kBAAerI,MAEzB6I,QAAQR,GAAc,SAACS,EAAD,GAA0B,IAAdpH,EAAa,EAAbA,QACjCoH,EAAST,aAAe3G,KAEzBmH,QAAQL,EAAmBO,WAAW,SAACpO,EAAOyH,GAC7CzH,EAAM4N,UAAYnG,EAAOV,WAE1BmH,QAAQH,EAAiBK,WAAW,SAACpO,EAAOyH,GAC3C,MAAyCA,EAAOV,QAAjC1G,EAAf,EAAQqD,MAAiBxC,EAAzB,EAAyBA,YACzBlB,EAAMqJ,MAAMrJ,EAAMsJ,SAAWJ,EAC3BlJ,EAAMqJ,MAAMrJ,EAAMsJ,SAClB,CACEtC,KAAM5J,EAAOgK,SAAW,QACxBL,QAAS,CAAE1G,WAAUa,oBAK1BmN,YACC,SAAC5G,GAAD,OAAYA,EAAOT,KAAKjG,WAAW3D,EAAOgK,aAC1C,SAACpH,EAAOyH,GACNzH,EAAMqJ,MAAMrJ,EAAMsJ,SAAWJ,EAAclJ,EAAMqJ,MAAMrJ,EAAMsJ,SAAU7B,SAOlE6G,EAAQC,YAAe,CAClCpF,YCnDaqF,GAhBgB,WAC3B,IAAM5H,EAAW6C,GAAe,SAAAgF,GAAC,OAAIrF,EAAqBqF,GAAG7H,YACvD2D,EAAWhB,IAEjB,OACI,sBAAKU,UAAU,sBAAf,WACMrD,GACE,mCACI,wBAAQqD,UAAU,6BAA6ByE,QAAS,kBAAMlJ,QAAQC,IAAI,UAA1E,qBAGR,wBAAQwE,UAAU,6BAA6ByE,QAAS,kBAAMnE,EAAStB,EAAQ3B,aAAaV,KAA5F,SAAyGA,EAAW,SAAW,aCC5H+H,GAZU,WACrB,IAAMpE,EAAWhB,IAEjB,OACI,sBAAKU,UAAU,gBAAf,UACI,wBAAQA,UAAU,uBAAuByE,QAAS,kBAAMnE,EAAStB,EAAQlK,MAAK,KAA9E,eACA,wBAAQkL,UAAU,uBAAuByE,QAAS,kBAAMnE,EAAStB,EAAQlK,MAAK,KAA9E,eACA,wBAAQkL,UAAU,uBAAuByE,QAAS,kBAAMnE,EAAStB,EAAQlK,KAAK,QAA9E,uBCAC6P,GAAU,WACnB,IAAM5O,EAAQyJ,EAAeL,GAErB9C,EAAsDtG,EAAtDsG,OAAQR,EAA8C9F,EAA9C8F,OAAQnF,EAAsCX,EAAtCW,MAAO4F,EAA+BvG,EAA/BuG,SAAUG,EAAqB1G,EAArB0G,iBACzC,KAAI,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAQ9D,QAAoD,OAA1CgD,QAAQqJ,MAAR,2BAAiD,KACxE,IAAMC,EAAQ,UAAMvI,EAAN,gBAAsBD,EAAO9D,QAE3C,IAAK7B,EAAMmO,GAAwD,OAA3CtJ,QAAQqJ,MAAR,4BAAkD,KAC1E,IAAKnI,EAA0D,OAAtClB,QAAQqJ,MAAR,uBAA6C,KAEtE,IAAMxQ,EAAQ,CACVR,EAAG8C,EAAMmO,GAAUjR,EACnBC,EAAG6C,EAAMmO,GAAUhR,GAEjBiB,EAAO+G,EAAO/G,KAAKmH,MACjBrH,EAAqB6H,EAArB7H,QAASC,EAAY4H,EAAZ5H,QACXR,EAAMH,EAAQS,OAAOC,EAASC,EAASC,GACvCuL,EAAInM,EAAQC,gBAAgBC,EAAOC,GAEzC,OAAO,qBACH0L,MAAM,6BACNC,UAAU,sBAFP,SAIH,cAAC,EAAWI,KAAZ,CACIC,EAAGA,OAMFyE,GAAiB,WAC1B,MAA+BtF,EAAeL,GAAtClI,EAAR,EAAQA,YAAaP,EAArB,EAAqBA,MAEfqO,EAAQvO,OAAOC,QAAQQ,GAAaK,KAAI,YAAY,IAAVV,EAAS,oBAE/C1B,EAAM0B,EAAIM,MAAM,KAChB2N,EAAQ,UAAM3P,EAAI,GAAV,gBAAoBA,EAAI,IAChC8P,EAAM,UAAM9P,EAAI,GAAV,eAAmBA,EAAI,IAEnC,IAAKwB,EAAMmO,KAAcnO,EAAMsO,GAE3B,OAAO,KAGX,IAAM5Q,EAAQ,CACVR,EAAG8C,EAAMmO,GAAUjR,EACnBC,EAAG6C,EAAMmO,GAAUhR,GAEjBQ,EAAM,CACRT,EAAG8C,EAAMsO,GAAQpR,EACjBC,EAAG6C,EAAMsO,GAAQnR,GAEfwM,EAAInM,EAAQC,gBAAgBC,EAAOC,GACzC,OAAO,8BACH,qBACI0L,MAAM,6BACNC,UAAU,sBAFd,SAII,cAAC,EAAWI,KAAZ,CACIN,OAAQlJ,EACRyJ,EAAGA,OAPEzJ,MAarB,OAAO,mCAAGmO,KAGDE,GAAW,WACpB,IAAM7O,EAAWoJ,GAAe,SAAAgF,GAAC,OAAIrF,EAAqBqF,GAAGpO,YAE7D,OAAO,mCAAGI,OAAO0O,OAAO9O,GAAUkB,KAAI,SAACO,GACnC,OAAO,cAAC,EAAD,CAEHhC,GAAIgC,EAAKhC,IADJgC,EAAKhC,UAQTsH,GAAW,WACpB,MACMqC,EAAeL,GADb9C,EAAR,EAAQA,OAAR,IAAgBR,OAAhB,IAA0BG,gBAAmBpI,EAA7C,EAA6CA,EAAGC,EAAhD,EAAgDA,EAAKiB,EAArD,EAAqDA,KAAQ2H,EAA7D,EAA6DA,iBAGvD6D,EAAWhB,IAwBjB,OAtBAgC,qBAAU,WACNhB,EAASwD,OACV,IAEHxC,qBAAU,WACN,IAAM6D,EAAgB,SAAChF,GACL,WAAVA,EAAEvJ,MACmB,UAAX,OAANyF,QAAM,IAANA,OAAA,EAAAA,EAAQU,MACRuD,EAAStB,EAAQN,cAGjB4B,EAAStB,EAAQX,gBAK7B,OADA7K,SAAS4R,iBAAiB,UAAWD,GAC9B,WACH3R,SAAS6R,oBAAoB,UAAWF,MAE7C,CAAC7E,EAAD,OAAWjE,QAAX,IAAWA,OAAX,EAAWA,EAAQU,OAIlB,sBACIlH,GAAG,WACHmK,UAAU,kBACVE,YAAa,SAACC,GACLA,EAAEmF,cAAcC,UAAUC,SAAS,qBACxClF,EAAStB,EAAQpD,YAAW,IAC5B0E,EAAStB,EAAQrB,cAErB0D,UAAW,kBAAMf,EAAStB,EAAQd,kBAClCuH,YAAa,SAACtF,GACV,IAAQvL,EAA2CuL,EAA3CvL,QAASC,EAAkCsL,EAAlCtL,QAASgJ,EAAyBsC,EAAzBtC,UAAWC,EAAcqC,EAAdrC,UACrCwC,EAAStB,EAAQjB,gBAAgB,CAAEnJ,UAASC,UAASgJ,YAAWC,gBAEpE4H,aAAc,SAACvF,GACX,IAAQvL,EAAqBuL,EAArBvL,QAASC,EAAYsL,EAAZtL,QACjByL,EAASkD,EAAW,CAAE5O,UAASC,cAfvC,UAkBI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,sBACImL,UAAU,WACVkC,MAAO,CACHyD,UAAU,aAAD,OAAe/R,EAAf,eAAuBC,EAAvB,qBAAqCiB,EAAKmH,MAA1C,MAHjB,UAMI,cAAC,GAAD,IACA,cAAC,GAAD,IACCQ,GAAoB,cAAC,GAAD,WCzGtBmJ,GApCI,SAAChG,GAChB,IAAQ2C,EAAe3C,EAAf2C,WACFsD,EAAOrG,GAAe,SAAAgF,GAAC,OAAIA,EAAEb,aAC7BrD,EAAWhB,IACXwG,EAAYvD,EAAWwD,cAAc7O,MAAM,KAAKL,QAAO,SAAAmP,GAAI,OAAIA,EAAKzQ,OAAS,KAOnF,OAJA+L,qBAAU,WACNhB,EAASsD,OACV,CAACtD,IAGA,qBACIN,UAAU,0BADd,SAGK6F,EAAKvO,KAAI,SAAC0O,EAAMC,GACb,IAAQ/I,EAAsB8I,EAAtB9I,KAAMH,EAAgBiJ,EAAhBjJ,KAAMd,EAAU+J,EAAV/J,MACdiK,EAAQxF,KAAKC,UAAUqF,EAAM,KAAM,GAEzC,OACKF,EAAUnP,MAAK,SAAA+L,GAAI,OAAIwD,EAAMH,cAAcI,SAASzD,QAAWoD,EAAUvQ,SAC1E,qBAEIyK,UAAU,sBACVoG,mBAAoB,SAACjG,GACjBG,EAASmD,EAAa,KAJ9B,SAOI,8CAAe1G,EAAf,oBAA+Bd,EAAQiB,MANlC,2BAA6B+I,S,MCiB3CI,OAtCf,WAEE,MAAoC5F,mBAAS,IAA7C,mBAAO8B,EAAP,KAAmB+D,EAAnB,KACMhG,EAAWhB,IAIjB,OACE,sBAAKU,UAAU,MAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,qBAAKA,UAAU,4BAAf,SACE,uBACEjD,KAAK,OACLwJ,YAAY,mBACZC,SAAU,SAAArG,GAAOmG,EAAcnG,EAAEsG,OAAOxK,YAG5C,qBAAK+D,UAAU,0BAAf,SACE,cAAC,GAAD,CACEuC,WAAYA,SAIlB,sBAAKvC,UAAU,OAAf,UACE,gCACE,wBAAQyE,QAAS,kBAAMnE,EAASwD,MAAhC,gCAEA,wBAAQW,QAAS,kBAAMnE,EAASgD,EAAc,KAA9C,uBACA,wBAAQmB,QAAS,kBAAMnE,EAASgD,EAAc,KAA9C,uBACA,wBAAQmB,QAAS,kBAAMnE,EAASgD,EAAc,KAA9C,uBACA,wBAAQmB,QAAS,kBAAMnE,EAAStB,EAAQ1B,UAAxC,sBAEF,cAAC,GAAD,WCjCRoJ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUvC,MAAOA,EAAjB,SACE,cAAC,GAAD,QAGJ7Q,SAASqT,eAAe,W","file":"static/js/main.6c445061.chunk.js","sourcesContent":["export enum NODE_TYPE {\n    START = 'START',\n    MIDDLE = 'MIDDLE',\n    END = 'END',\n}\n\nexport enum Slices {\n    Drawflow = 'drawflow'\n}\n\nexport const CURV = 0.3;\n\nexport enum MODAL_TYPE {\n    NODE_SETTINGS = \"NODE_SETTINGS\",\n    GROUP_SETTINGS = \"GROUP_SETTINGS\",\n}\n\nexport enum portType {\n    in='in',\n    out='out'\n}\n\nexport type pos = {\n    x: number,\n    y: number,\n}\n\nexport type clientPos = {\n    clientX: number,\n    clientY: number,\n}\n\nexport type port = {\n    in: number,\n    out: number,\n}\n\n\n\nexport type ports = {\n    [propName: string]: pos\n}\n\n\n\nexport type block = {\n    name: string,\n    type: string,\n    value: string,\n    create?: boolean\n}\n\n\n\nexport type dataNode = {\n    type: string\n    data: block\n    port: port\n    pos: pos\n    isSub: boolean\n}\n\nexport interface node extends dataNode {\n    id: number\n    height: number\n    width: number\n    lane?: number\n    position?: number\n    head?: number\n    fullWidth?: number\n}\n\ntype RecursivePartial<T> = {\n    [P in keyof T]?:\n    T[P] extends (infer U)[] ? RecursivePartial<U>[] :\n    T[P] extends object ? RecursivePartial<T[P]> :\n    T[P];\n}\n\nexport type updateNode = RecursivePartial<node>\n\nexport type drawflow = {\n    [id: number]: node\n}\n\nexport type connections = {\n    [propName: string]: pos[]\n}\n\nexport type data = {\n    nodes: drawflow,\n    connections: connections,\n    connectionsLabel?: {\n        [propName: string]: string\n    },\n}\n\nexport interface stateData {\n    nodeId: number,\n    canvasDrag: boolean,\n    config: {\n        drag: boolean,\n        connectionsLabelEnable: boolean,\n        canvasTranslate: pos,\n        zoom: {\n            value: number,\n            max: number,\n            min: number,\n            tick: number,\n        },\n    },\n    drawflow: drawflow,\n    modalType: string | null,\n    newPathDirection: clientPos | null,\n    ports: ports,\n    connections: connections,\n    connectionsLabel: {\n        [propName: string]: string\n    },\n    selectId: string | number | null,\n    select: { type: string, portId?: number, selectId?: string | number } | null,\n    selectPath: string | null,\n    showButton: number | null,\n    editLock: boolean,\n    mouseBlockDragPos: { clientX?: number, clientY?: number },\n    portToConnect?: string\n}\n\nexport interface flowType {\n    version: number\n    flows: stateData[]\n    dragTemplate?: number\n    templates: block[]\n}\n\nexport type addConnectionType = { startId: number, startPort: number, endId: number, endPort: number }\nexport type loadType = { drawflow: drawflow, connections: connections }\nexport type moveNodeType = { dx: number, dy: number, nodeId: number }","import { CURV, stateData } from \"../types\";\n\nimport { pos } from \"../types\";\n\nexport const getPortListByNodeId = (nodeId: number, state: stateData) => {\n  const { ports } = state;\n  return Object.keys(ports).filter(key => key.split(/_/g)[0] === \"\" + nodeId);\n}\n\nconst createCurvature = (start: pos, end: pos) => {\n  let hx1, hx2\n  let curv = (start.x >= end.x) ? -CURV : CURV\n\n  hx1 = start.x + Math.abs(end.x - start.x) * curv;\n  hx2 = end.x - Math.abs(end.x - start.x) * curv;\n\n  return ' M ' + start.x + ' ' + start.y + ' C ' + hx1 + ' ' + start.y + ' ' + hx2 + ' ' + end.y + ' ' + end.x + '  ' + end.y;\n}\n\nconst getCanvasInfo = () => {\n  // TODO : replace querySelector to someting\n  const canvas = (document.querySelector(\"#drawflow\") as HTMLElement).querySelector(\".drawflow\") as HTMLElement;\n  const canvasRect = canvas.getBoundingClientRect();\n  return {\n    x: canvasRect.x,\n    y: canvasRect.y,\n    width: canvas.clientWidth,\n    height: canvas.clientHeight,\n  };\n}\n\nconst getPos = (clientX: number, clientY: number, zoom: number) => {\n  const { x, y, width, height } = getCanvasInfo();\n  return {\n    x: clientX * (width / (width * zoom)) - (x * (width / (width * zoom))),\n    y: clientY * (height / (height * zoom)) - (y * (height / (height * zoom))),\n  }\n}\n\nconst findIndexByElement = (elmt: HTMLElement) => {\n  const parentElement = elmt.parentElement as HTMLElement;\n  const arr = Array.from(parentElement.childNodes);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === elmt) return i;\n  }\n  return -1;\n}\n\nconst getPortPosWithZoom = (size: { width: number, height: number }, pos: pos, zoom: number) => {\n  const canvas = handler.getCanvasInfo();\n  const coef = 1 / zoom\n\n  const x = size.width / 2 + (pos.x - canvas.x) * coef;\n  const y = size.height / 2 + (pos.y - canvas.y) * coef;\n\n  return { x, y };\n}\n\nconst handler = {\n  createCurvature,\n  getCanvasInfo,\n  getPos,\n  findIndexByElement,\n  getPortPosWithZoom,\n}\n\nexport default handler\n","import lodash from \"lodash\"\nimport { node, port, pos, stateData, updateNode } from \"../types\"\nimport { Flow } from \"./Flow\"\n\nexport default class Node {\n    public readonly id: number\n    private readonly state: stateData\n    public readonly flow: Flow\n    public readonly nodeState: node\n    public readonly spacingX = 40\n    public readonly spacingY = 60\n\n    constructor(id: number, flow: Flow) {\n        this.id = id\n        this.flow = flow\n        this.state = flow.state\n        this.nodeState = this.state.drawflow[this.id]\n    }\n\n    get head() {\n        return this.nodeState.head\n    }\n\n    get lane() {\n        return this.nodeState.lane\n    }\n\n    get port(): port {\n        return this.nodeState.port\n    }\n\n    get portInPos(): pos | undefined {\n        return Object.entries(this.state.ports).find(([key, value]) => key === `${this.id}_in_1`)?.[1]\n    }\n\n    get outPorts() {\n        return Object.entries(this.state.ports).filter(([key, pos]) => key.startsWith(`${this.id}_out`))\n    }\n\n    get parent(): Node | null {\n        const parentId = Object.keys(this.state.connections).find(key => key.split('_')[2] === this.id.toString())?.split('_')[0]\n        return parentId ? this.flow.getNode(Number(parentId)) : null\n    }\n\n    get parentConnection() {\n        return Object.keys(this.state.connections).find((key) => {\n            const arr = key.split('_').map(Number)\n            return arr[0] === this.parent?.id && arr[2] === this.id && arr[3] === 1\n        })\n    }\n\n    get fullWidth() {\n        return this.nodeState.fullWidth\n    }\n\n    calculateFullWidth() {\n        const children = this.out1\n        let fullChildrenWidth = 0\n        children.forEach(node => {\n            fullChildrenWidth += node.calculateFullWidth()\n        })\n        const rez = Math.max(this.width,\n            fullChildrenWidth + this.spacingX * (children.length - 1))\n        this.update({ fullWidth: rez })\n        return rez\n    }\n\n    alignChildren() {\n        const { out1 } = this\n        if (!out1.length) return\n\n        let xPos = this.pos.x - (this.calculateFullWidth() / 2 - this.width / 2)\n        for (const node of out1) {\n            const x = xPos + (node.calculateFullWidth() / 2 - node.width / 2)\n            node.setPos({ x, y: this.pos.y + this.height + this.spacingY })\n            xPos += node.calculateFullWidth() + this.spacingX\n            node.alignChildren()\n        }\n\n        const { subnodes } = this\n        if (subnodes.length) {\n            xPos = this.pos.x + this.width + this.spacingX\n            subnodes.forEach(subNode => {\n                subNode.setPos({ x: xPos, y: this.pos.y })\n                xPos += subNode.width + this.spacingX\n            })\n        }\n    }\n\n    children(portId: number) {\n        return Object.keys(this.state.connections)\n            .filter(key => key.split('_')[0] === this.id.toString() && key.split('_')[1] === portId.toString())\n            .map(conn => this.flow.getNode(Number((conn.split('_')[2]))))\n    }\n\n    get out1() {\n        return this.children(1);\n    }\n\n    get firstSubnode() {\n        return this.children(2)[0];\n    }\n\n\n\n    get subnodes() {\n        return this.children(2)\n        // const { flowLine } = this;\n        // return flowLine ? flowLine.flowLineNodes : []\n    }\n\n    get isSub(): boolean {\n        let parent = this.parent\n        if (parent) {\n            if (parent.firstSubnode === this) return true\n            return parent.isSub\n        }\n        return false\n    }\n\n    get complexParentNode() {\n        // if is sub eturn complexNode to which belongs this subnode\n        return null\n    }\n\n    /**\n     * If not flow line, - returns null\n     */\n    get flowLine(): null | { flowLineNodes: Node[], hasSubnodes: Node } {\n        const flowLineNodes = [];\n        let node: Node = this;\n        let hasSubnodes = node.firstSubnode;\n\n        while (node.out1.length === 1) {\n            flowLineNodes.push(node);\n            hasSubnodes = hasSubnodes || node.firstSubnode;\n            node = node.out1[0]\n        }\n\n        return (node.out1.length > 1) ? null : { flowLineNodes, hasSubnodes };\n    }\n\n    get height() {\n        return this.state.drawflow[this.id].height\n    }\n    get width() {\n        return this.state.drawflow[this.id].width\n    }\n\n    get data() {\n        return {}\n    }\n\n    get pos() {\n        return this.state.drawflow[this.id].pos\n    }\n\n    setPos(newPos: pos) {\n        const { pos } = this;\n        const { x, y } = newPos;\n        this.flow.moveNode({ nodeId: this.id, dx: x - pos.x, dy: y - pos.y })\n    }\n\n    update(data: updateNode) {\n        const newData = lodash.merge(this.nodeState, data)\n        Object.assign(this.nodeState, newData)\n    }\n}","import { getPortListByNodeId } from \"../components/drawflowHandler\";\nimport { addConnectionType, moveNodeType, stateData } from \"../types\";\nimport Node from './Node'\n\n\nexport class Flow {\n    // readonly because we are using only immer.js with redux-toolkit\n    public readonly state: stateData\n    public readonly nodes: { [id: number]: Node } = {}\n    public readonly distanceToConnect = 100\n    public readonly distanceToDisconnect = 0\n\n    constructor(state: stateData) {\n        this.state = state\n        const { drawflow } = this.state\n        Object.keys(drawflow).map((id) => this.nodes[Number(id)] = new Node(Number(id), this))\n    }\n\n    get heads() {\n        return Object.entries(this.nodes).filter(([id, node]) => !node.parent).map(el => el[1])\n    }\n\n    getNode(id: number) {\n        return this.nodes[id]\n    }\n\n    alignAll() {\n        this.setLaneNumbers()\n        this.heads.forEach(node => {\n            // node.calculateFullWidth()\n            node.alignChildren()\n        })\n    }\n\n    addConnection(conn: addConnectionType) {\n        const { startId, startPort, endId, endPort } = conn\n        if (!this.connectionAllowed(conn)) return\n        const key = `${startId}_${startPort}_${endId}_${endPort}`;\n        this.state.connections[key] = []\n        \n    }\n\n    connectionAllowed({ startId, startPort, endId, endPort }: addConnectionType): boolean {\n        if ((startPort === 2 && this.getNode(startId).children(startPort).length)\n            || this.getNode(endId).parent)\n            return false\n        const nodeIn = this.getNode(endId)\n        const nodeOut = this.getNode(startId)\n\n        const flowLine = nodeIn.flowLine\n\n        const connectAsSub = startPort === 2\n\n        if (connectAsSub) {\n            // if (!flowLine || flowLine.hasSubnodes) { return false }\n        }\n        \n        return true\n    }\n\n    moveNode({ dx, dy, nodeId }: moveNodeType) {\n        this.state.drawflow[nodeId].pos.x += dx\n        this.state.drawflow[nodeId].pos.y += dy\n    }\n\n    dragNode({ dx, dy, nodeId }: moveNodeType) {\n        this.moveNode({ dx, dy, nodeId })\n\n        /**\n         * Attachment\n         * \n         * traverse all other nodes except this one,\n         * check if their ports are free for new conn, check distance\n         */\n\n        const currentNode = this.getNode(nodeId)\n        const currentNodeHead = currentNode.head\n        if (currentNode.parentConnection) {\n            // remove connection\n            delete this.state.connections[currentNode.parentConnection]\n        }\n        const nodeInPortPos = currentNode.portInPos\n        if (!nodeInPortPos) return\n        const portDistances: Array<{ key: string, distance: number }> = []\n        Object.entries(this.nodes)\n            .filter(([_, node]) => node.head !== currentNodeHead)\n            .forEach(([id, node]) => {\n                if (Number(id) === nodeId) return\n                node.outPorts.forEach(([key, pos]) => {\n                    const distance = Math.hypot(nodeInPortPos.x - pos.x, nodeInPortPos.y - pos.y)\n                    portDistances.push({ key, distance })\n                })\n            });\n        portDistances.sort((a, b) => (a.distance - b.distance))\n        \n        if (portDistances.length) {\n            const nearestPort = portDistances[0]\n            if (nearestPort.distance < this.distanceToConnect) {\n                this.state.portToConnect = nearestPort.key\n            } else {\n                this.state.portToConnect = undefined\n            }\n        }\n    }\n\n    setLaneNumbers() {\n        let laneNodes = this.heads\n        laneNodes.forEach(node => node.update({ head: node.id, lane: 0 }))\n\n        while (laneNodes.length) {\n            const nextLaneNodes: Array<Node> = [];\n            laneNodes.forEach(node => {\n                let lane = node.lane as number + 1\n                const { subnodes, head } = node\n                if (subnodes.length) {\n                    console.log({ subnodes })\n                    for (const sub of subnodes) {\n                        sub.update({ lane: lane++, head })\n                    }\n                }\n                const nextNodes = node.children(1)\n                nextNodes.forEach(nextNode => nextNode.update({ head, lane }))\n                nextLaneNodes.push(...nextNodes)\n            })\n            laneNodes = nextLaneNodes;\n        }\n    }\n}\n","import { createSlice, PayloadAction, createAsyncThunk, current } from '@reduxjs/toolkit'\nimport handler, { getPortListByNodeId } from '../components/drawflowHandler'\nimport { testNode } from '../Mock'\nimport { dataNode, connections, drawflow, node, ports, pos, Slices, stateData, clientPos, flowType, addConnectionType, loadType, moveNodeType } from '../types'\nimport { Flow } from './Flow'\nimport type { RootState } from './store'\n\nexport const initialState: stateData = {\n  nodeId: 1,\n  canvasDrag: false,\n  config: {\n    drag: false,\n    connectionsLabelEnable: false,\n    canvasTranslate: {\n      x: 0,\n      y: 0,\n    },\n    zoom: {\n      value: 1,\n      max: 2,\n      min: 0.5,\n      tick: 0.1,\n    },\n  },\n  drawflow: {},\n  connections: {},\n  connectionsLabel: {},\n  ports: {},\n  select: null,\n  selectId: null,\n  selectPath: null,\n  showButton: null,\n  newPathDirection: null,\n  modalType: null,\n  editLock: false,\n  mouseBlockDragPos: { clientX: undefined, clientY: undefined },\n}\n\nexport const addNode = (state: stateData, payload: dataNode) => {\n  state.drawflow[state.nodeId] = { ...payload, id: state.nodeId, height: 0, width: 0 }\n  state.selectId = state.nodeId++\n  state.select = { type: 'node', selectId: state.selectId }\n  state.config.drag = true\n}\n\n// load version from server\n\nconst load = (state: stateData, { payload }: PayloadAction<loadType>) => {\n  Object.assign(state, initialState)\n  state.drawflow = payload.drawflow\n  state.nodeId = Object.keys(payload.drawflow).length + 1\n  state.connections = payload.connections\n  return state\n}\n\nconst align = (state: stateData) => {\n  const flow = new Flow(state)\n  // const { isSub, id } = flow.getNode(1)\n  // console.log(flow.getNode(1).calculateFullWidth())\n  // flow.setLaneNumbers()\n  flow.alignAll()\n\n}\nconst setLaneNumbers = () => {\n  // iterate over nodes and add to state numbers(id, position, lane, etc: then this data will be rendered in every node)\n  // let laneNodes = this.heads\n}\n\n\nconst slice = createSlice({\n  name: Slices.Drawflow,\n  initialState,\n  reducers: {\n    setEditLock: (state, { payload }: PayloadAction<boolean>) => {\n      state.editLock = payload\n    },\n    align,\n    addNode: (state: stateData, { payload }: PayloadAction<dataNode>) => addNode(state, payload),\n    moveNode: (state, action: PayloadAction<moveNodeType>) => (new Flow(state)).dragNode(action.payload),\n    setMouseBlockDragPos: (state: stateData, { payload }: PayloadAction<clientPos>) => {\n      state.mouseBlockDragPos = payload\n    },\n    unSelect: (state) => {\n      state.config.drag = false\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    select: (state, { payload }: PayloadAction<{ type: 'node' | 'path' | 'input' | 'output', portId?: number, selectId?: string | number }>) => {\n      const { type, selectId } = payload;\n      state.config.drag = type === 'node'\n      state.select = payload\n      state.selectId = selectId ?? null;\n    },\n    moveCanvas: (state, { payload: { movementX, movementY } }: PayloadAction<{ movementX: number, movementY: number }>) => {\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n      }\n    },\n    canvasDrag: (state, { payload }: PayloadAction<boolean>) => {\n      state.canvasDrag = payload\n    },\n    canvasMouseMove: (state, { payload: { movementX, movementY, clientX, clientY } }: PayloadAction<{ clientX: number, clientY: number, movementX: number, movementY: number }>) => {\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n      } else if (state.select?.type === 'output') {\n        state.newPathDirection = { clientX, clientY }\n      } else if (state.config.drag && typeof state.selectId === 'number') {\n        // move node\n        const nodeId = state.selectId\n        const { clientX: prevX, clientY: prevY } = state.mouseBlockDragPos as clientPos\n        state.mouseBlockDragPos = { clientX, clientY }\n        const coef = (state.config.zoom.value)\n        const dx = (clientX - prevX) / coef\n        const dy = (clientY - prevY) / coef;\n        (new Flow(state)).dragNode({ nodeId, dy, dx })\n      }\n    },\n    canvasMouseUp: (state) => {\n      const flow = new Flow(state)\n      if (state.portToConnect) {\n        const [startId, _, startPort] = state.portToConnect.split('_').map(v => Number(v))\n        const endId = Number(state.selectId)\n        const endPort = 1\n        flow.addConnection({ startId, startPort, endId, endPort })\n      }\n      state.portToConnect = undefined\n      state.newPathDirection = null\n      state.canvasDrag = false\n      state.config.drag = false\n      if (state.select?.type === 'output') {\n        state.select = null\n      }\n      flow.alignAll()\n    },\n    deleteNode: (state) => {\n      const { connections, drawflow, ports, selectId } = state;\n      if (!selectId || (typeof selectId !== 'number')) return;\n\n      // 1. find in connections\n      Object.keys(connections).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId || arr[2] * 1 === selectId) {\n          delete connections[val];\n        }\n        return null;\n      }, null);\n      // 2. find in ports\n      Object.keys(ports).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId) {\n          delete ports[val];\n        }\n        return null;\n      }, null);\n      // 3. find in drawflow\n      delete drawflow[selectId];\n\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    deletePath: (state) => {\n      const { selectId, connections } = state\n      if (typeof selectId === 'string')\n        delete connections[selectId];\n    },\n    load,\n    addConnection: (state, action: PayloadAction<addConnectionType>) => {\n      const flow = new Flow(state)\n      flow.addConnection(action.payload)\n    },\n    clear: () => initialState,\n    pushPorts: (state: stateData, { payload }: PayloadAction<ports>) => {\n      state.ports = { ...state.ports, ...payload }\n    },\n    zoom: (state, { payload }: PayloadAction<boolean | null>) => {\n      const { zoom } = state.config;\n      const { value, max, min, tick } = zoom\n      const newValue = value + (payload ? tick : -tick)\n      if (newValue <= max && newValue >= min) {\n        zoom.value = newValue\n      }\n      if (payload === null) {\n        state.config.canvasTranslate = { x: 0, y: 0 }\n        zoom.value = 1\n      }\n    },\n    nodeSize: (state, { payload: { height, width, id } }: PayloadAction<{ id: number, height: number, width: number }>) => {\n      state.drawflow[id].height = height\n      state.drawflow[id].width = width\n    }\n  },\n})\n\nexport const actions = slice.actions\nexport const drawflowSlice = slice.reducer\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectActiveDrawflow = (state: RootState) => state.flows[state.version]\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import Circle from \"./Circle\"\nimport Path from \"./Path\"\n\nconst Connection = {\n    Circle,\n    Path\n}\n\nexport default Connection\n","import { MouseEvent } from \"react\";\n\nconst CircleComponent = (props: any) => {\n    const { property, svgKey, i, editLock } = props;\n\n    const onMouseDown = (e: MouseEvent) => {\n        if (editLock) return;\n        props.select(e, {\n            svgKey,\n            i,\n        });\n    }\n\n    return (\n        <circle\n            {...property}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"point\"\n            r={6}\n            onMouseDown={onMouseDown}\n        />\n    );\n}\n\nexport default CircleComponent;\n","import { MouseEvent } from \"react\";\nimport { actions, selectActiveDrawflow } from '../../redux/drawflowSlice'\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks'\n\ntype Props = {\n    svgKey?: string,\n    d: string,\n}\n\nconst Path = (props: Props) => {\n    const { svgKey, d } = props;\n    const state = useAppSelector(selectActiveDrawflow)\n    const { selectId } = state;\n    const dispatch = useAppDispatch()\n\n\n    const className = \"main-path \" + ((selectId === svgKey && svgKey) ? 'select' : '')\n\n    return <path\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className={className}\n        d={d}\n        onMouseDown={(e) => {\n            e.stopPropagation()\n            // if (editLock) return;\n            dispatch(actions.select({ type: 'path', selectId: svgKey }))\n        }}\n    ></path>\n\n}\n\nexport default Path;\n","import { useState } from \"react\";\nimport { Grabme, More } from \"../svg\"\n\nexport const Round = (props: any) => {\n    const [a, b] = useState(props)\n    return (\n        <div className=\"node-block\" >\n            {JSON.stringify(a, null, 2)}\n        </div>\n    )\n\n    const { imgSrc, name, description } = props;\n    return (\n        <div className=\"blockelem create-flowy\">\n            <div className=\"grabme\">\n                <Grabme />\n            </div>\n            <div className=\"blockin\">\n                <div className=\"blockico\">\n                    <span></span>\n                    <img src={imgSrc} alt={name + '\\n' + description} />\n                </div>\n                <div className=\"blocktext\">\n                    <p className=\"blocktitle\">{name}</p>\n                    <div className=\"side-elem-more\">\n                        <More />\n                    </div>\n                    <p className=\"blockdesc\">{description}</p>\n                </div>\n            </div>\n        </div>)\n}","import { useEffect, useState, useRef, } from \"react\";\nimport { portType } from \"../types\";\n\nimport { actions, selectActiveDrawflow } from '../redux/drawflowSlice'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport { Round } from \"./NodeComponents\";\nimport { RootState } from \"../redux/store\";\n\n\nconst DrawflowNodeBlock = ({ id }: { id: number }) => {\n    const { portToConnect, nodeId, selectId, select, config, drawflow: { [id]: node } } =\n        useAppSelector(selectActiveDrawflow)\n    const dispatch = useAppDispatch()\n    const { port, pos } = node;\n\n    const [refs, setRefs] = useState({\n        inputs: [],\n        outputs: [],\n    });\n    const ref = useRef<HTMLDivElement>(null);\n\n    const portComponent = (type: portType) => {\n        let arr = [];\n\n        for (let i = 1; i <= port[type]; i++) {\n            const key = `${type}put-${i}`;\n            const portKey = `${id}_${type}_${i}`\n            const port =\n                <div\n                    onMouseDown={(e) => {\n                        e.stopPropagation()\n                        dispatch(actions.select({\n                            type: (type + 'put') as ('input' | 'output'),\n                            portId: i,\n                            selectId: id\n                        }))\n                    }}\n                    key={key}\n                    className={`${type}put ${key} ${portKey}`}\n                    onMouseUp={e => {\n                        if (type !== \"in\" || typeof selectId !== \"number\" || !select?.portId) return\n                        const endId = id\n                        const endPort = i\n                        const startId = selectId\n                        const startPort = select.portId\n                        // if connect to same node\n                        if (startId === endId) return\n                        dispatch(actions.addConnection({ startId, startPort, endId, endPort }))\n                    }}\n                >\n                    <div className={`indicator ${(portToConnect === portKey && ' ') || 'invisible'}`}></div>\n                </div>\n            arr.push(port);\n        }\n\n        return (\n            <div className={`${type}puts`}>\n                {arr}\n            </div>\n        );\n    }\n\n    useEffect(() => {\n        if (ref.current) {\n            //@ts-ignore\n            const inputs = Array.from(ref.current.querySelector(\".inputs\").children);\n            //@ts-ignore\n            const outputs = Array.from(ref.current.querySelector(\".outputs\").children);\n            //@ts-ignore\n            setRefs({ inputs, outputs, });\n        }\n    }, [ref]);\n\n    useEffect(() => {\n        if (ref.current) {\n            const { offsetHeight, offsetWidth } = ref.current\n            dispatch(actions.nodeSize({ height: offsetHeight, width: offsetWidth, id }))\n        }\n    }, [dispatch, id, ref, node])\n\n\n    useEffect(() => {\n        const getPortPos = (type: portType, i: number, elmt: HTMLElement) => {\n            const key = `${id}_${type}_${i}`;\n            const x = parseInt(getComputedStyle(elmt).left) + node.pos.x\n            const y = parseInt(getComputedStyle(elmt).top) + node.pos.y\n\n            return {\n                [key]: { x, y }\n            }\n        }\n\n        if (refs.inputs && refs.outputs && port.in === refs.inputs.length && port.out === refs.outputs.length) {\n            let newPorts = {};\n            newPorts = Object.assign(newPorts, refs.inputs.reduce((acc, elmt, i) => {\n                return Object.assign(acc, getPortPos(portType.in, i + 1, elmt));\n            }, {}));\n            newPorts = Object.assign(newPorts, refs.outputs.reduce((acc, elmt, i) => {\n                return Object.assign(acc, getPortPos(portType.out, i + 1, elmt));\n            }, {}));\n            dispatch(actions.pushPorts(newPorts))\n        }\n    }, [pos, dispatch, refs.inputs, refs.outputs, port.in, port.out, id, node.pos.x, node.pos.y]);\n\n    useEffect(() => {\n        // when add new node shift it to left and up\n        if (ref.current && nodeId - 1 === id && config.drag) {\n            const { offsetHeight, offsetWidth } = ref.current\n            dispatch(actions.moveNode({ nodeId: id, dx: -offsetWidth * 0.2, dy: -offsetHeight * 0.2 }))\n        }\n    }, [])\n\n    return (\n        <div\n            ref={ref}\n            className={`node-${id} drawflow-node-block-default` + (selectId === id ? ' select' : '')}\n            style={{\n                top: pos.y + \"px\",\n                left: pos.x + \"px\",\n                cursor: \"move\",\n            }}\n            onMouseDown={e => {\n                e.stopPropagation()\n                const { clientX, clientY } = e\n                dispatch(actions.select({ type: 'node', selectId: id }))\n                dispatch(actions.setMouseBlockDragPos({ clientX, clientY }))\n            }}\n            onContextMenu={e => {\n                // TODO show delete button\n            }}\n            onDoubleClick={() => {\n                // show node settings\n            }}\n        >\n            {portComponent(portType.in)}\n            <div\n                className=\"drawflow-node-content\"\n            >\n                <Round {...node} />\n            </div>\n            {portComponent(portType.out)}\n            {/* <button\n            style={{\n                display: showButton === id ? \"block\" : \"none\"\n            }}\n            className=\"drawflow-delete\"\n            onMouseDown={(e) => { e.stopPropagation(); event.deleteNode() }}\n        >X</button> */}\n        </div>)\n\n\n}\n\nexport default DrawflowNodeBlock;\n","const makeRandomNames = (length: number, searchWord: string, max = 15, min = 5) => {\n    const result = [];\n    const map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let j = 0; j < length; j++) {\n        let word = \"\";\n        for (let i = 0; i < Math.floor(Math.random() * (max - min) + min); i++) {\n            word += map.charAt(Math.floor(Math.random() * map.length));\n        }\n        if (searchWord.length > 1) {\n            word += searchWord;\n        }\n        result.push(word);\n    }\n    return result;\n}\n\nconst getGroups = async (number: number) => {\n    const rnd = () => ({\n        type: 'Asd',\n        name: 'assa',\n        value: makeRandomNames(1, \"\", 10, 5)[0],\n    })\n    const rez = []\n    for (let i = 0; i < number; ++i) {\n        rez.push(rnd())\n    }\n    return rez;\n}\n\nexport default getGroups","import { node, NODE_TYPE } from \"../types\";\nimport getFilters from \"./fields.mock\";\nimport { data } from \"../types\"\n\nexport const testNode = (): node => {\n    return {\n        id: 0,\n        \"type\": NODE_TYPE.MIDDLE,\n        \"data\": {\n            \"type\": \"String\",\n            \"name\": \"1qdlCNXqYBsE\",\n            \"value\": \"qqweee\"\n        },\n        \"port\": {\n            \"in\": 1,\n            \"out\": 2\n        },\n        \"pos\": {\n            \"x\": -20,\n            \"y\": 100\n        },\n        \"isSub\": false,\n        height: 0,\n        width: 0\n    }\n}\n\nconst getDummy = async (): Promise<data> => {\n  const data: any = {\n    \"nodes\": {\n    },\n    \"connections\": {\n      \"1_1_3_1\": [],\n      \"4_1_2_1\": []\n    },\n  }\n\n  for (let i = 1; i < 5; ++i) {\n    const node = testNode()\n    node.id = i\n    node.data.name = `Node ${i}`\n    node.pos.x = 100 * i\n    node.pos.y = 50 * i\n    data.nodes[i] = node\n  }\n\n\n  return data\n}\n\n\nconst mock = {\n    getDummy,\n    getFilters,\n}\n\nexport default mock\n","import { configureStore, createAction, createAsyncThunk, createReducer, PayloadAction } from '@reduxjs/toolkit'\nimport { clientPos, flowType, Slices, stateData } from '../types'\nimport { addNode, drawflowSlice } from './drawflowSlice'\nimport mock, { testNode } from '../Mock'\nimport { initialState as drawflowInitialState } from './drawflowSlice'\nimport handler from '../components/drawflowHandler'\n\nexport const changeVersion = createAction<number>('versions/changed')\nexport const addNewNode = createAction<clientPos>('addNewNode')\nexport const dragTemplate = createAction<number>('dragTemplate')\n\nconst initialState: flowType = {\n  version: 0,\n  flows: [drawflowInitialState, drawflowInitialState, drawflowInitialState],\n  templates: [],\n  dragTemplate: 0\n}\n\nexport const fetchNodeTemplates = createAsyncThunk('fetchPosts', async () => {\n  return await mock.getFilters(5)\n})\n\nexport const fetchFlowVersion = createAsyncThunk('fetchFlowVersion', async () => {\n  return await mock.getDummy()\n})\n\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(changeVersion, (state, { payload }) => {\n      state.version = payload\n    })\n    .addCase(addNewNode, (appState: flowType, { payload: { clientX, clientY } }: PayloadAction<clientPos>) => {\n      if (!appState.dragTemplate) return;\n\n      const state = appState.flows[appState.version]\n      const node = testNode()\n      node.pos = handler.getPos(clientX, clientY, state.config.zoom.value)\n      state.mouseBlockDragPos = { clientX, clientY };\n      addNode(state, node)\n      appState.dragTemplate = undefined\n    })\n    .addCase(dragTemplate, (appState, {payload}) => {\n      appState.dragTemplate = payload\n    })\n    .addCase(fetchNodeTemplates.fulfilled, (state, action) => {\n      state.templates = action.payload\n    })\n    .addCase(fetchFlowVersion.fulfilled, (state, action) => {\n      const { nodes: drawflow, connections } = action.payload;\n      state.flows[state.version] = drawflowSlice(\n        state.flows[state.version],\n        {\n          type: Slices.Drawflow + '/load',\n          payload: { drawflow, connections }\n        })\n    })\n\n    // reducer for drawflow\n    .addMatcher(\n      (action) => action.type.startsWith(Slices.Drawflow),\n      (state, action) => {\n        state.flows[state.version] = drawflowSlice(state.flows[state.version], action)\n      }\n    )\n\n\n})\n\nexport const store = configureStore({\n  reducer\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\n// store.subscribe(() => console.log(store.getState()))","import { actions, selectActiveDrawflow } from \"../../redux/drawflowSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\n\nconst DrawflowAdditionalArea = () => {\n    const editLock = useAppSelector(s => selectActiveDrawflow(s).editLock)\n    const dispatch = useAppDispatch()\n\n    return (\n        <div className=\"drawflow-additional\">\n            {!editLock &&\n                <>\n                    <button className=\"drawflow-additional-button\" onClick={() => console.log('clear')}>Clear</button>\n                </>\n            }\n            <button className=\"drawflow-additional-button\" onClick={() => dispatch(actions.setEditLock(!editLock))}>{editLock ? \"UnLock\" : \"Lock\"}</button>\n        </div>\n    );\n}\n\nexport default DrawflowAdditionalArea;\n","import { actions } from \"../../redux/drawflowSlice\";\nimport { useAppDispatch } from \"../../redux/hooks\";\n\nconst DrawflowZoomArea = () => {\n    const dispatch = useAppDispatch()\n\n    return (\n        <div className=\"drawflow-zoom\">\n            <button className=\"drawflow-zoom-button\" onClick={() => dispatch(actions.zoom(true))}>+</button>\n            <button className=\"drawflow-zoom-button\" onClick={() => dispatch(actions.zoom(false))}>-</button>\n            <button className=\"drawflow-zoom-button\" onClick={() => dispatch(actions.zoom(null))}>reset</button>\n        </div>\n    )\n}\n\nexport default DrawflowZoomArea;\n","import handler from \"./drawflowHandler\"\nimport { actions, selectActiveDrawflow } from '../redux/drawflowSlice'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport Connection from \"./Connection\";\nimport DrawflowNodeBlock from \"./DrawflowNodeBlock\";\nimport { useEffect } from \"react\";\nimport { addNewNode, fetchFlowVersion } from \"../redux/store\";\nimport DrawflowAdditionalArea from \"./ButtonArea/DrawflowAdditionalArea\";\nimport DrawflowZoomArea from \"./ButtonArea/DrawflowZoomArea\";\n\nexport const NewPath = () => {\n    const state = useAppSelector(selectActiveDrawflow)\n\n    const { select, config, ports, selectId, newPathDirection } = state;\n    if (!select?.portId) { console.error(`Select port id not set!`); return null }\n    const startKey = `${selectId}_out_${select.portId}`;\n\n    if (!ports[startKey]) { console.error(`Start port key not exist`); return null }\n    if (!newPathDirection) { console.error(`Path direction null`); return null }\n\n    const start = {\n        x: ports[startKey].x,\n        y: ports[startKey].y,\n    }\n    const zoom = config.zoom.value;\n    const { clientX, clientY } = newPathDirection;\n    const end = handler.getPos(clientX, clientY, zoom);\n    const d = handler.createCurvature(start, end);\n\n    return <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"drawflow-connection\"\n    >\n        <Connection.Path\n            d={d}\n        />\n    </svg>\n\n}\n\nexport const ConnectionList = () => {\n    const { connections, ports } = useAppSelector(selectActiveDrawflow)\n\n    const conns = Object.entries(connections).map(([key]) => {\n        // key: fromId_portNum_toId_portNum\n        const arr = key.split(\"_\");\n        const startKey = `${arr[0]}_out_${arr[1]}`;\n        const endKey = `${arr[2]}_in_${arr[3]}`;\n\n        if (!ports[startKey] || !ports[endKey]) {\n            // console.error(`No such connection`, key);\n            return null\n        };\n\n        const start = {\n            x: ports[startKey].x,\n            y: ports[startKey].y,\n        }\n        const end = {\n            x: ports[endKey].x,\n            y: ports[endKey].y,\n        }\n        const d = handler.createCurvature(start, end)\n        return <div key={key}>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"drawflow-connection\"\n            >\n                <Connection.Path\n                    svgKey={key}\n                    d={d}\n                />\n            </svg>\n        </div>\n\n    })\n    return <>{conns}</>\n}\n\nexport const NodeList = () => {\n    const drawflow = useAppSelector(s => selectActiveDrawflow(s).drawflow)\n\n    return <>{Object.values(drawflow).map((node) => {\n        return <DrawflowNodeBlock\n            key={node.id}\n            id={node.id}\n        />\n    }\n    )}</>\n}\n\n\nexport const Drawflow = () => {\n    const { select, config: { canvasTranslate: { x, y }, zoom }, newPathDirection }\n        = useAppSelector(selectActiveDrawflow)\n\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        dispatch(fetchFlowVersion())\n    }, [])\n\n    useEffect(() => {\n        const handleKeyDown = (e: KeyboardEvent) => {\n            if (e.key === \"Delete\") {\n                if (select?.type === \"path\") {\n                    dispatch(actions.deletePath())\n                }\n                else {\n                    dispatch(actions.deleteNode())\n                }\n            }\n        }\n        document.addEventListener(\"keydown\", handleKeyDown);\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyDown);\n        }\n    }, [dispatch, select?.type])\n\n\n    return (\n        <div\n            id=\"drawflow\"\n            className=\"parent-drawflow\"\n            onMouseDown={(e) => {\n                if (!e.currentTarget.classList.contains(\"parent-drawflow\")) return;\n                dispatch(actions.canvasDrag(true))\n                dispatch(actions.unSelect())\n            }}\n            onMouseUp={() => dispatch(actions.canvasMouseUp())}\n            onMouseMove={(e) => {\n                const { clientX, clientY, movementX, movementY } = e\n                dispatch(actions.canvasMouseMove({ clientX, clientY, movementX, movementY }))\n            }}\n            onMouseEnter={(e) => {\n                const { clientX, clientY } = e\n                dispatch(addNewNode({ clientX, clientY }))\n            }}\n        >\n            <DrawflowAdditionalArea />\n            <DrawflowZoomArea />\n            <div\n                className=\"drawflow\"\n                style={{\n                    transform: `translate(${x}px, ${y}px) scale(${zoom.value})`\n                }}\n            >\n                <NodeList />\n                <ConnectionList />\n                {newPathDirection && <NewPath />}\n            </div>\n        </div>\n    )\n}","import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../redux/hooks';\nimport { dragTemplate, fetchNodeTemplates } from '../redux/store';\n\ntype Props = {\n    searchWord: string\n}\n\nconst FilterList = (props: Props) => {\n    const { searchWord } = props;\n    const list = useAppSelector(s => s.templates)\n    const dispatch = useAppDispatch()\n    const searchArr = searchWord.toLowerCase().split(\" \").filter(item => item.length > 0);\n\n\n    useEffect(() => {\n        dispatch(fetchNodeTemplates())\n    }, [dispatch])\n\n    return (\n        <div\n            className=\"drawflow-node-list-wrap\"\n        >\n            {list.map((item, idx) => {\n                const { name, type, value } = item\n                const label = JSON.stringify(item, null, 2)\n\n                return (\n                    (searchArr.find(word => label.toLowerCase().includes(word)) || !searchArr.length) &&\n                    <div\n                        key={\"drawflow-sidemenu-block-\" + idx}\n                        className=\"drawflow-node-block\"\n                        onMouseDownCapture={(e) => {\n                            dispatch(dragTemplate(1))\n                        }}\n                    >\n                        <pre>{`Type: ${type}\\nValue: ${value + name}`}</pre>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default FilterList;\n","import { useState } from 'react';\nimport { Drawflow } from './components/DrawflowHook';\nimport FilterList from \"./components/FilterList\";\nimport { useAppDispatch } from './redux/hooks';\nimport { changeVersion, fetchFlowVersion } from './redux/store';\n\nimport './drawflow.scss'\nimport { actions } from './redux/drawflowSlice';\n\nfunction App() {\n\n  const [searchWord, setSearchWord] = useState(\"\");\n  const dispatch = useAppDispatch()\n  // console.log('Render App')\n    \n\n  return (\n    <div className=\"App\">\n      <div className=\"drawflow-node-list\">\n        <div className=\"drawflow-node-list-search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search templates\"\n            onChange={e => { setSearchWord(e.target.value) }}\n          />\n        </div>\n        <div className=\"drawflow-node-list-flex\">\n          <FilterList\n            searchWord={searchWord}\n          />\n        </div>\n      </div>\n      <div className=\"flow\">\n        <div>\n          <button onClick={() => dispatch(fetchFlowVersion())}>Fetch flow version</button>\n\n          <button onClick={() => dispatch(changeVersion(0))}>Version 1</button>\n          <button onClick={() => dispatch(changeVersion(1))}>Version 2</button>\n          <button onClick={() => dispatch(changeVersion(2))}>Version 3</button>\n          <button onClick={() => dispatch(actions.align())}>Align</button>\n        </div>\n        <Drawflow />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}