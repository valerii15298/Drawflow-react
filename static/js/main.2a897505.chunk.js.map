{"version":3,"sources":["types.ts","components/drawflowHandler.ts","styles.ts","redux/Node.ts","redux/Flow.ts","redux/drawflowSlice.ts","redux/hooks.ts","Mock/fields.mock.ts","Mock/index.ts","redux/store.ts","components/ButtonArea/DrawflowAdditionalArea.tsx","components/ButtonArea/DrawflowZoomArea.tsx","components/Connection/Circle.tsx","components/Connection/Path.tsx","components/Connection/index.ts","components/NewPath.tsx","components/NodeComponents.tsx","components/DrawflowNodeBlock.tsx","components/NodeList.tsx","components/ConnectionList.tsx","components/DrawflowHook.tsx","components/FilterList.tsx","App.tsx","index.tsx"],"names":["NODE_TYPE","Slices","getCanvasInfo","canvas","document","querySelector","canvasRect","getBoundingClientRect","x","y","width","clientWidth","height","clientHeight","handler","createCurvature","start","end","halfHeiht","dx","getPos","clientX","clientY","zoom","findIndexByElement","elmt","parentElement","arr","Array","from","childNodes","i","length","getPortPosWithZoom","size","pos","coef","MODAL_TYPE","portType","subnodeStyle","Node","id","flow","state","nodeState","spacingX","spacingY","this","drawflow","head","lane","port","Object","entries","ports","find","key","filter","startsWith","parentId","keys","connections","split","toString","getNode","Number","map","parent","visible","Math","max","subnodesWidth","leftWidth","rightWidth","out1","totalWidth","forEach","node","update","isSub","out","xPos","setPos","alignChildren","subnodes","subNode","childrenTotalWidth","selfLeftWidth","leftChildWidth","childrenRightWidth","selfRightWidth","rightChildWidth","successors","push","allSuccessors","parentConnection","outConnections","connKey","visibility","childrenVisibility","includes","toggleVisibility","subnodesVisibility","portId","conn","children","firstSubnode","flowLine","flowLineNodes","reduce","acc","complexParentNode","hasSubnodes","newPos","moveNode","nodeId","dy","data","newData","lodash","merge","assign","Flow","nodes","distanceToConnect","distanceToDisconnect","el","setLaneNumbers","heads","startId","startPort","endId","nodeIn","nodeOut","connectAsSub","endPort","nextNode","keyToDelete","lastNode","keyToCreate","currentNode","currentNodeHead","alignAll","nodeInPortPos","portInPos","portDistances","outPorts","distance","hypot","sort","a","b","nearestPort","shift","portToConnect","undefined","laneNodes","nextLaneNodes","nextNodes","console","error","laneNumber","values","positionNumber","initialState","canvasDrag","config","drag","connectionsLabelEnable","canvasTranslate","value","min","tick","connectionsLabel","select","selectId","selectPath","showButton","newPathDirection","modalType","editLock","mouseBlockDragPos","align","slice","createSlice","name","Drawflow","reducers","setEditLock","payload","action","dragNode","setMouseBlockDragPos","unSelect","type","moveCanvas","movementX","movementY","canvasMouseMove","clientCurrentMousePos","prevX","prevY","canvasMouseUp","v","addConnection","deleteNode","_","val","parseInt","deletePath","load","portMouseUp","PortType","in","clear","pushPorts","newValue","nodeSize","toggleSubnodes","toggleSubnodesVisibility","toggleChildren","toggleChildrenVisibility","copyNode","nodeToCopyId","insertCopiedNode","JSON","parse","stringify","actions","drawflowSlice","reducer","selectActiveDrawflow","flows","version","useAppDispatch","useDispatch","useAppSelector","useSelector","makeRandomNames","searchWord","result","j","word","floor","random","charAt","getGroups","number","rnd","rez","testNode","MIDDLE","mock","getDummy","getFilters","changeVersion","createAction","addNewNode","dragTemplate","drawflowInitialState","templates","fetchNodeTemplates","createAsyncThunk","fetchFlowVersion","createReducer","builder","addCase","appState","fulfilled","addMatcher","store","configureStore","Div","styled","div","Button","button","DrawflowAdditionalArea","s","dispatch","className","onClick","log","ZoomArea","DrawflowZoomArea","CircleComponent","props","property","svgKey","xmlns","r","onMouseDown","e","Svg","svg","StyledPath","path","theme","selected","Connection","Circle","Path","d","stopPropagation","NewPath","startKey","StyledNode","Round","Indicator","css","selectPortToConnect","createDraftSafeSelector","portStyle","Output1","Output2","Input1","styledPorts","Ports","selectIsSub","portKey","StyledPort","onMouseUp","BlockStyled","DrawflowNodeBlock","isSelected","ref","useRef","useEffect","current","offsetHeight","offsetWidth","getPortPos","getComputedStyle","left","top","inputs","outputs","newPorts","style","cursor","onContextMenu","onDoubleClick","selectNodeIds","NodeList","ConnectionList","conns","endKey","ParentDrawflow","InnerDrawflow","tabIndex","onKeyDownCapture","ctrlKey","onMouseMove","onMouseEnter","transform","FilterList","list","searchArr","toLowerCase","item","idx","label","onMouseDownCapture","App","useState","setSearchWord","placeholder","onChange","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"uIAAYA,EAMAC,E,6DCSNC,EAAgB,WAEpB,IAAMC,EAAUC,SAASC,cAAc,aAA6BA,cAAc,aAC5EC,EAAaH,EAAOI,wBAC1B,MAAO,CACLC,EAAGF,EAAWE,EACdC,EAAGH,EAAWG,EACdC,MAAOP,EAAOQ,YACdC,OAAQT,EAAOU,eAgCbC,EAAU,CACdC,gBA/CsB,SAACC,EAAYC,GACnC,IAAMC,GAAaF,EAAMP,EAAIQ,EAAIR,GAAK,EAChCU,EAAKH,EAAMR,EAAIS,EAAIT,EACzB,MAAM,KAAN,OAAYQ,EAAMR,EAAlB,YAAuBQ,EAAMP,EAA7B,eAAqCS,EAArC,eAAqDC,EAArD,eAA8DD,EAA9D,MA6CAhB,gBACAkB,OA/Ba,SAACC,EAAiBC,EAAiBC,GAChD,MAAgCrB,IAAxBM,EAAR,EAAQA,EAAGC,EAAX,EAAWA,EAAGC,EAAd,EAAcA,MAAOE,EAArB,EAAqBA,OACrB,MAAO,CACLJ,EAAGa,GAAWX,GAASA,EAAQa,IAAUf,GAAKE,GAASA,EAAQa,IAC/Dd,EAAGa,GAAWV,GAAUA,EAASW,IAAUd,GAAKG,GAAUA,EAASW,MA4BrEC,mBAxByB,SAACC,GAI1B,IAHA,IAAMC,EAAgBD,EAAKC,cACrBC,EAAMC,MAAMC,KAAKH,EAAcI,YAE5BC,EAAI,EAAGA,EAAIJ,EAAIK,OAAQD,IAC9B,GAAIJ,EAAII,KAAON,EAAM,OAAOM,EAE9B,OAAQ,GAkBRE,mBAfyB,SAACC,EAAyCC,EAAUZ,GAC7E,IAAMpB,EAASW,EAAQZ,gBACjBkC,EAAO,EAAIb,EAKjB,MAAO,CAAEf,EAHC0B,EAAKxB,MAAQ,GAAKyB,EAAI3B,EAAIL,EAAOK,GAAK4B,EAGpC3B,EAFFyB,EAAKtB,OAAS,GAAKuB,EAAI1B,EAAIN,EAAOM,GAAK2B,KAapCtB,K,SD/DHd,K,cAAAA,E,gBAAAA,E,WAAAA,M,cAMAC,K,qBAAAA,M,KAIL,IAEKoC,EAKAC,G,SALAD,K,8BAAAA,E,iCAAAA,M,cAKAC,K,QAAAA,E,WAAAA,M,mGEjBCC,EAAe,CACxB7B,MAAO,IACPE,OAAQ,ICGS4B,E,WAQjB,WAAYC,EAAYC,GAAa,yBAPrBD,QAOoB,OANnBE,WAMmB,OALpBD,UAKoB,OAJpBE,eAIoB,OAHpBC,SAAW,GAGS,KAFpBC,SAAW,GAGvBC,KAAKN,GAAKA,EACVM,KAAKL,KAAOA,EACZK,KAAKJ,MAAQD,EAAKC,MAClBI,KAAKH,UAAYG,KAAKJ,MAAMK,SAASD,KAAKN,I,sCAG9C,WACI,OAAOM,KAAKH,UAAUK,O,gBAG1B,WACI,OAAOF,KAAKH,UAAUM,O,gBAG1B,WACI,OAAOH,KAAKH,UAAUO,O,qBAG1B,WAAkC,IAAD,SAC7B,iBAAOC,OAAOC,QAAQN,KAAKJ,MAAMW,OAAOC,MAAK,mCAAEC,EAAF,iBAAkBA,IAAG,UAAQ,EAAKf,GAAb,mBAAlE,aAAO,EAAqF,K,oBAGhG,WAAgB,IAAD,OACX,OAAOW,OAAOC,QAAQN,KAAKJ,MAAMW,OAAOG,QAAO,mCAAED,EAAF,iBAAgBA,EAAIE,WAAJ,UAAkB,EAAKjB,GAAvB,c,kBAGnE,WAA2B,IAAD,SAChBkB,EAAQ,UAAGP,OAAOQ,KAAKb,KAAKJ,MAAMkB,aAAaN,MAAK,SAAAC,GAAG,OAAIA,EAAIM,MAAM,KAAK,KAAO,EAAKrB,GAAGsB,qBAAjF,aAAG,EAA2FD,MAAM,KAAK,GACvH,OAAOH,EAAWZ,KAAKL,KAAKsB,QAAQC,OAAON,IAAa,O,4BAG5D,WAAwB,IAAD,OACnB,OAAOP,OAAOQ,KAAKb,KAAKJ,MAAMkB,aAAaN,MAAK,SAACC,GAAS,IAAD,EAC/C7B,EAAM6B,EAAIM,MAAM,KAAKI,IAAID,QAC/B,OAAOtC,EAAI,MAAJ,UAAW,EAAKwC,cAAhB,aAAW,EAAa1B,KAAMd,EAAI,KAAO,EAAKc,IAAiB,IAAXd,EAAI,Q,sBAIvE,WACI,OAA+B,IAA3BoB,KAAKH,UAAUwB,QAA0B,EAC1BC,KAAKC,IAAIvB,KAAKrC,MAAQqC,KAAKwB,cAAexB,KAAKyB,UAAYzB,KAAK0B,c,8BAIvF,WACI,IAAQC,EAAS3B,KAAT2B,KACR,IAAKA,EAAK1C,OAAQ,OAAO,EAEzB,IAAI2C,EAAa,EAIjB,OAHAD,EAAKE,SAAQ,SAAAC,GACTF,GAAcE,EAAKF,cAEhBA,EAAa5B,KAAKF,UAAY6B,EAAK1C,OAAS,K,2BAGvD,WAAiB,IAAD,OACJ0C,EAAS3B,KAAT2B,KACR3B,KAAK+B,OAAO,CAAEC,OAAO,EAAO5B,KAAM,CAAE6B,IAAK,KAGzC,IALY,EAKRC,EAAOlC,KAAKZ,IAAI3B,GAAKuC,KAAKyB,UAAYzB,KAAKrC,MAAQ,GAL3C,cAOOgE,GAPP,IAOZ,2BAAyB,CAAC,IAAfG,EAAc,QACfrE,EAAIyE,GAAQJ,EAAKL,UAAYK,EAAKnE,MAAQ,GAChDmE,EAAKK,OAAO,CAAE1E,IAAGC,EAAGsC,KAAKZ,IAAI1B,EAAIsC,KAAKnC,OAASmC,KAAKD,YACrB,IAA3B+B,EAAKjC,UAAUwB,UACfa,GAAQJ,EAAKF,WAAa5B,KAAKF,UAEnCgC,EAAKM,iBAbG,8BAgBZ,IAAQC,EAAarC,KAAbqC,SACJA,EAASpD,SAETiD,EAAOlC,KAAKZ,IAAI3B,EAAIuC,KAAKrC,MAAQqC,KAAKF,SACtCuC,EAASR,SAAQ,SAAAS,GACbA,EAAQP,OAAR,aAAiBC,OAAO,EAAM5B,KAAM,CAAE6B,IAAK,IAAQzC,IACnD8C,EAAQH,OAAO,CAAE1E,EAAGyE,EAAMxE,EAAG,EAAK0B,IAAI1B,GAAK,EAAKG,OAAS,EAAIyE,EAAQzE,OAAS,YACvE,EAAK+B,MAAMW,MAAX,UAAoB+B,EAAQ5C,GAA5B,WACPwC,GAAQI,EAAQ3E,MAAQ,EAAKmC,e,qBAKzC,WACI,IAA+B,IAA3BE,KAAKH,UAAUwB,QAAmB,OAAO,EAC7C,IAAQM,EAA6B3B,KAA7B2B,KAAMY,EAAuBvC,KAAvBuC,mBACRC,EAAgBxC,KAAKrC,MAAQ,EACnC,IAAKgE,EAAK1C,OACN,OAAOuD,EAGX,IAAMC,EAAiBd,EAAK,GAAGF,UAG3BiB,EAAqBD,GAAkBF,EAAqBE,EAFxCd,EAAKA,EAAK1C,OAAS,GAAGyC,YAEsD,EACpG,OAAOJ,KAAKC,IAAImB,EAAoBF,K,sBAGxC,WACI,IAA+B,IAA3BxC,KAAKH,UAAUwB,QAAmB,OAAO,EAC7C,IAAQM,EAA6B3B,KAA7B2B,KAAMY,EAAuBvC,KAAvBuC,mBACRI,EAAiB3C,KAAKrC,MAAQ,EAAIqC,KAAKwB,cAC7C,IAAKG,EAAK1C,OACN,OAAO0D,EAGX,IAAMF,EAAiBd,EAAK,GAAGF,UACzBmB,EAAkBjB,EAAKA,EAAK1C,OAAS,GAAGyC,WAE1CgB,EAAqBE,GAAmBL,EAAqBE,EAAiBG,GAAmB,EACrG,OAAOtB,KAAKC,IAAImB,EAAoBC,K,0BAGxC,WACI,IAAQN,EAAmBrC,KAAnBqC,SAAUV,EAAS3B,KAAT2B,KACZkB,EAAuB,YAAOlB,GAKpC,OAHAU,EAASR,SAAQ,SAAAS,GAAO,OAAIO,EAAWC,KAAKR,MAC5CtC,KAAK2B,KAAKE,SAAQ,SAAAC,GAAI,OAAIe,EAAWC,KAAKhB,MAEnCe,I,yBAGX,WACI,IAAMA,EAAU,sBAAO7C,KAAK2B,MAAZ,YAAqB3B,KAAKqC,WACpCU,EAAa,YAAOF,GAE1B,OADAA,EAAWhB,SAAQ,SAAAC,GAAI,OAAIiB,EAAcD,KAAd,MAAAC,EAAa,YAASjB,EAAKiB,mBAC/CA,I,8BAGX,WAAoB,IAAD,SACT1B,EAAO,UAAGrB,KAAKH,UAAUwB,eAAlB,SAGbrB,KAAK+B,OAAO,CAAEV,SAAUA,IAExBrB,KAAKgD,mBAAqBhD,KAAKJ,MAAMkB,YAAYd,KAAKgD,mBAAqB3B,GAG3ErB,KAAKiD,eAAepB,SAAQ,SAAAqB,GACxB,EAAKtD,MAAMkB,YAAYoC,IAAY7B,O,sCAI3C,WAA4B,IAAD,EACjB8B,EAAU,UAAGnD,KAAKH,UAAUuD,0BAAlB,SAChBpD,KAAK+B,OAAO,CAAEqB,oBAAqBD,IACnC,IAAQd,EAA4BrC,KAA5BqC,SAA4BrC,KAAlB+C,cACJlB,SAAQ,SAAAC,GACbO,EAASgB,SAASvB,IAASA,EAAKwB,wB,sCAI7C,WAA4B,IAAD,EACjBH,EAAU,UAAGnD,KAAKH,UAAU0D,0BAAlB,SAChBvD,KAAK+B,OAAO,CAAEwB,oBAAqBJ,IACnCnD,KAAKqC,SAASR,SAAQ,SAAAC,GAClBA,EAAKwB,wB,0BAIb,WAAsB,IAAD,OACjB,OAAOjD,OAAOC,QAAQN,KAAKJ,MAAMkB,aAC5BJ,QAAO,YAGJ,OAHgB,oBAEAK,MAAM,KAAKI,IAAID,QACpB,KAAO,EAAKxB,MAE1ByB,KAAI,SAAAvC,GAAG,OAAIA,EAAI,Q,sBAGxB,SAAS4E,GAAiB,IAAD,OACrB,OAAOnD,OAAOQ,KAAKb,KAAKJ,MAAMkB,aACzBJ,QAAO,SAAAD,GAAG,OAAIA,EAAIM,MAAM,KAAK,KAAO,EAAKrB,GAAGsB,YAAcP,EAAIM,MAAM,KAAK,KAAOyC,EAAOxC,cACvFG,KAAI,SAAAsC,GAAI,OAAI,EAAK9D,KAAKsB,QAAQC,OAAQuC,EAAK1C,MAAM,KAAK,U,gBAG/D,WACI,OAAOf,KAAK0D,SAAS,K,wBAGzB,WACI,OAAO1D,KAAK0D,SAAS,GAAG,K,oBAG5B,WAAwB,IAAD,IACnB,OAAO,UAAA1D,KAAK2D,oBAAL,mBAAmBC,gBAAnB,eAA6BC,gBAAiB,K,yBAGzD,WAA6B,IAAD,OACxB,OAAO7D,KAAKqC,SAASyB,QAAO,SAACC,EAAKzB,GAC9B,OAAOyB,EAAMzB,EAAQ3E,MAAQ,EAAKmC,WACnC,K,iBAGP,WACI,OAAkC,OAA3BE,KAAKgE,oB,6BAGhB,WAEI,IAAI5C,EAASpB,KAAKoB,OAClB,OAAIA,EACIA,EAAOuC,eAAiB3D,KAAaoB,EAClCA,EAAO4C,kBAEX,O,oBAMX,WAKI,IAJA,IAAMH,EAAwB,CAAC7D,MAC3B8B,EAAa9B,KACbiE,EAAcnC,EAAK6B,aAEK,IAArB7B,EAAKH,KAAK1C,QACbgF,EAAcA,GAAenC,EAAK6B,aAClC7B,EAAOA,EAAKH,KAAK,GACjBkC,EAAcf,KAAKhB,GAGvB,OAAQA,EAAKH,KAAK1C,OAAS,EAAK,KAAO,CAAE4E,gBAAeI,iB,kBAG5D,WACI,OAAOjE,KAAKJ,MAAMK,SAASD,KAAKN,IAAI7B,S,iBAExC,WACI,OAAOmC,KAAKJ,MAAMK,SAASD,KAAKN,IAAI/B,Q,eAGxC,WACI,OAAOqC,KAAKJ,MAAMK,SAASD,KAAKN,IAAIN,M,oBAGxC,SAAO8E,GACH,IAAQ9E,EAAQY,KAARZ,IACA3B,EAASyG,EAATzG,EAAGC,EAAMwG,EAANxG,EACXsC,KAAKL,KAAKwE,SAAS,CAAEC,OAAQpE,KAAKN,GAAItB,GAAIX,EAAI2B,EAAI3B,EAAG4G,GAAI3G,EAAI0B,EAAI1B,M,oBAGrE,SAAO4G,GACH,IAAMC,EAAUC,IAAOC,MAAMzE,KAAKH,UAAWyE,GAC7CjE,OAAOqE,OAAO1E,KAAKH,UAAW0E,O,KChQzBI,EAAb,WAOI,WAAY/E,GAAmB,IAAD,gCALdA,WAKc,OAJdgF,MAAgC,GAIlB,KAHdC,kBAAoB,IAGN,KAFdC,qBAAuB,EAGnC9E,KAAKJ,MAAQA,EACb,IAAQK,EAAaD,KAAKJ,MAAlBK,SACRI,OAAOQ,KAAKZ,GAAUkB,KAAI,SAACzB,GAAD,OAAQ,EAAKkF,MAAM1D,OAAOxB,IAAO,IAAID,EAAKyB,OAAOxB,GAAK,MAVxF,uCAaI,WACI,OAAOW,OAAOC,QAAQN,KAAK4E,OAAOlE,QAAO,oDAAsBU,UAAQD,KAAI,SAAA4D,GAAE,OAAIA,EAAG,QAd5F,qBAiBI,SAAQrF,GACJ,OAAOM,KAAK4E,MAAMlF,KAlB1B,sBAqBI,WACIM,KAAKgF,iBACLhF,KAAKiF,MAAMpD,SAAQ,SAAAC,GAEfA,EAAKM,qBAzBjB,6BA6BI,SAAgBqB,GACZ,IAAMyB,EAA8BzB,EAA9ByB,QAASC,EAAqB1B,EAArB0B,UAAWC,EAAU3B,EAAV2B,MACpBC,EAASrF,KAAKiB,QAAQmE,GACtBE,EAAUtF,KAAKiB,QAAQiE,GACvBK,EAA6B,IAAdJ,EAGrB,GAAIE,EAAOjE,SAAwC,IAA9BkE,EAAQzF,UAAUwB,QACnC,OAAO,EAGX,IAAMuC,EAAWyB,EAAOzB,SAExB,SAAK2B,GAAgBD,EAAQtD,UAAY4B,GAAYA,EAASK,gBA1CtE,2BAgDI,SAAcR,GACV,IAAMyB,EAAuCzB,EAAvCyB,QAASC,EAA8B1B,EAA9B0B,UAAWC,EAAmB3B,EAAnB2B,MAAOI,EAAY/B,EAAZ+B,QAC3BH,EAASrF,KAAKiB,QAAQmE,GACtBE,EAAUtF,KAAKiB,QAAQiE,GACvBK,EAA6B,IAAdJ,EAGrB,GAAIE,EAAOjE,SAAwC,IAA9BkE,EAAQzF,UAAUwB,QACnC,OAAO,EAGX,IAAMuC,EAAWyB,EAAOzB,SAExB,IAAK2B,GAAgBD,EAAQtD,UAAY4B,GAAYA,EAASK,aAC1D,OAAO,EAIX,IAAIwB,EAAW,KACf,GAAIF,GAAgBD,EAAQjD,SAASpD,OAAQ,CACzC,IAA6C,IAAzCqG,EAAQzF,UAAU0D,mBAA8B,CAEhD2B,EAAUI,EAAQjD,SAASiD,EAAQjD,SAASpD,OAAS,GAAGS,GACxDyF,EAAY,EACZ,IAAM1E,EAAG,UAAMyE,EAAN,YAAiBC,EAAjB,YAA8BC,EAA9B,YAAuCI,GAIhD,OAHAxF,KAAKJ,MAAMkB,YAAYL,IAAO,OACJmD,EAAlBC,cACMhC,SAAQ,SAAAC,GAAI,OAAIA,EAAKwB,sBAGnCmC,EAAWH,EAAQjD,SAAS,GAOpC,GAJIiD,EAAQtD,OAASsD,EAAQ3D,KAAK1C,SAC9BwG,EAAWH,EAAQ3D,KAAK,IAGX,OAAb8D,EAAmB,CACnB,IAAMC,EAAW,UAAMR,EAAN,YAAiBC,EAAjB,YAA8BM,EAAS/F,GAAvC,aACVM,KAAKJ,MAAMkB,YAAY4E,GAC9B,IAAQ7B,EAAkBD,EAAlBC,cACF8B,EAAW9B,EAAcA,EAAc5E,OAAS,GAChD2G,EAAW,UAAMD,EAASjG,GAAf,cAAuB+F,EAAS/F,GAAhC,MACjBM,KAAKJ,MAAMkB,YAAY8E,IAAe,EAG1C,IAAMnF,EAAG,UAAMyE,EAAN,YAAiBC,EAAjB,YAA8BC,EAA9B,YAAuCI,GAChDxF,KAAKJ,MAAMkB,YAAYL,IAAO,IA/FtC,sBAkGI,YAA4C,IAAjCrC,EAAgC,EAAhCA,GAAIiG,EAA4B,EAA5BA,GAAID,EAAwB,EAAxBA,OACfpE,KAAKJ,MAAMK,SAASmE,GAAQhF,IAAI3B,GAAKW,EACrC4B,KAAKJ,MAAMK,SAASmE,GAAQhF,IAAI1B,GAAK2G,IApG7C,sBAuGI,YAA4C,IAAjCjG,EAAgC,EAAhCA,GAAIiG,EAA4B,EAA5BA,GAAID,EAAwB,EAAxBA,OACfpE,KAAKmE,SAAS,CAAE/F,KAAIiG,KAAID,WASxB,IAAMyB,EAAc7F,KAAKiB,QAAQmD,GAC3B0B,EAAkBD,EAAY3F,KAChC2F,EAAY7C,0BAELhD,KAAKJ,MAAMkB,YAAY+E,EAAY7C,kBAC1ChD,KAAK+F,YAET,IAAMC,EAAgBH,EAAYI,UAClC,GAAKD,EAAL,CACA,IAAME,EAA0D,GAYhE,GAXA7F,OAAOC,QAAQN,KAAK4E,OACflE,QAAO,oDAAoBR,OAAS4F,KACpCjE,SAAQ,YAAiB,IAAD,mBAAdnC,EAAc,KAAVoC,EAAU,KACjBZ,OAAOxB,KAAQ0E,GACnBtC,EAAKqE,SAAStE,SAAQ,YAAiB,IAAD,mBAAdpB,EAAc,KAATrB,EAAS,KAC5BgH,EAAW9E,KAAK+E,MAAML,EAAcvI,EAAI2B,EAAI3B,EAAGuI,EAActI,EAAI0B,EAAI1B,GAC3EwI,EAAcpD,KAAK,CAAErC,MAAK2F,mBAGtCF,EAAcI,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEH,SAAWI,EAAEJ,YAEzCF,EAAcjH,OAAQ,CACtB,IAAIwH,EAAcP,EAAcQ,QAYxBD,EAAYL,SAAWpG,KAAK6E,kBAC5B7E,KAAKJ,MAAM+G,cAAgBF,EAAYhG,IAEvCT,KAAKJ,MAAM+G,mBAAgBC,MAtJ/C,4BA4JI,WAAkB,IAAD,OACTC,EAAY7G,KAAKiF,MACrB4B,EAAUhF,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,OAAO,CAAE7B,KAAM4B,EAAKpC,GAAIS,KAAM,OAE7D,IAJa,iBAKT,IAAM2G,EAA6B,GACnCD,EAAUhF,SAAQ,SAAAC,GACd,IAAI3B,EAAO2B,EAAK3B,KAAiB,EACzBkC,EAAmBP,EAAnBO,SAAUnC,EAAS4B,EAAT5B,KAClB,QAAa0G,IAAT1G,EAAJ,CACA,GAAImC,EAASpD,OAAQ,CAAC,IAAD,gBACCoD,GADD,IACjB,2BAA4B,SACpBN,OAAO,CAAE5B,KAAMA,IAAQD,UAFd,+BAKrB,IAAM6G,EAAYjF,EAAK4B,SAAS,GAChCqD,EAAUlF,SAAQ,SAAA4D,GAAQ,OAAIA,EAAS1D,OAAO,CAAE7B,OAAMC,YACtD2G,EAAchE,KAAd,MAAAgE,EAAa,YAASC,SARIC,QAAQC,MAAM,0CAU5CJ,EAAYC,GAfTD,EAAU5H,QAAS,IAkB1Be,KAAKiF,MAAMpD,SAAQ,SAAAC,GAEf,IADA,IAAQ5B,EAAS4B,EAAT5B,KADe,WAEdgH,EAFc,MAInBJ,EAAgBzG,OAAO8G,OAAO,EAAKvC,OAAOlE,QAAO,SAAA+E,GAAQ,OAAIA,EAAStF,OAAS+G,GAAczB,EAASvF,OAASA,MAEjG2B,SAAQ,SAAA4D,GAClBA,EAAS1D,OAAO,CAAEqF,eAAgBA,SAPnB,SAEdF,EAAa,EAAGE,EAAiB,EAAGN,EAA6B,CAAChF,GAAOgF,EAAc7H,SAAUiI,EAAa,EAA9GA,EAAgBE,EAAoBN,UApLzD,KCEaO,EAA0B,CACrCjD,OAAQ,EACRkD,YAAY,EACZC,OAAQ,CACNC,MAAM,EACNC,wBAAwB,EACxBC,gBAAiB,CACfjK,EAAG,EACHC,EAAG,GAELc,KAAM,CACJmJ,MAAO,EACPpG,IAAK,EACLqG,IAAK,GACLC,KAAM,KAGV5H,SAAU,GACVa,YAAa,GACbgH,iBAAkB,GAClBvH,MAAO,GACPwH,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,iBAAkB,KAClBC,UAAW,KACXC,UAAU,EACVC,kBAAmB,CAAEhK,aAASsI,EAAWrI,aAASqI,IAc9C2B,EAAQ,SAAC3I,GACA,IAAI+E,EAAK/E,GACjBmG,YAIDyC,EAAQC,YAAY,CACxBC,KAAMxL,EAAOyL,SACbtB,eACAuB,SAAU,CACRC,YAAa,SAACjJ,EAAD,GAAiD,IAAvCkJ,EAAsC,EAAtCA,QACrBlJ,EAAMyI,SAAWS,GAEnBP,QACApE,SAAU,SAACvE,EAAOmJ,GAAR,OAAiD,IAAIpE,EAAK/E,GAAQoJ,SAASD,EAAOD,UAC5FG,qBAAsB,SAACrJ,EAAD,GAA8D,IAAzCkJ,EAAwC,EAAxCA,QACzClJ,EAAM0I,kBAAoBQ,GAE5BI,SAAU,SAACtJ,GACTA,EAAM2H,OAAOC,MAAO,EACpB5H,EAAMmI,OAAS,KACfnI,EAAMoI,SAAW,KACjBpI,EAAMsI,WAAa,MAErBH,OAAQ,SAACnI,EAAD,GAA2H,IAAjHkJ,EAAgH,EAAhHA,QACRK,EAAmBL,EAAnBK,KAAMnB,EAAac,EAAbd,SACdpI,EAAM2H,OAAOC,KAAgB,SAAT2B,EACpBvJ,EAAMmI,OAASe,EACflJ,EAAMoI,SAAN,OAAiBA,QAAjB,IAAiBA,IAAY,MAE/BoB,WAAY,SAACxJ,EAAD,GAA4G,IAAD,IAAjGkJ,QAAWO,EAAsF,EAAtFA,UAAWC,EAA2E,EAA3EA,UACtC1J,EAAM0H,aACR1H,EAAM2H,OAAOG,gBAAgBjK,GAAK4L,EAClCzJ,EAAM2H,OAAOG,gBAAgBhK,GAAK4L,IAGtChC,WAAY,SAAC1H,EAAD,GAAiD,IAAvCkJ,EAAsC,EAAtCA,QACpBlJ,EAAM0H,WAAawB,GAErBS,gBAAiB,SAAC3J,EAAD,GAAgK,IAAD,MAArJkJ,QAAWO,EAA0I,EAA1IA,UAAWC,EAA+H,EAA/HA,UAAWhL,EAAoH,EAApHA,QAASC,EAA2G,EAA3GA,QAEnE,GADAqB,EAAM4J,sBAAwB,CAAElL,UAASC,WACrCqB,EAAM0H,WACR1H,EAAM2H,OAAOG,gBAAgBjK,GAAK4L,EAClCzJ,EAAM2H,OAAOG,gBAAgBhK,GAAK4L,OAE7B,IAAI,UAAA1J,EAAMmI,cAAN,eAAcoB,QAAS5J,EAAS0C,IACzCrC,EAAMuI,iBAAmB,CAAE7J,UAASC,gBAE/B,GAAIqB,EAAM2H,OAAOC,MAAkC,kBAAnB5H,EAAMoI,SAAuB,CAGlE,IAAM5D,EAASxE,EAAMoI,SACrB,EAA2CpI,EAAM0I,kBAAhCmB,EAAjB,EAAQnL,QAAyBoL,EAAjC,EAAwBnL,QACxBqB,EAAM0I,kBAAoB,CAAEhK,UAASC,WACrC,IAAMc,EAAQO,EAAM2H,OAAO/I,KAAKmJ,MAC1BvJ,GAAME,EAAUmL,GAASpK,EACzBgF,GAAM9F,EAAUmL,GAASrK,EAC9B,IAAIsF,EAAK/E,GAAQoJ,SAAS,CAAE5E,SAAQC,KAAIjG,SAI7CuL,cAAe,SAAC/J,GAAW,IAAD,EAClBD,EAAO,IAAIgF,EAAK/E,GACtB,GAAIA,EAAM+G,cAAe,CACvB,MAA+B/G,EAAM+G,cAAc5F,MAAM,KAAKI,KAAI,SAAAyI,GAAC,OAAI1I,OAAO0I,MAA9E,mBAAO1E,EAAP,KAAkBC,EAAlB,KAEMC,EAAQlE,OAAOtB,EAAMoI,UAE3BrI,EAAKkK,cAAc,CAAE3E,UAASC,YAAWC,QAAOI,QADhC,IAGlB5F,EAAM+G,mBAAgBC,EACtBhH,EAAMuI,iBAAmB,KACzBvI,EAAM0H,YAAa,EACnB1H,EAAM2H,OAAOC,MAAO,GAChB,UAAA5H,EAAMmI,cAAN,eAAcoB,QAAS5J,EAAS0C,MAClCrC,EAAMmI,OAAS,MAEjBpI,EAAKoG,YAEP+D,WAAY,SAAClK,GACX,IAAQkB,EAAmDlB,EAAnDkB,YAAab,EAAsCL,EAAtCK,SAAUM,EAA4BX,EAA5BW,MAAOyH,EAAqBpI,EAArBoI,SAAUD,EAAWnI,EAAXmI,OAC3CC,GAAiC,kBAAbA,GAA2C,UAAX,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQoB,QAG3D9I,OAAOQ,KAAKC,GAAagD,QAAO,SAACiG,EAAGC,GAClC,IAAMpL,EAAMoL,EAAIjJ,MAAM,KAAKI,KAAI,SAAAyI,GAAC,OAAIK,SAASL,MAI7C,OAHa,EAAThL,EAAI,KAAWoJ,GAAqB,EAATpJ,EAAI,KAAWoJ,UACrClH,EAAYkJ,GAEd,OACN,MAEH3J,OAAOQ,KAAKN,GAAOuD,QAAO,SAACiG,EAAGC,GAK5B,OAHa,EADDA,EAAIjJ,MAAM,KAAKI,KAAI,SAAAyI,GAAC,OAAIK,SAASL,MACrC,KAAW5B,UACVzH,EAAMyJ,GAER,OACN,aAEI/J,EAAS+H,GAEhBpI,EAAMmI,OAAS,KACfnI,EAAMoI,SAAW,KACjBpI,EAAMsI,WAAa,OAErBgC,WAAY,SAACtK,GACX,IAAQoI,EAAkCpI,EAAlCoI,SAAUlH,EAAwBlB,EAAxBkB,YAAaiH,EAAWnI,EAAXmI,OACP,kBAAbC,GAA0C,UAAX,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQoB,cACnCrI,EAAYkH,IAEvBmC,KAvHS,SAACvK,EAAD,GAA6D,IAAxCkJ,EAAuC,EAAvCA,QAKhC,OAJAzI,OAAOqE,OAAO9E,EAAOyH,GACrBzH,EAAMK,SAAW6I,EAAQ7I,SACzBL,EAAMwE,OAAS/D,OAAOQ,KAAKiI,EAAQ7I,UAAUhB,OAAS,EACtDW,EAAMkB,YAAcgI,EAAQhI,YACrBlB,GAmHLwK,YAAa,SAACxK,EAAD,GAA8H,IAAD,IAAnHkJ,QAAW1E,EAAwG,EAAxGA,OAAQZ,EAAgG,EAAhGA,OAAQ6G,EAAwF,EAAxFA,SACxCrC,EAAqBpI,EAArBoI,SAAUD,EAAWnI,EAAXmI,OAClB,GAAIsC,IAAa9K,EAAS+K,IAA0B,kBAAbtC,IAAyB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAQvE,QAAzE,CACA,IAAM4B,EAAQhB,EACRoB,EAAUhC,EACV0B,EAAU8C,EACV7C,EAAY4C,EAAOvE,OAEzB,GAAI0B,IAAYE,EACH,IAAIT,EAAK/E,GACjBiK,cAAc,CAAE3E,UAASC,YAAWC,QAAOI,cAElD+E,MAAO,kBAAMlD,GACbmD,UAAW,SAAC5K,EAAD,GAA0D,IAArCkJ,EAAoC,EAApCA,QAC9BlJ,EAAMW,MAAN,2BAAmBX,EAAMW,OAAUuI,IAErCtK,KAAM,SAACoB,EAAD,GAAwD,IAA9CkJ,EAA6C,EAA7CA,QACNtK,EAASoB,EAAM2H,OAAf/I,KACAmJ,EAA0BnJ,EAA1BmJ,MAAOpG,EAAmB/C,EAAnB+C,IAAKqG,EAAcpJ,EAAdoJ,IAAKC,EAASrJ,EAATqJ,KACnB4C,EAAW9C,GAASmB,EAAUjB,GAAQA,GACxC4C,GAAYlJ,GAAOkJ,GAAY7C,IACjCpJ,EAAKmJ,MAAQ8C,GAEC,OAAZ3B,IACFlJ,EAAM2H,OAAOG,gBAAkB,CAAEjK,EAAG,EAAGC,EAAG,GAC1Cc,EAAKmJ,MAAQ,IAGjB+C,SAAU,SAAC9K,EAAD,GAA8G,IAAD,IAAnGkJ,QAAWjL,EAAwF,EAAxFA,OAAQF,EAAgF,EAAhFA,MAAO+B,EAAyE,EAAzEA,GAC5CE,EAAMK,SAASP,GAAI7B,OAASA,EAC5B+B,EAAMK,SAASP,GAAI/B,MAAQA,GAE7BgN,eAAgB,SAAC/K,EAAD,GAAgE,IAA3CF,EAA0C,EAArDoJ,QAAWpJ,GACtB,IAAIiF,EAAK/E,GACJqB,QAAQvB,GACrBkL,2BACLrC,EAAM3I,IAERiL,eAAgB,SAACjL,EAAD,GAAgE,IAA3CF,EAA0C,EAArDoJ,QAAWpJ,GACtB,IAAIiF,EAAK/E,GACJqB,QAAQvB,GACrBoL,2BACLvC,EAAM3I,IAERmL,SAAU,SAACnL,GAAW,IAAD,EACQ,UAAvB,UAAAA,EAAMmI,cAAN,eAAcoB,OAAoD,kBAA1BvJ,EAAMmI,OAAOC,WACvDpI,EAAMoL,aAAepL,EAAMmI,OAAOC,WAEtCiD,iBAAkB,SAACrL,GACjB,QAA2BgH,IAAvBhH,EAAMoL,aAAV,CACA,MAA6BpL,EAAM4J,sBAA3BlL,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QACXuD,EAAOoJ,KAAKC,MAAMD,KAAKE,UAAUxL,EAAMK,SAASL,EAAMoL,gBAC5DlJ,EAAK1C,IAAMrB,EAAQM,OAAOC,EAASC,EAASqB,EAAM2H,OAAO/I,KAAKmJ,OAC9D/H,EAAMK,SAASL,EAAMwE,QAArB,2BAAoCtC,GAApC,IAA0CpC,GAAIE,EAAMwE,OAAQvG,OAAQ,EAAGF,MAAO,MAC5EiC,EAAMwE,YAKDiH,EAAU7C,EAAM6C,QAChBC,EAAgB9C,EAAM+C,QAGtBC,EAAuB,SAAC5L,GAAD,OAAsBA,EAAM6L,MAAM7L,EAAM8L,U,SC3N/DC,GAAiB,kBAAMC,gBACvBC,GAAkDC,K,2BCLzDC,GAAkB,SAAC9M,EAAgB+M,GAGrC,IAHgF,IAAvBzK,EAAsB,uDAAhB,GAAIqG,EAAY,uDAAN,EACnEqE,EAAS,GACT9K,EAAM,iEACH+K,EAAI,EAAGA,EAAIjN,EAAQiN,IAAK,CAE7B,IADA,IAAIC,EAAO,GACFnN,EAAI,EAAGA,EAAIsC,KAAK8K,MAAM9K,KAAK+K,UAAY9K,EAAMqG,GAAOA,GAAM5I,IAC/DmN,GAAQhL,EAAImL,OAAOhL,KAAK8K,MAAM9K,KAAK+K,SAAWlL,EAAIlC,SAElD+M,EAAW/M,OAAS,IACpBkN,GAAQH,GAEZC,EAAOnJ,KAAKqJ,GAEhB,OAAOF,GAgBIM,GAbA,yCAAG,WAAOC,GAAP,oBAAAjG,EAAA,sDAOd,IANMkG,EAAM,iBAAO,CACftD,KAAM,MACNT,KAAM,OACNf,MAAOoE,GAAgB,EAAG,GAAI,GAAI,GAAG,KAEnCW,EAAM,GACH1N,EAAI,EAAGA,EAAIwN,IAAUxN,EAC1B0N,EAAI5J,KAAK2J,KARC,yBAUPC,GAVO,2CAAH,sDCZFC,GAAW,WACtB,MAAO,CACLjN,GAAI,EACJ,KAAQzC,EAAU2P,OAClB,KAAQ,CACN,KAAQ,YACR,KAAQ,YACR,MAAS,cAEX,KAAQ,CACN,GAAM,EACN,IAAO,GAET,IAAO,CACL,GAAM,GACN,EAAK,KAEP,OAAS,EACT/O,OAAQ,EACRF,MAAO,IAiCIkP,GALF,CACXC,SAzBY,yCAAG,iCAAAvG,EAAA,sDAUf,IATMjC,EAAY,CAChB,MAAS,GAET,YAAe,CACb,WAAW,EACX,WAAW,IAINtF,EAAI,EAAGA,EAAI,IAAKA,GACjB8C,EAAO6K,MACRjN,GAAKV,EACV8C,EAAKwC,KAAKoE,KAAV,eAAyB1J,GACzB8C,EAAK1C,IAAI3B,EAAI,IAAMuB,EACnB8C,EAAK1C,IAAI1B,EAAI,GAAKsB,EAClBsF,EAAKM,MAAM5F,GAAK8C,EAhBH,yBAoBRwC,GApBQ,2CAAH,qDA0BZyI,eC9CWC,GAAgBC,YAAqB,oBACrCC,GAAaD,YAAwB,cACrCE,GAAeF,YAAqB,gBAE3C5F,GAAyB,CAC7BqE,QAAS,EACTD,MAAO,CAAC2B,EAAsBA,EAAsBA,GACpDC,UAAW,GACXF,aAAc,GAGHG,GAAqBC,YAAiB,aAAD,wBAAe,uBAAAhH,EAAA,sEAClDsG,GAAKE,WAAW,GADkC,oFAIpDS,GAAmBD,YAAiB,mBAAD,wBAAqB,uBAAAhH,EAAA,sEACtDsG,GAAKC,WADiD,oFAK/DvB,GAAUkC,YAAcpG,IAAc,SAACqG,GAC3CA,EACGC,QAAQX,IAAe,SAACpN,EAAD,GAAyB,IAAfkJ,EAAc,EAAdA,QAChClJ,EAAM8L,QAAU5C,KAEjB6E,QAAQT,IAAY,SAACU,EAAD,GAAsF,IAAD,IAA9D9E,QAAWxK,EAAmD,EAAnDA,QAASC,EAA0C,EAA1CA,QAC9D,GAAKqP,EAAST,aAAd,CAEA,IAAMvN,EAAQgO,EAASnC,MAAMmC,EAASlC,SAChC5J,EAAO6K,KACb7K,EAAK1C,IAAMrB,EAAQM,OAAOC,EAASC,EAASqB,EAAM2H,OAAO/I,KAAKmJ,OAC9D/H,EAAM0I,kBAAoB,CAAEhK,UAASC,WACrCqB,EAAMK,SAASL,EAAMwE,QAArB,2BAAoCtC,GAApC,IAA0CpC,GAAIE,EAAMwE,OAAQvG,OAAQ,EAAGF,MAAO,IAC9EiC,EAAMoI,SAAWpI,EAAMwE,SACvBxE,EAAMmI,OAAS,CAAEoB,KAAM,OAAQnB,SAAUpI,EAAMoI,UAC/CpI,EAAM2H,OAAOC,MAAO,EAEpBoG,EAAST,kBAAevG,MAEzB+G,QAAQR,IAAc,SAACS,EAAD,GAA4B,IAAf9E,EAAc,EAAdA,QAClC8E,EAAST,aAAerE,KAEzB6E,QAAQL,GAAmBO,WAAW,SAACjO,EAAOmJ,GAC7CnJ,EAAMyN,UAAYtE,EAAOD,WAE1B6E,QAAQH,GAAiBK,WAAW,SAACjO,EAAOmJ,GAC3C,MAAyCA,EAAOD,QAAjC7I,EAAf,EAAQ2E,MAAiB9D,EAAzB,EAAyBA,YACzBlB,EAAM6L,MAAM7L,EAAM8L,SAAWJ,EAC3B1L,EAAM6L,MAAM7L,EAAM8L,SAClB,CACEvC,KAAMjM,EAAOyL,SAAW,QACxBG,QAAS,CAAE7I,WAAUa,oBAK1BgN,YACC,SAAC/E,GAAD,OAAYA,EAAOI,KAAKxI,WAAWzD,EAAOyL,aAC1C,SAAC/I,EAAOmJ,GACNnJ,EAAM6L,MAAM7L,EAAM8L,SAAWJ,EAAc1L,EAAM6L,MAAM7L,EAAM8L,SAAU3C,SAOlEgF,GAAQC,YAAe,CAClCzC,a,gBCtEI0C,GAAMC,KAAOC,IAAV,uKAUHC,GAASF,KAAOG,OAAV,8FA8BGC,GAxBgB,WAC7B,IAAMjG,EAAWwD,IAAe,SAAC0C,GAAD,OAAO/C,EAAqB+C,GAAGlG,YACzDmG,EAAW7C,KAEjB,OACE,gBAACsC,GAAD,CAAKQ,UAAU,sBAAf,WACIpG,GACA,eAAC+F,GAAD,CACEK,UAAU,6BACVC,QAAS,kBAAM1H,QAAQ2H,IAAI,UAF7B,mBAOF,eAACP,GAAD,CACEK,UAAU,6BACVC,QAAS,kBAAMF,EAASnD,EAAQxC,aAAaR,KAF/C,SAIGA,EAAW,SAAW,aClCzBuG,GAAWV,KAAOC,IAAV,0KAURC,GAASF,KAAOG,OAAV,oHAkCGQ,GA3BU,WACvB,IAAML,EAAW7C,KAEjB,OACE,gBAACiD,GAAD,CAAUH,UAAU,gBAApB,UACE,eAAC,GAAD,CACEA,UAAU,uBACVC,QAAS,kBAAMF,EAASnD,EAAQ7M,MAAK,KAFvC,eAMA,eAAC,GAAD,CACEiQ,UAAU,uBACVC,QAAS,kBAAMF,EAASnD,EAAQ7M,MAAK,KAFvC,eAMA,eAAC,GAAD,CACEiQ,UAAU,uBACVC,QAAS,kBAAMF,EAASnD,EAAQ7M,KAAK,QAFvC,uBCdSsQ,GAtBS,SAACC,GACrB,IAAQC,EAAkCD,EAAlCC,SAAUC,EAAwBF,EAAxBE,OAAQjQ,EAAgB+P,EAAhB/P,EAAGqJ,EAAa0G,EAAb1G,SAU7B,OACI,mDACQ2G,GADR,IAEIE,MAAM,6BACNT,UAAU,QACVU,EAAG,EACHC,YAdY,SAACC,GACbhH,GACJ0G,EAAMhH,OAAOsH,EAAG,CACZJ,SACAjQ,WCLNsQ,GAAMpB,KAAOqB,IAAV,yEAKHC,GAAatB,KAAOuB,KAAV,6KAOE,qBAAGC,MAAmBC,SAAW,EAAI,KCRxCC,GALI,CACfC,UACAC,KDoBS,SAACf,GACZ,IAAQE,EAAcF,EAAdE,OAAQc,EAAMhB,EAANgB,EAER/H,EADM6D,GAAeL,GACrBxD,SACFwG,EAAW7C,KAEjB,OACE,eAAC2D,GAAD,UACE,eAACE,GAAD,CACEE,MAAO,CAAEC,SAAU3H,IAAaiH,GAAUA,GAC1Cc,EAAGA,EACHX,YAAa,SAACC,GACPJ,IACLI,EAAEW,kBAEFxB,EAASnD,EAAQtD,OAAO,CAAEoB,KAAM,OAAQnB,SAAUiH,aElC/CgB,GAAU,WACrB,MACEpE,GAAeL,GADTzD,EAAR,EAAQA,OAAQR,EAAhB,EAAgBA,OAAQhH,EAAxB,EAAwBA,MAAOyH,EAA/B,EAA+BA,SAAUG,EAAzC,EAAyCA,iBAEzC,KAAI,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAQvE,QAEX,OADAwD,QAAQC,MAAR,2BACO,KAET,IAAMiJ,EAAQ,UAAMlI,EAAN,gBAAsBD,EAAOvE,QAE3C,IAAKjD,EAAM2P,GAET,OADAlJ,QAAQC,MAAR,4BACO,KAET,IAAKkB,EAEH,OADAnB,QAAQC,MAAR,uBACO,KAGT,IAAMhJ,EAAQ,CACZR,EAAG8C,EAAM2P,GAAUzS,EACnBC,EAAG6C,EAAM2P,GAAUxS,GAEfc,EAAO+I,EAAO/I,KAAKmJ,MACjBrJ,EAAqB6J,EAArB7J,QAASC,EAAY4J,EAAZ5J,QACXL,EAAMH,EAAQM,OAAOC,EAASC,EAASC,GACvCuR,EAAIhS,EAAQC,gBAAgBC,EAAOC,GAEzC,OAAO,eAAC,GAAW4R,KAAZ,CAAiBC,EAAGA,K,SC1BvBI,GAAajC,KAAOC,IAAV,sEAKHiC,GAAQ,SAACrB,GACpB,OACE,eAACoB,GAAD,CAAY1B,UAAU,aAAtB,SACGvD,KAAKE,UAAU2D,EAAO,KAAM,MCL7BsB,GAAYnC,KAAOC,IAAV,4NAQX,qBAAGuB,MACGrO,SACNiP,aADA,kFAOEC,GAAsBC,YAC1BhF,GACA,qBAAG7E,iBAmBC8J,GAAYvC,KAAOC,IAAV,qIAQTuC,GAAUxC,aAAOuC,GAAPvC,CAAH,oGAIT,qBAAGwB,MACG1N,OACNsO,aADA,uEAMEK,GAAUzC,aAAOuC,GAAPvC,CAAH,oGAIT,qBAAGwB,MACG1N,OACNsO,aADA,yDAMEM,GAAS1C,aAAOuC,GAAPvC,CAAH,mGAKR,qBAAGwB,MACG1N,OACNsO,aADA,oEAMEO,IAAW,oBACdtR,EAAS+K,GAAK,CAACsG,KADD,eAEdrR,EAAS0C,IAAM,CAACyO,GAASC,KAFX,GAKXG,GAAQ,SAAC/B,GAOb,IANA,IAAQrP,EAAmBqP,EAAnBrP,GAAIU,EAAe2O,EAAf3O,KAAM+I,EAAS4F,EAAT5F,KACZqF,EAAW7C,KACXhF,EAAgBkF,GAAe0E,IAC/BvO,EAAQ6J,GAnEI,SAACnM,GAAD,OAClB8Q,YACEhF,GACA,qBACEvL,SACGP,GAAOsC,SA8De+O,CAAYrR,IACrCd,EAAM,GALyD,WAO1DI,GACP,IAAMyB,EAAG,UAAM0I,EAAN,eAAiBnK,GACpBgS,EAAO,UAAMtR,EAAN,YAAYyJ,EAAZ,YAAoBnK,GAC3BiS,EAAaJ,GAAY1H,GAAMnK,EAAI,GACnCoB,EACJ,eAAC6Q,EAAD,CACEvB,MAAO,CAAE1N,SACToN,YAAa,SAACC,GACZA,EAAEW,kBACFxB,EACEnD,EAAQtD,OAAO,CACboB,OACA3F,OAAQxE,EACRgJ,SAAUtI,MAKhBwR,UAAW,SAAC7B,GACVb,EACEnD,EAAQjB,YAAY,CAAEhG,OAAQ1E,EAAI8D,OAAQxE,EAAGqL,SAAUlB,MAf7D,SAmBE,eAACkH,GAAD,CAAWX,MAAO,CAAErO,QAASsF,IAAkBqK,GAAW,QAPrDvQ,GAUT7B,EAAIkE,KAAK1C,IA3BFpB,EAAI,EAAGA,GAAKoB,EAAK+I,GAAOnK,IAAM,EAA9BA,GA8BT,OAAO,sBAAKyP,UAAS,UAAKtF,EAAL,QAAd,SAAgCvK,KAGnCuS,GAAcjD,KAAOC,IAAV,wLAQb,qBAAGuB,MACGC,UACNW,aADA,iGA6IWc,GAtIW,SAAC,GAA4B,IAA1B1R,EAAyB,EAAzBA,GAE3B,EAIImM,GAAeL,GAHjBpH,EADF,EACEA,OACUoD,EAFZ,EAEED,OAAUC,KACQ1F,EAHpB,EAGE7B,SAAaP,GAGTiQ,EAAW9D,GArHA,SAACnM,GAAD,OACjB8Q,YACEhF,GACA,gBAAGxD,EAAH,EAAGA,SAAH,OAAkBtI,IAAOsI,KAkHKqJ,CAAW3R,IACrC8O,EAAW7C,KACTvL,EAAc0B,EAAd1B,KAAMhB,EAAQ0C,EAAR1C,IAERkS,EAAMC,iBAAuB,MAEnCC,qBAAU,WACR,GAAIF,EAAIG,QAAS,CACf,MAAsCH,EAAIG,QAAlCC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YACtBnD,EACEnD,EAAQX,SAAS,CAAE7M,OAAQ6T,EAAc/T,MAAOgU,EAAajS,WAGhE,CAAC8O,EAAU9O,EAAIoC,IAElB0P,qBAAU,WACR,IAAMI,EAAa,SAACzI,EAAgBnK,EAAWN,GAC7C,IAAM+B,EAAG,UAAMf,EAAN,YAAYyJ,EAAZ,YAAoBnK,GACvBvB,EAAIwM,SAAS4H,iBAAiBnT,GAAMoT,MAAQhQ,EAAK1C,IAAI3B,EACrDC,EAAIuM,SAAS4H,iBAAiBnT,GAAMqT,KAAOjQ,EAAK1C,IAAI1B,EAE1D,OAAO,gBACJ+C,EAAM,CAAEhD,IAAGC,OAIhB,GAAI4T,EAAIG,QAAS,CACf,IAAMO,EAASnT,MAAMC,KAClBwS,EAAIG,QAAQnU,cAAc,WAA8BoG,UAErDuO,EAAUpT,MAAMC,KACnBwS,EAAIG,QAAQnU,cAAc,YAA+BoG,UAExDwO,EAAW,GACfA,EAAW7R,OAAOqE,OAChBwN,EACAF,EAAOlO,QAAO,SAACC,EAAKrF,EAAMM,GACxB,OAAOqB,OAAOqE,OAAOX,EAAK6N,EAAWrS,EAAS+K,GAAItL,EAAI,EAAGN,MACxD,KAELwT,EAAW7R,OAAOqE,OAChBwN,EACAD,EAAQnO,QAAO,SAACC,EAAKrF,EAAMM,GACzB,OAAOqB,OAAOqE,OAAOX,EAAK6N,EAAWrS,EAAS0C,IAAKjD,EAAI,EAAGN,MACzD,KAEL8P,EAASnD,EAAQb,UAAU0H,OAE5B,CAAC1D,EAAU9O,EAAIoC,EAAK1C,IAAI3B,EAAGqE,EAAK1C,IAAI1B,IAEvC8T,qBAAU,WAER,GAAIF,EAAIG,SAAWrN,EAAS,IAAM1E,GAAM8H,EAAM,CAC5C,MAAsC8J,EAAIG,QAAlCC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,YACtBnD,EACEnD,EAAQlH,SAAS,CACfC,OAAQ1E,EACRtB,GAAmB,IAAduT,EACLtN,GAAoB,IAAfqN,QAKV,IAEH,IAAIS,EAAQ,CACVJ,IAAK3S,EAAI1B,EAAI,KACboU,KAAM1S,EAAI3B,EAAI,KACd2U,OAAQ,QAMV,OAJItQ,EAAKE,QACPmQ,EAAK,2BAAQA,GAAU3S,IAIvB,gBAAC2R,GAAD,CACEzB,MAAO,CAAEC,YACT2B,IAAKA,EACLa,MAAOA,EACP/C,YAAa,SAACC,GACZA,EAAEW,kBACF,IAAQ1R,EAAqB+Q,EAArB/Q,QAASC,EAAY8Q,EAAZ9Q,QACjBiQ,EAASnD,EAAQtD,OAAO,CAAEoB,KAAM,OAAQnB,SAAUtI,KAClD8O,EAASnD,EAAQpC,qBAAqB,CAAE3K,UAASC,cAEnD8T,cAAe,SAAChD,KAGhBiD,cAAe,aAbjB,UAiBE,eAAC,GAAD,eAAWxQ,KAETA,EAAKE,OACL,uCACE,sBACE0M,QAAS,WACPF,EAASnD,EAAQV,eAAe,CAAEjL,SAFtC,wBAOA,sBACEgP,QAAS,WACP1H,QAAQ2H,IAAI,IACZH,EAASnD,EAAQR,eAAe,CAAEnL,SAHtC,gCAUJ,eAAC,GAAD,CAAOA,GAAIA,EAAIU,KAAMA,EAAM+I,KAAM5J,EAAS+K,KAC1C,eAAC,GAAD,CAAO5K,GAAIA,EAAIU,KAAMA,EAAM+I,KAAM5J,EAAS0C,UC3Q1CsQ,GAAgB/B,YAAwBhF,GAAsB,SAAC+C,GAAD,OAClElO,OAAOC,QAAQiO,EAAEtO,UACdS,QAAO,+CAAmC,IAAnC,KAAQW,WACfF,KAAI,gBAAEzB,EAAF,2BAAUwB,OAAOxB,SAGb8S,GAAW,WACtB,IAAMvS,EAAW4L,GAAe0G,IAGhC,OACE,qCACGtS,EAASkB,KAAI,SAACzB,GACb,OAAO,eAAC,GAAD,CAA4BA,GAAIA,GAARA,SCb1B+S,GAAiB,WAC5B,MAA+B5G,GAAeL,GAAtC1K,EAAR,EAAQA,YAAaP,EAArB,EAAqBA,MAEfmS,EAAQrS,OAAOC,QAAQQ,GAC1BJ,QAAO,0CACPS,KAAI,YAAY,IAAVV,EAAS,oBAER7B,EAAM6B,EAAIM,MAAM,KAAKI,IAAID,QAEzBgP,EAAQ,UAAMtR,EAAI,GAAV,gBAAoBA,EAAI,IAChC+T,EAAM,UAAM/T,EAAI,GAAV,eAAmBA,EAAI,IAEnC,IAAK2B,EAAM2P,KAAc3P,EAAMoS,GAE7B,OAAO,KAGT,IAAM1U,EAAQ,CACZR,EAAG8C,EAAM2P,GAAUzS,EACnBC,EAAG6C,EAAM2P,GAAUxS,GAEfQ,EAAM,CACVT,EAAG8C,EAAMoS,GAAQlV,EACjBC,EAAG6C,EAAMoS,GAAQjV,GAEbqS,EAAIhS,EAAQC,gBAAgBC,EAAOC,GACzC,OAAO,eAAC,GAAW4R,KAAZ,CAA2Bb,OAAQxO,EAAKsP,EAAGA,GAArBtP,MAEjC,OAAO,qCAAGiS,KCrBNE,GAAiB1E,KAAOC,IAAV,6RAUd0E,GAAgB3E,KAAOC,IAAV,oFAMNxF,GAAW,WACtB,MAMIkD,GAAeL,GANnB,IACEjE,OADF,IAEIG,gBAAmBjK,EAFvB,EAEuBA,EAAGC,EAF1B,EAE0BA,EACtBc,EAHJ,EAGIA,KAEF2J,EALF,EAKEA,iBAIIqG,EAAW7C,KAMjB,OAJA6F,qBAAU,WACRhD,EAAShB,QACR,CAACgB,IAGF,gBAACoE,GAAD,CACEE,SAAU,EACVC,iBAAkB,SAAC1D,GACH,WAAVA,EAAE5O,MACJ+N,EAASnD,EAAQnB,cACjBsE,EAASnD,EAAQvB,eAEfuF,EAAE2D,SAAqB,MAAV3D,EAAE5O,KACjB+N,EAASnD,EAAQN,YAEfsE,EAAE2D,SAAqB,MAAV3D,EAAE5O,KACjB+N,EAASnD,EAAQJ,qBAGrBvL,GAAG,WACH+O,UAAU,kBACVW,YAAa,SAACC,GAEZb,EAASnD,EAAQ/D,YAAW,IAC5BkH,EAASnD,EAAQnC,aAEnBgI,UAAW,kBAAM1C,EAASnD,EAAQ1B,kBAClCsJ,YAAa,SAAC5D,GACZ,IAAQ/Q,EAA2C+Q,EAA3C/Q,QAASC,EAAkC8Q,EAAlC9Q,QAAS8K,EAAyBgG,EAAzBhG,UAAWC,EAAc+F,EAAd/F,UACrCkF,EACEnD,EAAQ9B,gBAAgB,CAAEjL,UAASC,UAAS8K,YAAWC,gBAG3D4J,aAAc,SAAC7D,GACb,IAAQ/Q,EAAqB+Q,EAArB/Q,QAASC,EAAY8Q,EAAZ9Q,QACjBiQ,EAAStB,GAAW,CAAE5O,UAASC,cA9BnC,UAiCE,eAAC,GAAD,IACA,eAAC,GAAD,IACA,gBAACsU,GAAD,CACEpE,UAAU,WACV0D,MAAO,CACLgB,UAAU,aAAD,OAAe1V,EAAf,eAAuBC,EAAvB,qBAAqCc,EAAKmJ,MAA1C,MAHb,UAME,eAAC,GAAD,IACA,eAAC,GAAD,IACCQ,GAAoB,eAAC,GAAD,WC5CdiL,GApCI,SAACrE,GAChB,IAAQ/C,EAAe+C,EAAf/C,WACFqH,EAAOxH,IAAe,SAAA0C,GAAC,OAAIA,EAAElB,aAC7BmB,EAAW7C,KACX2H,EAAYtH,EAAWuH,cAAcxS,MAAM,KAAKL,QAAO,SAAA8S,GAAI,OAAIA,EAAKvU,OAAS,KAOnF,OAJAuS,qBAAU,WACNhD,EAASlB,QACV,CAACkB,IAGA,sBACIC,UAAU,0BADd,SAGK4E,EAAKlS,KAAI,SAACqS,EAAMC,GACb,IAAQ/K,EAAsB8K,EAAtB9K,KAAMS,EAAgBqK,EAAhBrK,KAAMxB,EAAU6L,EAAV7L,MACd+L,EAAQxI,KAAKE,UAAUoI,EAAM,KAAM,GAEzC,OACKF,EAAU9S,MAAK,SAAA2L,GAAI,OAAIuH,EAAMH,cAAclQ,SAAS8I,QAAWmH,EAAUrU,SAC1E,sBAEIwP,UAAU,sBACVkF,mBAAoB,SAACtE,GACjBb,EAASrB,GAAa,KAJ9B,SAOI,+CAAehE,EAAf,oBAA+BxB,EAAQe,MANlC,2BAA6B+K,S,MCoB3CG,OAzCf,WAEE,MAAoCC,mBAAS,IAA7C,mBAAO7H,EAAP,KAAmB8H,EAAnB,KACMtF,EAAW7C,KAOjB,OALA6F,qBAAU,WACRhD,EAASnD,EAAQ9C,WAChB,CAACiG,IAIF,uBAAKC,UAAU,MAAf,UACE,uBAAKA,UAAU,qBAAf,UACE,sBAAKA,UAAU,4BAAf,SACE,wBACEtF,KAAK,OACL4K,YAAY,mBACZC,SAAU,SAAA3E,GAAOyE,EAAczE,EAAE4E,OAAOtM,YAG5C,sBAAK8G,UAAU,0BAAf,SACE,eAAC,GAAD,CACEzC,WAAYA,SAIlB,uBAAKyC,UAAU,OAAf,UACE,iCACE,yBAAQC,QAAS,kBAAMF,EAAShB,OAAhC,gCAEA,yBAAQkB,QAAS,kBAAMF,EAASxB,GAAc,KAA9C,uBACA,yBAAQ0B,QAAS,kBAAMF,EAASxB,GAAc,KAA9C,uBACA,yBAAQ0B,QAAS,kBAAMF,EAASxB,GAAc,KAA9C,uBACA,yBAAQ0B,QAAS,kBAAMF,EAASnD,EAAQ9C,UAAxC,sBAEF,eAAC,GAAD,WCpCR2L,IAASC,OACP,eAAC,IAAMC,WAAP,UACE,eAAC,KAAD,CAAUrG,MAAOA,GAAjB,SACE,eAAC,GAAD,QAGJ1Q,SAASgX,eAAe,W","file":"static/js/main.2a897505.chunk.js","sourcesContent":["export enum NODE_TYPE {\n    START = 'START',\n    MIDDLE = 'MIDDLE',\n    END = 'END',\n}\n\nexport enum Slices {\n    Drawflow = 'drawflow'\n}\n\nexport const CURV = 0.3;\n\nexport enum MODAL_TYPE {\n    NODE_SETTINGS = \"NODE_SETTINGS\",\n    GROUP_SETTINGS = \"GROUP_SETTINGS\",\n}\n\nexport enum portType {\n    in='in',\n    out='out'\n}\n\nexport type pos = {\n    x: number,\n    y: number,\n}\n\nexport type clientPos = {\n    clientX: number,\n    clientY: number,\n}\n\nexport type port = {\n    in: number,\n    out: number,\n}\n\n\n\nexport type ports = {\n    [propName: string]: pos\n}\n\n\n\nexport type block = {\n    name: string,\n    type: string,\n    value: string,\n    create?: boolean\n}\n\n\n\nexport type dataNode = {\n    type: string\n    data: block\n    port: port\n    pos: pos\n    isSub: boolean\n}\n\nexport interface node extends dataNode {\n    id: number\n    height: number\n    width: number\n    lane?: number\n    position?: number\n    head?: number\n    positionNumber?: number\n    subnodesVisibility?: boolean\n    childrenVisibility?: boolean\n    visible?: boolean\n    selected?: boolean\n}\n\ntype RecursivePartial<T> = {\n    [P in keyof T]?:\n    T[P] extends (infer U)[] ? RecursivePartial<U>[] :\n    T[P] extends object ? RecursivePartial<T[P]> :\n    T[P];\n}\n\nexport type updateNode = RecursivePartial<node>\n\nexport type drawflow = {\n    [id: number]: node\n}\n\nexport type connections = {\n    [propName: string]: boolean\n}\n\nexport type data = {\n    nodes: drawflow,\n    connections: connections,\n    connectionsLabel?: {\n        [propName: string]: string\n    },\n}\n\nexport interface stateData {\n    nodeId: number,\n    canvasDrag: boolean,\n    config: {\n        drag: boolean,\n        connectionsLabelEnable: boolean,\n        canvasTranslate: pos,\n        zoom: {\n            value: number,\n            max: number,\n            min: number,\n            tick: number,\n        },\n    },\n    drawflow: drawflow,\n    modalType: string | null,\n    newPathDirection: clientPos | null,\n    ports: ports,\n    connections: connections,\n    connectionsLabel: {\n        [propName: string]: string\n    },\n    selectId: string | number | null,\n    select: { type: portType | 'node' | 'path', portId?: number, selectId?: string | number } | null,\n    selectPath: string | null,\n    showButton: number | null,\n    editLock: boolean,\n    mouseBlockDragPos: { clientX?: number | undefined, clientY?: number | undefined },\n    portToConnect?: string | undefined\n    nodeToCopyId?: number\n    clientCurrentMousePos?: clientPos\n}\n\nexport interface flowType {\n    version: number\n    flows: stateData[]\n    dragTemplate?: number | undefined\n    templates: block[]\n}\n\nexport type addConnectionType = { startId: number, startPort: number, endId: number, endPort: number }\nexport type loadType = { drawflow: drawflow, connections: connections }\nexport type moveNodeType = { dx: number, dy: number, nodeId: number }","import { CURV, stateData } from \"../types\";\n\nimport { pos } from \"../types\";\n\nexport const getPortListByNodeId = (nodeId: number, state: stateData) => {\n  const { ports } = state;\n  return Object.keys(ports).filter(key => key.split(/_/g)[0] === \"\" + nodeId);\n}\n\nconst createCurvature = (start: pos, end: pos) => {\n  const halfHeiht = (start.y - end.y) / 2\n  const dx = start.x - end.x\n  return `M ${start.x} ${start.y} v ${-halfHeiht} h ${-dx} v ${-halfHeiht} `\n}\n\nconst getCanvasInfo = () => {\n  // TODO : replace querySelector to someting\n  const canvas = (document.querySelector(\"#drawflow\") as HTMLElement).querySelector(\".drawflow\") as HTMLElement;\n  const canvasRect = canvas.getBoundingClientRect();\n  return {\n    x: canvasRect.x,\n    y: canvasRect.y,\n    width: canvas.clientWidth,\n    height: canvas.clientHeight,\n  };\n}\n\nconst getPos = (clientX: number, clientY: number, zoom: number) => {\n  const { x, y, width, height } = getCanvasInfo();\n  return {\n    x: clientX * (width / (width * zoom)) - (x * (width / (width * zoom))),\n    y: clientY * (height / (height * zoom)) - (y * (height / (height * zoom))),\n  }\n}\n\nconst findIndexByElement = (elmt: HTMLElement) => {\n  const parentElement = elmt.parentElement as HTMLElement;\n  const arr = Array.from(parentElement.childNodes);\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === elmt) return i;\n  }\n  return -1;\n}\n\nconst getPortPosWithZoom = (size: { width: number, height: number }, pos: pos, zoom: number) => {\n  const canvas = handler.getCanvasInfo();\n  const coef = 1 / zoom\n\n  const x = size.width / 2 + (pos.x - canvas.x) * coef;\n  const y = size.height / 2 + (pos.y - canvas.y) * coef;\n\n  return { x, y };\n}\n\nconst handler = {\n  createCurvature,\n  getCanvasInfo,\n  getPos,\n  findIndexByElement,\n  getPortPosWithZoom,\n}\n\nexport default handler\n","export const subnodeStyle = {\n    width: 100,\n    height: 60,\n}\n\n","import lodash from \"lodash\"\nimport { subnodeStyle } from \"../styles\"\nimport { node, port, pos, stateData, updateNode } from \"../types\"\nimport { Flow } from \"./Flow\"\n\nexport default class Node {\n    public readonly id: number\n    private readonly state: stateData\n    public readonly flow: Flow\n    public readonly nodeState: node\n    public readonly spacingX = 40\n    public readonly spacingY = 60\n\n    constructor(id: number, flow: Flow) {\n        this.id = id\n        this.flow = flow\n        this.state = flow.state\n        this.nodeState = this.state.drawflow[this.id]\n    }\n\n    get head() {\n        return this.nodeState.head\n    }\n\n    get lane() {\n        return this.nodeState.lane\n    }\n\n    get port(): port {\n        return this.nodeState.port\n    }\n\n    get portInPos(): pos | undefined {\n        return Object.entries(this.state.ports).find(([key, value]) => key === `${this.id}_in_1`)?.[1]\n    }\n\n    get outPorts() {\n        return Object.entries(this.state.ports).filter(([key, pos]) => key.startsWith(`${this.id}_out`))\n    }\n\n    get parent(): Node | null {\n        const parentId = Object.keys(this.state.connections).find(key => key.split('_')[2] === this.id.toString())?.split('_')[0]\n        return parentId ? this.flow.getNode(Number(parentId)) : null\n    }\n\n    get parentConnection() {\n        return Object.keys(this.state.connections).find((key) => {\n            const arr = key.split('_').map(Number)\n            return arr[0] === this.parent?.id && arr[2] === this.id && arr[3] === 1\n        })\n    }\n\n    get totalWidth() {\n        if (this.nodeState.visible === false) return 0\n        const totalWidth = Math.max(this.width + this.subnodesWidth, this.leftWidth + this.rightWidth)\n        return totalWidth\n    }\n\n    get childrenTotalWidth() {\n        const { out1 } = this\n        if (!out1.length) return 0\n\n        let totalWidth = 0\n        out1.forEach(node => {\n            totalWidth += node.totalWidth\n        })\n        return totalWidth + this.spacingX * (out1.length - 1)\n    }\n\n    alignChildren() {\n        const { out1 } = this\n        this.update({ isSub: false, port: { out: 2 } })\n\n\n        let xPos = this.pos.x - (this.leftWidth - this.width / 2)\n\n        for (const node of out1) {\n            const x = xPos + (node.leftWidth - node.width / 2)\n            node.setPos({ x, y: this.pos.y + this.height + this.spacingY })\n            if (node.nodeState.visible !== false) {\n                xPos += node.totalWidth + this.spacingX\n            }\n            node.alignChildren()\n        }\n\n        const { subnodes } = this\n        if (subnodes.length) {\n\n            xPos = this.pos.x + this.width + this.spacingX\n            subnodes.forEach(subNode => {\n                subNode.update({ isSub: true, port: { out: 1 }, ...subnodeStyle })\n                subNode.setPos({ x: xPos, y: this.pos.y + (this.height / 2 - subNode.height / 2) })\n                delete this.state.ports[`${subNode.id}_out_2`]\n                xPos += subNode.width + this.spacingX\n            })\n        }\n    }\n\n    get leftWidth(): number {\n        if (this.nodeState.visible === false) return 0\n        const { out1, childrenTotalWidth } = this\n        const selfLeftWidth = this.width / 2\n        if (!out1.length) {\n            return selfLeftWidth\n        }\n\n        const leftChildWidth = out1[0].leftWidth\n        const rightChildWidth = out1[out1.length - 1].rightWidth\n\n        let childrenRightWidth = leftChildWidth + (childrenTotalWidth - leftChildWidth - rightChildWidth) / 2\n        return Math.max(childrenRightWidth, selfLeftWidth)\n    }\n\n    get rightWidth(): number {\n        if (this.nodeState.visible === false) return 0\n        const { out1, childrenTotalWidth } = this\n        const selfRightWidth = this.width / 2 + this.subnodesWidth\n        if (!out1.length) {\n            return selfRightWidth\n        }\n\n        const leftChildWidth = out1[0].leftWidth\n        const rightChildWidth = out1[out1.length - 1].rightWidth\n\n        let childrenRightWidth = rightChildWidth + (childrenTotalWidth - leftChildWidth - rightChildWidth) / 2\n        return Math.max(childrenRightWidth, selfRightWidth)\n    }\n\n    get all2Successors(): Array<Node> {\n        const { subnodes, out1 } = this\n        const successors: Array<Node> = [...out1]\n\n        subnodes.forEach(subNode => successors.push(subNode))\n        this.out1.forEach(node => successors.push(node))\n\n        return successors\n    }\n\n    get allSuccessors() {\n        const successors = [...this.out1, ...this.subnodes]\n        const allSuccessors = [...successors]\n        successors.forEach(node => allSuccessors.push(...node.allSuccessors))\n        return allSuccessors\n    }\n\n    toggleVisibility() {\n        const visible = this.nodeState.visible ?? true\n        // console.log({ visible })\n        // set self visibility\n        this.update({ visible: !visible })\n\n        this.parentConnection && (this.state.connections[this.parentConnection] = !visible)\n\n        // set conns visibility to false\n        this.outConnections.forEach(connKey => {\n            this.state.connections[connKey] = !visible\n        })\n    }\n\n    toggleChildrenVisibility() {\n        const visibility = this.nodeState.childrenVisibility ?? true\n        this.update({ childrenVisibility: !visibility })\n        const { subnodes, allSuccessors } = this\n        allSuccessors.forEach(node => {\n            if (!subnodes.includes(node)) { node.toggleVisibility() }\n        })\n    }\n\n    toggleSubnodesVisibility() {\n        const visibility = this.nodeState.subnodesVisibility ?? true\n        this.update({ subnodesVisibility: !visibility })\n        this.subnodes.forEach(node => {\n            node.toggleVisibility()\n        })\n    }\n\n    get outConnections() {\n        return Object.entries(this.state.connections)\n            .filter(([key,]) => {\n                // key: fromId_portNum_toId_portNum\n                const arr = key.split(\"_\").map(Number);\n                return arr[0] === this.id\n            })\n            .map(arr => arr[0])\n    }\n\n    children(portId: number) {\n        return Object.keys(this.state.connections)\n            .filter(key => key.split('_')[0] === this.id.toString() && key.split('_')[1] === portId.toString())\n            .map(conn => this.flow.getNode(Number((conn.split('_')[2]))))\n    }\n\n    get out1() {\n        return this.children(1)\n    }\n\n    get firstSubnode(): Node | undefined {\n        return this.children(2)[0]\n    }\n\n    get subnodes(): Node[] {\n        return this.firstSubnode?.flowLine?.flowLineNodes || []\n    }\n\n    get subnodesWidth(): number {\n        return this.subnodes.reduce((acc, subNode) => {\n            return acc + subNode.width + this.spacingX\n        }, 0)\n    }\n\n    get isSub(): boolean {\n        return this.complexParentNode !== null\n    }\n\n    get complexParentNode(): Node | null {\n        // if is sub eturn complexNode to which belongs this subnode\n        let parent = this.parent\n        if (parent) {\n            if (parent.firstSubnode === this) return parent\n            return parent.complexParentNode\n        }\n        return null\n    }\n\n    /**\n     * If not flow line, - returns null\n     */\n    get flowLine(): null | { flowLineNodes: Node[], hasSubnodes: Node | undefined } {\n        const flowLineNodes: Node[] = [this];\n        let node: Node = this;\n        let hasSubnodes = node.firstSubnode;\n\n        while (node.out1.length === 1) {\n            hasSubnodes = hasSubnodes || node.firstSubnode;\n            node = node.out1[0]\n            flowLineNodes.push(node);\n        }\n\n        return (node.out1.length > 1) ? null : { flowLineNodes, hasSubnodes };\n    }\n\n    get height() {\n        return this.state.drawflow[this.id].height\n    }\n    get width() {\n        return this.state.drawflow[this.id].width\n    }\n\n    get pos() {\n        return this.state.drawflow[this.id].pos\n    }\n\n    setPos(newPos: pos) {\n        const { pos } = this;\n        const { x, y } = newPos;\n        this.flow.moveNode({ nodeId: this.id, dx: x - pos.x, dy: y - pos.y })\n    }\n\n    update(data: updateNode) {\n        const newData = lodash.merge(this.nodeState, data)\n        Object.assign(this.nodeState, newData)\n    }\n}","import { addConnectionType, moveNodeType, stateData } from \"../types\";\nimport Node from './Node'\n\n\nexport class Flow {\n    // readonly because we are using only immer.js with redux-toolkit\n    public readonly state: stateData\n    public readonly nodes: { [id: number]: Node } = {}\n    public readonly distanceToConnect = 100\n    public readonly distanceToDisconnect = 0\n\n    constructor(state: stateData) {\n        this.state = state\n        const { drawflow } = this.state\n        Object.keys(drawflow).map((id) => this.nodes[Number(id)] = new Node(Number(id), this))\n    }\n\n    get heads() {\n        return Object.entries(this.nodes).filter(([id, node]) => !node.parent).map(el => el[1])\n    }\n\n    getNode(id: number) {\n        return this.nodes[id]\n    }\n\n    alignAll() {\n        this.setLaneNumbers()\n        this.heads.forEach(node => {\n            // node.calculateFullWidth()\n            node.alignChildren()\n        })\n    }\n\n    allowConnection(conn: addConnectionType) {\n        let { startId, startPort, endId } = conn\n        const nodeIn = this.getNode(endId)\n        const nodeOut = this.getNode(startId)\n        const connectAsSub = startPort === 2\n\n\n        if (nodeIn.parent || nodeOut.nodeState.visible === false) {\n            return false\n        }\n\n        const flowLine = nodeIn.flowLine\n\n        if ((connectAsSub || nodeOut.isSub) && (!flowLine || flowLine.hasSubnodes)) {\n            return false\n        }\n        return true\n    }\n\n    addConnection(conn: addConnectionType) {\n        let { startId, startPort, endId, endPort } = conn\n        const nodeIn = this.getNode(endId)\n        const nodeOut = this.getNode(startId)\n        const connectAsSub = startPort === 2\n\n\n        if (nodeIn.parent || nodeOut.nodeState.visible === false) {\n            return false\n        }\n\n        const flowLine = nodeIn.flowLine\n\n        if ((connectAsSub || nodeOut.isSub) && (!flowLine || flowLine.hasSubnodes)) {\n            return false\n        }\n\n        // Insertion to into the subnodes\n        let nextNode = null;\n        if (connectAsSub && nodeOut.subnodes.length) {\n            if (nodeOut.nodeState.subnodesVisibility === false) {\n                // connect subnode to the end when subnodes are hidden\n                startId = nodeOut.subnodes[nodeOut.subnodes.length - 1].id\n                startPort = 1\n                const key = `${startId}_${startPort}_${endId}_${endPort}`;\n                this.state.connections[key] = true\n                const { flowLineNodes } = flowLine as { flowLineNodes: Node[] }\n                flowLineNodes.forEach(node => node.toggleVisibility())\n                return\n            } else {\n                nextNode = nodeOut.subnodes[0]\n            }\n        }\n        if (nodeOut.isSub && nodeOut.out1.length) {\n            nextNode = nodeOut.out1[0]\n        }\n\n        if (nextNode !== null) {\n            const keyToDelete = `${startId}_${startPort}_${nextNode.id}_1`\n            delete this.state.connections[keyToDelete]\n            const { flowLineNodes } = flowLine as { flowLineNodes: Node[] }\n            const lastNode = flowLineNodes[flowLineNodes.length - 1]\n            const keyToCreate = `${lastNode.id}_1_${nextNode.id}_1`\n            this.state.connections[keyToCreate] = true\n        }\n\n        const key = `${startId}_${startPort}_${endId}_${endPort}`;\n        this.state.connections[key] = true\n    }\n\n    moveNode({ dx, dy, nodeId }: moveNodeType) {\n        this.state.drawflow[nodeId].pos.x += dx\n        this.state.drawflow[nodeId].pos.y += dy\n    }\n\n    dragNode({ dx, dy, nodeId }: moveNodeType) {\n        this.moveNode({ dx, dy, nodeId })\n\n        /**\n         * Attachment\n         * \n         * traverse all other nodes except this one,\n         * check if their ports are free for new conn, check distance\n         */\n\n        const currentNode = this.getNode(nodeId)\n        const currentNodeHead = currentNode.head\n        if (currentNode.parentConnection) {\n            // remove connection\n            delete this.state.connections[currentNode.parentConnection]\n            this.alignAll()\n        }\n        const nodeInPortPos = currentNode.portInPos\n        if (!nodeInPortPos) return\n        const portDistances: Array<{ key: string, distance: number }> = []\n        Object.entries(this.nodes)\n            .filter(([_, node]) => node.head !== currentNodeHead)\n            .forEach(([id, node]) => {\n                if (Number(id) === nodeId) return\n                node.outPorts.forEach(([key, pos]) => {\n                    const distance = Math.hypot(nodeInPortPos.x - pos.x, nodeInPortPos.y - pos.y)\n                    portDistances.push({ key, distance })\n                })\n            });\n        portDistances.sort((a, b) => (a.distance - b.distance))\n\n        if (portDistances.length) {\n            let nearestPort = portDistances.shift() as { key: string; distance: number; }\n            // check if conn is allowed, or change filter before\n            // let [endId, , endPort] = nearestPort.key.split('_').map(Number)\n            // let allow = this.allowConnection({ startId: nodeId, startPort: 1, endId, endPort })\n            // while (!allow && portDistances.length) {\n            //     // console.log(nearestPort)\n            //     nearestPort = portDistances.shift() as { key: string; distance: number; }\n            //     [endId, , endPort] = nearestPort.key.split('_').map(Number)\n            //     // console.log({ startId: nodeId, startPort: 1, endId, endPort })\n            //     allow = this.allowConnection({ startId: nodeId, startPort: 1, endId, endPort })\n            // }\n            if (true) {\n                if (nearestPort.distance < this.distanceToConnect) {\n                    this.state.portToConnect = nearestPort.key\n                } else {\n                    this.state.portToConnect = undefined\n                }\n            }\n        }\n    }\n\n    setLaneNumbers() {\n        let laneNodes = this.heads\n        laneNodes.forEach(node => node.update({ head: node.id, lane: 0 }))\n\n        while (laneNodes.length) {\n            const nextLaneNodes: Array<Node> = [];\n            laneNodes.forEach(node => {\n                let lane = node.lane as number + 1\n                const { subnodes, head } = node\n                if (head === undefined) { console.error('head is undefined in setLaneNumbers'); return }\n                if (subnodes.length) {\n                    for (const sub of subnodes) {\n                        sub.update({ lane: lane++, head })\n                    }\n                }\n                const nextNodes = node.children(1)\n                nextNodes.forEach(nextNode => nextNode.update({ head, lane }))\n                nextLaneNodes.push(...nextNodes)\n            })\n            laneNodes = nextLaneNodes;\n        }\n\n        this.heads.forEach(node => {\n            const { head } = node\n            for (let laneNumber = 0, positionNumber = 0, nextLaneNodes: Array<Node> = [node]; nextLaneNodes.length; ++laneNumber) {\n\n                nextLaneNodes = Object.values(this.nodes).filter(nextNode => nextNode.lane === laneNumber && nextNode.head === head)\n\n                nextLaneNodes.forEach(nextNode => {\n                    nextNode.update({ positionNumber: positionNumber++ })\n                })\n            }\n        })\n\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport handler from '../components/drawflowHandler'\nimport { dataNode, ports, Slices, stateData, clientPos, addConnectionType, loadType, moveNodeType, pos, portType } from '../types'\nimport { Flow } from './Flow'\nimport type { RootState } from './store'\n\nexport const initialState: stateData = {\n  nodeId: 1,\n  canvasDrag: false,\n  config: {\n    drag: false,\n    connectionsLabelEnable: false,\n    canvasTranslate: {\n      x: 0,\n      y: 0,\n    },\n    zoom: {\n      value: 1,\n      max: 2,\n      min: 0.5,\n      tick: 0.1,\n    },\n  },\n  drawflow: {},\n  connections: {},\n  connectionsLabel: {},\n  ports: {},\n  select: null,\n  selectId: null,\n  selectPath: null,\n  showButton: null,\n  newPathDirection: null,\n  modalType: null,\n  editLock: false,\n  mouseBlockDragPos: { clientX: undefined, clientY: undefined },\n}\n\n\n// load version from server\n\nconst load = (state: stateData, { payload }: PayloadAction<loadType>) => {\n  Object.assign(state, initialState)\n  state.drawflow = payload.drawflow\n  state.nodeId = Object.keys(payload.drawflow).length + 1\n  state.connections = payload.connections\n  return state\n}\n\nconst align = (state: stateData) => {\n  const flow = new Flow(state)\n  flow.alignAll()\n}\n\n\nconst slice = createSlice({\n  name: Slices.Drawflow,\n  initialState,\n  reducers: {\n    setEditLock: (state, { payload }: PayloadAction<boolean>) => {\n      state.editLock = payload\n    },\n    align,\n    moveNode: (state, action: PayloadAction<moveNodeType>) => (new Flow(state)).dragNode(action.payload),\n    setMouseBlockDragPos: (state: stateData, { payload }: PayloadAction<clientPos>) => {\n      state.mouseBlockDragPos = payload\n    },\n    unSelect: (state) => {\n      state.config.drag = false\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    select: (state, { payload }: PayloadAction<{ type: 'node' | 'path' | portType, portId?: number, selectId?: string | number }>) => {\n      const { type, selectId } = payload\n      state.config.drag = type === 'node'\n      state.select = payload\n      state.selectId = selectId ?? null\n    },\n    moveCanvas: (state, { payload: { movementX, movementY } }: PayloadAction<{ movementX: number, movementY: number }>) => {\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n      }\n    },\n    canvasDrag: (state, { payload }: PayloadAction<boolean>) => {\n      state.canvasDrag = payload\n    },\n    canvasMouseMove: (state, { payload: { movementX, movementY, clientX, clientY } }: PayloadAction<{ clientX: number, clientY: number, movementX: number, movementY: number }>) => {\n      state.clientCurrentMousePos = { clientX, clientY }\n      if (state.canvasDrag) {\n        state.config.canvasTranslate.x += movementX\n        state.config.canvasTranslate.y += movementY\n        // console.log('Drag canvas')\n      } else if (state.select?.type === portType.out) {\n        state.newPathDirection = { clientX, clientY }\n        // console.log('New path')\n      } else if (state.config.drag && typeof state.selectId === 'number') {\n        // move node\n        // console.log('Move node')\n        const nodeId = state.selectId\n        const { clientX: prevX, clientY: prevY } = state.mouseBlockDragPos as clientPos\n        state.mouseBlockDragPos = { clientX, clientY }\n        const coef = (state.config.zoom.value)\n        const dx = (clientX - prevX) / coef\n        const dy = (clientY - prevY) / coef;\n        (new Flow(state)).dragNode({ nodeId, dy, dx })\n      }\n      // align(state)\n    },\n    canvasMouseUp: (state) => {\n      const flow = new Flow(state)\n      if (state.portToConnect) {\n        const [startId, , startPort] = state.portToConnect.split('_').map(v => Number(v))\n        // console.log([startId, startPort])\n        const endId = Number(state.selectId)\n        const endPort = 1\n        flow.addConnection({ startId, startPort, endId, endPort })\n      }\n      state.portToConnect = undefined\n      state.newPathDirection = null\n      state.canvasDrag = false\n      state.config.drag = false\n      if (state.select?.type === portType.out) {\n        state.select = null\n      }\n      flow.alignAll()\n    },\n    deleteNode: (state) => {\n      const { connections, drawflow, ports, selectId, select } = state;\n      if (!selectId || (typeof selectId !== 'number') || select?.type !== 'node') return;\n\n      // 1. find in connections\n      Object.keys(connections).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId || arr[2] * 1 === selectId) {\n          delete connections[val];\n        }\n        return null;\n      }, null);\n      // 2. find in ports\n      Object.keys(ports).reduce((_, val) => {\n        const arr = val.split(\"_\").map(v => parseInt(v));\n        if (arr[0] * 1 === selectId) {\n          delete ports[val];\n        }\n        return null;\n      }, null);\n      // 3. find in drawflow\n      delete drawflow[selectId];\n\n      state.select = null\n      state.selectId = null\n      state.showButton = null\n    },\n    deletePath: (state) => {\n      const { selectId, connections, select } = state\n      if (typeof selectId === 'string' && select?.type === \"path\")\n        delete connections[selectId];\n    },\n    load,\n    portMouseUp: (state, { payload: { nodeId, portId, PortType } }: PayloadAction<{ PortType: portType, nodeId: number, portId: number }>) => {\n      const { selectId, select } = state\n      if (PortType !== portType.in || typeof selectId !== \"number\" || !select?.portId) return\n      const endId = nodeId\n      const endPort = portId\n      const startId = selectId\n      const startPort = select.portId\n      // if connect to same node\n      if (startId === endId) return\n      const flow = new Flow(state)\n      flow.addConnection({ startId, startPort, endId, endPort })\n    },\n    clear: () => initialState,\n    pushPorts: (state: stateData, { payload }: PayloadAction<ports>) => {\n      state.ports = { ...state.ports, ...payload }\n    },\n    zoom: (state, { payload }: PayloadAction<boolean | null>) => {\n      const { zoom } = state.config;\n      const { value, max, min, tick } = zoom\n      const newValue = value + (payload ? tick : -tick)\n      if (newValue <= max && newValue >= min) {\n        zoom.value = newValue\n      }\n      if (payload === null) {\n        state.config.canvasTranslate = { x: 0, y: 0 }\n        zoom.value = 1\n      }\n    },\n    nodeSize: (state, { payload: { height, width, id } }: PayloadAction<{ id: number, height: number, width: number }>) => {\n      state.drawflow[id].height = height\n      state.drawflow[id].width = width\n    },\n    toggleSubnodes: (state, { payload: { id } }: PayloadAction<{ id: number }>) => {\n      const flow = new Flow(state)\n      const node = flow.getNode(id)\n      node.toggleSubnodesVisibility()\n      align(state)\n    },\n    toggleChildren: (state, { payload: { id } }: PayloadAction<{ id: number }>) => {\n      const flow = new Flow(state)\n      const node = flow.getNode(id)\n      node.toggleChildrenVisibility()\n      align(state)\n    },\n    copyNode: (state) => {\n      if (state.select?.type === 'node' && typeof state.select.selectId === 'number')\n        state.nodeToCopyId = state.select.selectId\n    },\n    insertCopiedNode: (state) => {\n      if (state.nodeToCopyId === undefined) return\n      const { clientX, clientY } = state.clientCurrentMousePos as clientPos\n      const node = JSON.parse(JSON.stringify(state.drawflow[state.nodeToCopyId]))\n      node.pos = handler.getPos(clientX, clientY, state.config.zoom.value)\n      state.drawflow[state.nodeId] = { ...node, id: state.nodeId, height: 0, width: 0 }\n      ++state.nodeId\n    },\n  },\n})\n\nexport const actions = slice.actions\nexport const drawflowSlice = slice.reducer\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectActiveDrawflow = (state: RootState) => state.flows[state.version]\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport type { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","const makeRandomNames = (length: number, searchWord: string, max = 15, min = 5) => {\n    const result = [];\n    const map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let j = 0; j < length; j++) {\n        let word = \"\";\n        for (let i = 0; i < Math.floor(Math.random() * (max - min) + min); i++) {\n            word += map.charAt(Math.floor(Math.random() * map.length));\n        }\n        if (searchWord.length > 1) {\n            word += searchWord;\n        }\n        result.push(word);\n    }\n    return result;\n}\n\nconst getGroups = async (number: number) => {\n    const rnd = () => ({\n        type: 'Asd',\n        name: 'assa',\n        value: makeRandomNames(1, \"\", 10, 5)[0],\n    })\n    const rez = []\n    for (let i = 0; i < number; ++i) {\n        rez.push(rnd())\n    }\n    return rez;\n}\n\nexport default getGroups","import { node, NODE_TYPE } from \"../types\";\nimport getFilters from \"./fields.mock\";\nimport { data } from \"../types\"\n\nexport const testNode = (): node => {\n  return {\n    id: 0,\n    \"type\": NODE_TYPE.MIDDLE,\n    \"data\": {\n      \"type\": \"Node type\",\n      \"name\": \"Node name\",\n      \"value\": \"Node value\"\n    },\n    \"port\": {\n      \"in\": 1,\n      \"out\": 2\n    },\n    \"pos\": {\n      \"x\": -20,\n      \"y\": 100\n    },\n    \"isSub\": false,\n    height: 0,\n    width: 0\n  }\n}\n\nconst getDummy = async (): Promise<data> => {\n  const data: any = {\n    \"nodes\": {\n    },\n    \"connections\": {\n      \"1_1_3_1\": true,\n      \"4_1_2_1\": true\n    },\n  }\n\n  for (let i = 1; i < 5; ++i) {\n    const node = testNode()\n    node.id = i\n    node.data.name = `Node ${i}`\n    node.pos.x = 100 * i\n    node.pos.y = 50 * i\n    data.nodes[i] = node\n  }\n\n\n  return data\n}\n\n\nconst mock = {\n  getDummy,\n  getFilters,\n}\n\nexport default mock\n","import { configureStore, createAction, createAsyncThunk, createReducer, PayloadAction } from '@reduxjs/toolkit'\nimport { clientPos, flowType, Slices } from '../types'\nimport { drawflowSlice } from './drawflowSlice'\nimport mock, { testNode } from '../Mock'\nimport { initialState as drawflowInitialState } from './drawflowSlice'\nimport handler from '../components/drawflowHandler'\n\nexport const changeVersion = createAction<number>('versions/changed')\nexport const addNewNode = createAction<clientPos>('addNewNode')\nexport const dragTemplate = createAction<number>('dragTemplate')\n\nconst initialState: flowType = {\n  version: 0,\n  flows: [drawflowInitialState, drawflowInitialState, drawflowInitialState],\n  templates: [],\n  dragTemplate: 0\n}\n\nexport const fetchNodeTemplates = createAsyncThunk('fetchPosts', async () => {\n  return await mock.getFilters(5)\n})\n\nexport const fetchFlowVersion = createAsyncThunk('fetchFlowVersion', async () => {\n  return await mock.getDummy()\n})\n\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder\n    .addCase(changeVersion, (state, { payload }) => {\n      state.version = payload\n    })\n    .addCase(addNewNode, (appState: flowType, { payload: { clientX, clientY } }: PayloadAction<clientPos>) => {\n      if (!appState.dragTemplate) return;\n\n      const state = appState.flows[appState.version]\n      const node = testNode()\n      node.pos = handler.getPos(clientX, clientY, state.config.zoom.value)\n      state.mouseBlockDragPos = { clientX, clientY };\n      state.drawflow[state.nodeId] = { ...node, id: state.nodeId, height: 0, width: 0 }\n      state.selectId = state.nodeId++\n      state.select = { type: 'node', selectId: state.selectId }\n      state.config.drag = true\n      \n      appState.dragTemplate = undefined\n    })\n    .addCase(dragTemplate, (appState, { payload }) => {\n      appState.dragTemplate = payload\n    })\n    .addCase(fetchNodeTemplates.fulfilled, (state, action) => {\n      state.templates = action.payload\n    })\n    .addCase(fetchFlowVersion.fulfilled, (state, action) => {\n      const { nodes: drawflow, connections } = action.payload;\n      state.flows[state.version] = drawflowSlice(\n        state.flows[state.version],\n        {\n          type: Slices.Drawflow + '/load',\n          payload: { drawflow, connections }\n        })\n    })\n\n    // reducer for drawflow\n    .addMatcher(\n      (action) => action.type.startsWith(Slices.Drawflow),\n      (state, action) => {\n        state.flows[state.version] = drawflowSlice(state.flows[state.version], action)\n      }\n    )\n\n\n})\n\nexport const store = configureStore({\n  reducer\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\n// store.subscribe(() => console.log(store.getState()))","import styled from \"styled-components\";\nimport { actions, selectActiveDrawflow } from \"../../redux/drawflowSlice\";\nimport { useAppDispatch, useAppSelector } from \"../../redux/hooks\";\n\nconst Div = styled.div`\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  padding: 5px 10px;\n  background-color: #ddd;\n  font-weight: bold;\n  z-index: 1;\n`;\n\nconst Button = styled.button`\n  background-color: #333;\n  color: #fff;\n  border-radius: 4px;\n`;\n\nconst DrawflowAdditionalArea = () => {\n  const editLock = useAppSelector((s) => selectActiveDrawflow(s).editLock);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Div className=\"drawflow-additional\">\n      {!editLock && (\n        <Button\n          className=\"drawflow-additional-button\"\n          onClick={() => console.log(\"clear\")}\n        >\n          Clear\n        </Button>\n      )}\n      <Button\n        className=\"drawflow-additional-button\"\n        onClick={() => dispatch(actions.setEditLock(!editLock))}\n      >\n        {editLock ? \"UnLock\" : \"Lock\"}\n      </Button>\n    </Div>\n  );\n};\n\nexport default DrawflowAdditionalArea;\n","import styled from \"styled-components\";\nimport { actions } from \"../../redux/drawflowSlice\";\nimport { useAppDispatch } from \"../../redux/hooks\";\n\nconst ZoomArea = styled.div`\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  padding: 5px 10px;\n  background-color: #ddd;\n  font-weight: bold;\n  z-index: 1;\n`;\n\nconst Button = styled.button`\n  background-color: #333;\n  color: #fff;\n  border-radius: 4px;\n  padding: 3px 10px;\n`;\n\nconst DrawflowZoomArea = () => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <ZoomArea className=\"drawflow-zoom\">\n      <Button\n        className=\"drawflow-zoom-button\"\n        onClick={() => dispatch(actions.zoom(true))}\n      >\n        +\n      </Button>\n      <Button\n        className=\"drawflow-zoom-button\"\n        onClick={() => dispatch(actions.zoom(false))}\n      >\n        -\n      </Button>\n      <Button\n        className=\"drawflow-zoom-button\"\n        onClick={() => dispatch(actions.zoom(null))}\n      >\n        reset\n      </Button>\n    </ZoomArea>\n  );\n};\n\nexport default DrawflowZoomArea;\n","import { MouseEvent } from \"react\";\n\nconst CircleComponent = (props: any) => {\n    const { property, svgKey, i, editLock } = props;\n\n    const onMouseDown = (e: MouseEvent) => {\n        if (editLock) return;\n        props.select(e, {\n            svgKey,\n            i,\n        });\n    }\n\n    return (\n        <circle\n            {...property}\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"point\"\n            r={6}\n            onMouseDown={onMouseDown}\n        />\n    );\n}\n\nexport default CircleComponent;\n","import styled from \"styled-components\";\nimport { actions, selectActiveDrawflow } from \"../../redux/drawflowSlice\";\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\n\nconst Svg = styled.svg`\n  position: absolute;\n  overflow: visible;\n`;\n\nconst StyledPath = styled.path`\n  :hover {\n    stroke-width: 6px;\n    stroke: purple;\n    cursor: pointer;\n  }\n  fill: none;\n  stroke-width: ${({ theme }) => (theme.selected ? 7 : 6)}px;\n  stroke: steelblue;\n`;\n\ntype Props = {\n  svgKey?: string;\n  d: string;\n};\n\nconst Path = (props: Props) => {\n  const { svgKey, d } = props;\n  const state = useAppSelector(selectActiveDrawflow);\n  const { selectId } = state;\n  const dispatch = useAppDispatch();\n\n  return (\n    <Svg>\n      <StyledPath\n        theme={{ selected: selectId === svgKey && svgKey }}\n        d={d}\n        onMouseDown={(e) => {\n          if (!svgKey) return;\n          e.stopPropagation();\n          // if (editLock) return;\n          dispatch(actions.select({ type: \"path\", selectId: svgKey }));\n        }}\n      ></StyledPath>\n    </Svg>\n  );\n};\n\nexport default Path;\n","import Circle from \"./Circle\"\nimport Path from \"./Path\"\n\nconst Connection = {\n    Circle,\n    Path\n}\n\nexport default Connection\n","import styled from \"styled-components\";\nimport { selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppSelector } from \"../redux/hooks\";\nimport Connection from \"./Connection\";\nimport handler from \"./drawflowHandler\";\n\nexport const NewPath = () => {\n  const { select, config, ports, selectId, newPathDirection } =\n    useAppSelector(selectActiveDrawflow);\n  if (!select?.portId) {\n    console.error(`Select port id not set!`);\n    return null;\n  }\n  const startKey = `${selectId}_out_${select.portId}`;\n\n  if (!ports[startKey]) {\n    console.error(`Start port key not exist`);\n    return null;\n  }\n  if (!newPathDirection) {\n    console.error(`Path direction null`);\n    return null;\n  }\n\n  const start = {\n    x: ports[startKey].x,\n    y: ports[startKey].y,\n  };\n  const zoom = config.zoom.value;\n  const { clientX, clientY } = newPathDirection;\n  const end = handler.getPos(clientX, clientY, zoom);\n  const d = handler.createCurvature(start, end);\n\n  return <Connection.Path d={d} />;\n};\n","// import { useState } from \"react\";\n// import { Grabme, More } from \"../svg\"\n\nimport styled from \"styled-components\";\nimport { actions } from \"../redux/drawflowSlice\";\nimport { useAppDispatch } from \"../redux/hooks\";\n\nconst StyledNode = styled.div`\n  max-height: 100%;\n  overflow: hidden;\n`;\n\nexport const Round = (props: any) => {\n  return (\n    <StyledNode className=\"node-block\">\n      {JSON.stringify(props, null, 2)}\n    </StyledNode>\n  );\n\n  // const { imgSrc, name, description } = props;\n  // return (\n  //     <div className=\"blockelem create-flowy\">\n  //         <div className=\"grabme\">\n  //             <Grabme />\n  //         </div>\n  //         <div className=\"blockin\">\n  //             <div className=\"blockico\">\n  //                 <span></span>\n  //                 <img src={imgSrc} alt={name + '\\n' + description} />\n  //             </div>\n  //             <div className=\"blocktext\">\n  //                 <p className=\"blocktitle\">{name}</p>\n  //                 <div className=\"side-elem-more\">\n  //                     <More />\n  //                 </div>\n  //                 <p className=\"blockdesc\">{description}</p>\n  //             </div>\n  //         </div>\n  //     </div>)\n};\n","import { useEffect, useMemo, useRef } from \"react\";\nimport { port, portType, stateData } from \"../types\";\n\nimport { actions, selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppSelector, useAppDispatch } from \"../redux/hooks\";\nimport { Round } from \"./NodeComponents\";\nimport { subnodeStyle } from \"../styles\";\nimport styled, { css } from \"styled-components\";\nimport { createDraftSafeSelector } from \"@reduxjs/toolkit\";\n\nconst Indicator = styled.div`\n  width: 15px;\n  height: 15px;\n  border-radius: 60px;\n  background-color: #217ce8;\n  opacity: 1;\n  transform: scale(1);\n  transition: all 0.3s cubic-bezier(0.05, 0.03, 0.35, 1);\n  ${({ theme }) =>\n    theme.visible ||\n    css`\n      opacity: 0;\n      transform: scale(0);\n    `}\n`;\n\nconst selectPortToConnect = createDraftSafeSelector(\n  selectActiveDrawflow,\n  ({ portToConnect }) => portToConnect\n);\n\nconst selectIsSub = (id: number) =>\n  createDraftSafeSelector(\n    selectActiveDrawflow,\n    ({\n      drawflow: {\n        [id]: { isSub },\n      },\n    }) => isSub\n  );\n\nconst isSelected = (id: number) =>\n  createDraftSafeSelector(\n    selectActiveDrawflow,\n    ({ selectId }) => id === selectId\n  );\n\nconst portStyle = styled.div`\n  height: 15px;\n  width: 15px;\n  border-radius: 50%;\n  background-color: red;\n  position: absolute;\n`;\n\nconst Output1 = styled(portStyle)`\n  left: 50%;\n  top: 100%;\n  transform: translate(-50%, -50%);\n  ${({ theme }) =>\n    theme.isSub &&\n    css`\n      left: 100%;\n      top: 50%;\n    `}\n`;\nconst Output2 = styled(portStyle)`\n  left: 100%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  ${({ theme }) =>\n    theme.isSub &&\n    css`\n      display: none;\n    `}\n`;\n\nconst Input1 = styled(portStyle)`\n  left: 50%;\n  top: 0;\n  transform: translate(-50%, -50%);\n\n  ${({ theme }) =>\n    theme.isSub &&\n    css`\n      left: 0;\n      top: 50%;\n    `}\n`;\nconst styledPorts = {\n  [portType.in]: [Input1],\n  [portType.out]: [Output1, Output2],\n};\n\nconst Ports = (props: { type: portType; id: number; port: port }) => {\n  const { id, port, type } = props;\n  const dispatch = useAppDispatch();\n  const portToConnect = useAppSelector(selectPortToConnect);\n  const isSub = useAppSelector(selectIsSub(id));\n  let arr = [];\n\n  for (let i = 1; i <= port[type]; i++) {\n    const key = `${type}put-${i}`;\n    const portKey = `${id}_${type}_${i}`;\n    const StyledPort = styledPorts[type][i - 1];\n    const port = (\n      <StyledPort\n        theme={{ isSub }}\n        onMouseDown={(e) => {\n          e.stopPropagation();\n          dispatch(\n            actions.select({\n              type,\n              portId: i,\n              selectId: id,\n            })\n          );\n        }}\n        key={key}\n        onMouseUp={(e) => {\n          dispatch(\n            actions.portMouseUp({ nodeId: id, portId: i, PortType: type })\n          );\n        }}\n      >\n        <Indicator theme={{ visible: portToConnect === portKey && \" \" }} />\n      </StyledPort>\n    );\n    arr.push(port);\n  }\n\n  return <div className={`${type}puts`}>{arr}</div>;\n};\n\nconst BlockStyled = styled.div`\n  display: inline-block;\n  position: absolute;\n  padding: 5px;\n  width: 200px;\n  min-height: 60px;\n  background-color: #d3d3d3;\n  z-index: 1;\n  ${({ theme }) =>\n    theme.selected &&\n    css`\n      box-shadow: 0 2px 15px 2px #cacaca;\n      z-index: 2;\n    `}\n`;\n\nconst DrawflowNodeBlock = ({ id }: { id: number }) => {\n  // console.log(`Render node id: ${id}`)\n  const {\n    nodeId,\n    config: { drag },\n    drawflow: { [id]: node },\n  } = useAppSelector(selectActiveDrawflow);\n\n  const selected = useAppSelector(isSelected(id));\n  const dispatch = useAppDispatch();\n  const { port, pos } = node;\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      const { offsetHeight, offsetWidth } = ref.current;\n      dispatch(\n        actions.nodeSize({ height: offsetHeight, width: offsetWidth, id })\n      );\n    }\n  }, [dispatch, id, node]);\n\n  useEffect(() => {\n    const getPortPos = (type: portType, i: number, elmt: Element) => {\n      const key = `${id}_${type}_${i}`;\n      const x = parseInt(getComputedStyle(elmt).left) + node.pos.x;\n      const y = parseInt(getComputedStyle(elmt).top) + node.pos.y;\n\n      return {\n        [key]: { x, y },\n      };\n    };\n\n    if (ref.current) {\n      const inputs = Array.from(\n        (ref.current.querySelector(\".inputs\") as HTMLDivElement).children\n      );\n      const outputs = Array.from(\n        (ref.current.querySelector(\".outputs\") as HTMLDivElement).children\n      );\n      let newPorts = {};\n      newPorts = Object.assign(\n        newPorts,\n        inputs.reduce((acc, elmt, i) => {\n          return Object.assign(acc, getPortPos(portType.in, i + 1, elmt));\n        }, {})\n      );\n      newPorts = Object.assign(\n        newPorts,\n        outputs.reduce((acc, elmt, i) => {\n          return Object.assign(acc, getPortPos(portType.out, i + 1, elmt));\n        }, {})\n      );\n      dispatch(actions.pushPorts(newPorts));\n    }\n  }, [dispatch, id, node.pos.x, node.pos.y]);\n\n  useEffect(() => {\n    // when add new node shift it to left and up\n    if (ref.current && nodeId - 1 === id && drag) {\n      const { offsetHeight, offsetWidth } = ref.current;\n      dispatch(\n        actions.moveNode({\n          nodeId: id,\n          dx: -offsetWidth * 0.2,\n          dy: -offsetHeight * 0.2,\n        })\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let style = {\n    top: pos.y + \"px\",\n    left: pos.x + \"px\",\n    cursor: \"move\",\n  };\n  if (node.isSub) {\n    style = { ...style, ...subnodeStyle };\n  }\n\n  return (\n    <BlockStyled\n      theme={{ selected }}\n      ref={ref}\n      style={style}\n      onMouseDown={(e) => {\n        e.stopPropagation();\n        const { clientX, clientY } = e;\n        dispatch(actions.select({ type: \"node\", selectId: id }));\n        dispatch(actions.setMouseBlockDragPos({ clientX, clientY }));\n      }}\n      onContextMenu={(e) => {\n        // TODO show delete button\n      }}\n      onDoubleClick={() => {\n        // show node settings\n      }}\n    >\n      <Round {...node} />\n\n      {!node.isSub && (\n        <>\n          <div\n            onClick={() => {\n              dispatch(actions.toggleSubnodes({ id }));\n            }}\n          >\n            toggle sub\n          </div>\n          <div\n            onClick={() => {\n              console.log(22);\n              dispatch(actions.toggleChildren({ id }));\n            }}\n          >\n            toggle children\n          </div>\n        </>\n      )}\n      <Ports id={id} port={port} type={portType.in} />\n      <Ports id={id} port={port} type={portType.out} />\n      {/* <button\n            style={{\n                display: showButton === id ? \"block\" : \"none\"\n            }}\n            className=\"drawflow-delete\"\n            onMouseDown={(e) => { e.stopPropagation(); event.deleteNode() }}\n        >X</button> */}\n    </BlockStyled>\n  );\n};\n\nexport default DrawflowNodeBlock;\n","import { createDraftSafeSelector } from \"@reduxjs/toolkit\";\nimport { selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppSelector } from \"../redux/hooks\";\nimport DrawflowNodeBlock from \"./DrawflowNodeBlock\";\n\nconst selectNodeIds = createDraftSafeSelector(selectActiveDrawflow, (s) =>\n  Object.entries(s.drawflow)\n    .filter(([id, { visible }]) => visible !== false)\n    .map(([id]) => Number(id))\n);\n\nexport const NodeList = () => {\n  const drawflow = useAppSelector(selectNodeIds);\n  // console.log(`Render NodeList`)\n\n  return (\n    <>\n      {drawflow.map((id) => {\n        return <DrawflowNodeBlock key={id} id={id} />;\n      })}\n    </>\n  );\n};\n","import { selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppSelector } from \"../redux/hooks\";\nimport Connection from \"./Connection\";\nimport handler from \"./drawflowHandler\";\n\nexport const ConnectionList = () => {\n  const { connections, ports } = useAppSelector(selectActiveDrawflow);\n\n  const conns = Object.entries(connections)\n    .filter(([, conn]) => conn)\n    .map(([key]) => {\n      // key: fromId_portNum_toId_portNum\n      const arr = key.split(\"_\").map(Number);\n\n      const startKey = `${arr[0]}_out_${arr[1]}`;\n      const endKey = `${arr[2]}_in_${arr[3]}`;\n\n      if (!ports[startKey] || !ports[endKey]) {\n        // console.error(`No such connection`, key);\n        return null;\n      }\n\n      const start = {\n        x: ports[startKey].x,\n        y: ports[startKey].y,\n      };\n      const end = {\n        x: ports[endKey].x,\n        y: ports[endKey].y,\n      };\n      const d = handler.createCurvature(start, end);\n      return <Connection.Path key={key} svgKey={key} d={d} />;\n    });\n  return <>{conns}</>;\n};\n","import { actions, selectActiveDrawflow } from \"../redux/drawflowSlice\";\nimport { useAppSelector, useAppDispatch } from \"../redux/hooks\";\nimport { useEffect } from \"react\";\nimport { addNewNode, fetchFlowVersion } from \"../redux/store\";\nimport DrawflowAdditionalArea from \"./ButtonArea/DrawflowAdditionalArea\";\nimport DrawflowZoomArea from \"./ButtonArea/DrawflowZoomArea\";\nimport { NewPath } from \"./NewPath\";\n\nimport { NodeList } from \"./NodeList\";\nimport { ConnectionList } from \"./ConnectionList\";\nimport styled from \"styled-components\";\n\nconst ParentDrawflow = styled.div`\n  position: relative;\n  height: 100%;\n  overflow: hidden;\n  background: #282a36;\n  background-size: 25px 25px;\n  background-image: linear-gradient(to right, #2f323d 1px, transparent 1px),\n    linear-gradient(to bottom, #2f323d 1px, transparent 1px);\n`;\n\nconst InnerDrawflow = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n`;\n\nexport const Drawflow = () => {\n  const {\n    config: {\n      canvasTranslate: { x, y },\n      zoom,\n    },\n    newPathDirection,\n  } = useAppSelector(selectActiveDrawflow);\n  // console.log(`Render Drawflow`)\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(fetchFlowVersion());\n  }, [dispatch]);\n\n  return (\n    <ParentDrawflow\n      tabIndex={0}\n      onKeyDownCapture={(e) => {\n        if (e.key === \"Delete\") {\n          dispatch(actions.deletePath());\n          dispatch(actions.deleteNode());\n        }\n        if (e.ctrlKey && e.key === \"c\") {\n          dispatch(actions.copyNode());\n        }\n        if (e.ctrlKey && e.key === \"v\") {\n          dispatch(actions.insertCopiedNode());\n        }\n      }}\n      id=\"drawflow\"\n      className=\"parent-drawflow\"\n      onMouseDown={(e) => {\n        // if (!e.currentTarget.classList.contains(\"parent-drawflow\")) return;\n        dispatch(actions.canvasDrag(true));\n        dispatch(actions.unSelect());\n      }}\n      onMouseUp={() => dispatch(actions.canvasMouseUp())}\n      onMouseMove={(e) => {\n        const { clientX, clientY, movementX, movementY } = e;\n        dispatch(\n          actions.canvasMouseMove({ clientX, clientY, movementX, movementY })\n        );\n      }}\n      onMouseEnter={(e) => {\n        const { clientX, clientY } = e;\n        dispatch(addNewNode({ clientX, clientY }));\n      }}\n    >\n      <DrawflowAdditionalArea />\n      <DrawflowZoomArea />\n      <InnerDrawflow\n        className=\"drawflow\"\n        style={{\n          transform: `translate(${x}px, ${y}px) scale(${zoom.value})`,\n        }}\n      >\n        <NodeList />\n        <ConnectionList />\n        {newPathDirection && <NewPath />}\n      </InnerDrawflow>\n    </ParentDrawflow>\n  );\n};\n","import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../redux/hooks';\nimport { dragTemplate, fetchNodeTemplates } from '../redux/store';\n\ntype Props = {\n    searchWord: string\n}\n\nconst FilterList = (props: Props) => {\n    const { searchWord } = props;\n    const list = useAppSelector(s => s.templates)\n    const dispatch = useAppDispatch()\n    const searchArr = searchWord.toLowerCase().split(\" \").filter(item => item.length > 0);\n\n\n    useEffect(() => {\n        dispatch(fetchNodeTemplates())\n    }, [dispatch])\n\n    return (\n        <div\n            className=\"drawflow-node-list-wrap\"\n        >\n            {list.map((item, idx) => {\n                const { name, type, value } = item\n                const label = JSON.stringify(item, null, 2)\n\n                return (\n                    (searchArr.find(word => label.toLowerCase().includes(word)) || !searchArr.length) &&\n                    <div\n                        key={\"drawflow-sidemenu-block-\" + idx}\n                        className=\"drawflow-node-block\"\n                        onMouseDownCapture={(e) => {\n                            dispatch(dragTemplate(1))\n                        }}\n                    >\n                        <pre>{`Type: ${type}\\nValue: ${value + name}`}</pre>\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default FilterList;\n","import { useEffect, useState } from 'react';\nimport { Drawflow } from './components/DrawflowHook';\nimport FilterList from \"./components/FilterList\";\nimport { useAppDispatch } from './redux/hooks';\nimport { changeVersion, fetchFlowVersion } from './redux/store';\n\nimport './drawflow.scss'\nimport { actions } from './redux/drawflowSlice';\n\nfunction App() {\n\n  const [searchWord, setSearchWord] = useState(\"\");\n  const dispatch = useAppDispatch()\n  // console.log('Render App')\n  useEffect(() => {\n    dispatch(actions.align())\n  }, [dispatch])\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"drawflow-node-list\">\n        <div className=\"drawflow-node-list-search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search templates\"\n            onChange={e => { setSearchWord(e.target.value) }}\n          />\n        </div>\n        <div className=\"drawflow-node-list-flex\">\n          <FilterList\n            searchWord={searchWord}\n          />\n        </div>\n      </div>\n      <div className=\"flow\">\n        <div>\n          <button onClick={() => dispatch(fetchFlowVersion())}>Fetch flow version</button>\n\n          <button onClick={() => dispatch(changeVersion(0))}>Version 1</button>\n          <button onClick={() => dispatch(changeVersion(1))}>Version 2</button>\n          <button onClick={() => dispatch(changeVersion(2))}>Version 3</button>\n          <button onClick={() => dispatch(actions.align())}>Align</button>\n        </div>\n        <Drawflow />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}