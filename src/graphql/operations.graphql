fragment nodeInfo on NodeInfo {
  name
  description
  iconLink
}

fragment NodeSwitchProps on NodeSwitchProps {
  SwitchDisplayType
}

fragment NodeFileProps on NodeFileProps {
  info
  url
}

fragment NodeSwitchOptionProps on NodeSwitchOptionProps {
  imageLink
  text
}

fragment NodeLinkProps on NodeLinkProps {
  src
  text
}

fragment NodeAudioProps on NodeAudioProps {
  src
}

fragment NodeImageProps on NodeImageProps {
  src
}

fragment NodeTextProps on NodeTextProps {
  src
}

fragment NodeVideoProps on NodeVideoProps {
  src
}

fragment NodeWaitProps on NodeWaitProps {
  src
  delay
}

fragment NodeCountdownProps on NodeCountdownProps {
  duration
}

fragment nodeProps on NodeProps {
  NodeFileProps {
    ...NodeFileProps
  }
  NodeLinkProps {
    ...NodeLinkProps
  }
  NodeSwitchOptionProps {
    ...NodeSwitchOptionProps
  }
  NodeImageProps {
    ...NodeImageProps
  }
  NodeAudioProps {
    ...NodeAudioProps
  }
  NodeCountdownProps {
    ...NodeCountdownProps
  }

  NodeSwitchProps {
    ...NodeSwitchProps
  }

  NodeVideoProps {
    ...NodeVideoProps
  }

  NodeTextProps {
    ...NodeTextProps
  }
  NodeWaitProps {
    ...NodeWaitProps
  }
}

#fragment NodeProps on NodeProps {
#    NodeAudioProps {
#        ...NodeAudioProps
#    }
#}

fragment templateNode on TemplateNode {
  id
  order
  group {
    id
  }
  info {
    ...nodeInfo
  }

  NodeProps {
    type
    ...nodeProps
  }
}

query templateNodes(
  $cursor: TemplateNodeWhereUniqueInput
  $distinct: [TemplateNodeScalarFieldEnum!]
  $orderBy: [TemplateNodeOrderByWithRelationInput!]
  $skip: Int
  $take: Int
  $where: TemplateNodeWhereInput
) {
  templateNodes(
    cursor: $cursor
    where: $where
    take: $take
    skip: $skip
    orderBy: $orderBy
    distinct: $distinct
  ) {
    ...templateNode
  }
}
#}

mutation templateNodesMutation($input: TemplateNodeCreateInput!) {
  createTemplateNode(data: $input) {
    id
  }
}

mutation templateNodesUpdate(
  $data: TemplateNodeUpdateInput!
  $where: TemplateNodeWhereUniqueInput!
) {
  updateTemplateNode(data: $data, where: $where) {
    id
  }
}

mutation templateNodesDelete($where: TemplateNodeWhereUniqueInput!) {
  deleteTemplateNode(where: $where) {
    id
  }
}

# TemplateNodes groups

query templateNodesGroups(
  $cursor: TemplateNodesGroupWhereUniqueInput
  $distinct: [TemplateNodesGroupScalarFieldEnum!]
  $orderBy: [TemplateNodesGroupOrderByWithRelationInput!]
  $skip: Int
  $take: Int
  $where: TemplateNodesGroupWhereInput
) {
  templateNodesGroups(
    cursor: $cursor
    distinct: $distinct
    orderBy: $orderBy
    skip: $skip
    where: $where
    take: $take
  ) {
    id
    name
    description
  }
}

mutation templateNodesGroupsMutation($data: TemplateNodesGroupCreateInput!) {
  createTemplateNodesGroup(data: $data) {
    id
  }
}

mutation templateNodesGroupsUpdate(
  $data: TemplateNodesGroupUpdateInput!
  $where: TemplateNodesGroupWhereUniqueInput!
) {
  updateTemplateNodesGroup(data: $data, where: $where) {
    id
  }
}

mutation templateNodesGroupsDelete(
  $where: TemplateNodesGroupWhereUniqueInput!
) {
  deleteTemplateNodesGroup(where: $where) {
    id
  }
}

#query botFlow($id: ID!) {
#    getBotFlow(id: $id) {
#        name
#        description
#        nextVersionNumber
#        versions {
#            nodes {
#                id
#                props {
#                    ...nodeProps
#                }
#                info {
#                    ...nodeInfo
#                }
#                pos {
#                    x
#                    y
#                }
#                ports {
#                    index
#                    pos {
#                        x
#                        y
#                    }
#                }
#            }
#            connections {
#                from {
#                    id
#                }
#                to {
#                    id
#                }
#            }
#        }
#    }
#}
#
#mutation botFlowVersion($flow: [AddBotFlowVersionInput!]!) {
#    addBotFlowVersion(input: $flow) {
#        botFlowVersion {
#            id
#        }
#    }
#}
